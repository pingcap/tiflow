#!/bin/bash
# parameter 1: full path of output directory

set -e

CUR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
source $CUR/../_utils/test_prepare

OUT_DIR=$1
if [[ -z $OUT_DIR ]]; then
    echo "wrong out_dir value: $1"
    exit 1
fi

stop_tidb_cluster

cd $OUT_DIR && echo "start tidb cluster in $OUT_DIR"

cat - > "$OUT_DIR/pd-config.toml" <<EOF
[replication]
# The number of replicas for each region.
max-replicas = 1
EOF

echo "Starting Upstream PD..."
pd-server \
    --client-urls http://${UP_PD_HOST}:${UP_PD_PORT}\
    --peer-urls http://${UP_PD_HOST}:${UP_PD_PEER_PORT}\
    --config "$OUT_DIR/pd-config.toml" \
    --log-file "$OUT_DIR/pd.log" \
    --data-dir "$OUT_DIR/pd" &

echo "Starting Downstream PD..."
pd-server \
    --client-urls http://${DOWN_PD_HOST}:${DOWN_PD_PORT}\
    --peer-urls http://${DOWN_PD_HOST}:${DOWN_PD_PEER_PORT}\
    --config "$OUT_DIR/pd-config.toml" \
    --log-file "$OUT_DIR/down_pd.log" \
    --data-dir "$OUT_DIR/down_pd" &

# wait until PD is online...
while ! curl -o /dev/null -sf http://${UP_PD_HOST}:${UP_PD_PORT}/pd/api/v1/version; do
    sleep 1
done

while ! curl -o /dev/null -sf http://${DOWN_PD_HOST}:${DOWN_PD_PORT}/pd/api/v1/version; do
    sleep 1
done

# Tries to limit the max number of open files under the system limit
cat - > "$OUT_DIR/tikv-config.toml" <<EOF
[rocksdb]
max-open-files = 4096
[raftdb]
max-open-files = 4096
[raftstore]
# true (default value) for high reliability, this can prevent data loss when power failure.
sync-log = false


# [coprocessor]
# region-max-keys = 6000
# region-split-keys = 5000
EOF

# tidb server config file
cat - > "$OUT_DIR/tidb-config.toml" <<EOF
split-table = true
EOF

echo "Starting Upstream TiKV..."
tikv-server \
    --pd ${UP_PD_HOST}:${UP_PD_PORT} \
    -A ${UP_TIKV_HOST}:${UP_TIKV_PORT} \
    --log-file "$OUT_DIR/tikv.log" \
    -C "$OUT_DIR/tikv-config.toml" \
    -s "$OUT_DIR/tikv" &

echo "Starting Downstream TiKV..."
tikv-server \
    --pd ${DOWN_PD_HOST}:${DOWN_PD_PORT} \
    -A ${DOWN_TIKV_HOST}:${DOWN_TIKV_PORT} \
    --log-file "$OUT_DIR/tikv_down.log" \
    -C "$OUT_DIR/tikv-config.toml" \
    -s "$OUT_DIR/tikv_down" &

sleep 2

echo "Starting Upstream TiDB..."
tidb-server \
    -P ${UP_TIDB_PORT} \
    -config "$OUT_DIR/tidb-config.toml" \
    --store tikv \
    --path ${UP_PD_HOST}:${UP_PD_PORT} \
    --status=${UP_TIDB_STATUS} \
    --log-file "$OUT_DIR/tidb.log" &

tidb-server \
    -P ${UP_TIDB_OTHER_PORT} \
    -config "$OUT_DIR/tidb-config.toml" \
    --store tikv \
    --path ${UP_PD_HOST}:${UP_PD_PORT} \
    --status=${UP_TIDB_OTHER_STATUS} \
    --log-file "$OUT_DIR/tidb_other.log" &

echo "Starting Downstream TiDB..."
tidb-server \
    -P ${DOWN_TIDB_PORT} \
    -config "$OUT_DIR/tidb-config.toml" \
    --store tikv \
    --path ${DOWN_PD_HOST}:${DOWN_PD_PORT} \
    --status=${DOWN_TIDB_STATUS} \
    --log-file "$OUT_DIR/down_tidb.log" &

echo "Verifying Upstream TiDB is started..."
i=0
while ! mysql -uroot -h${UP_TIDB_HOST} -P${UP_TIDB_PORT} --default-character-set utf8mb4 -e 'select * from mysql.tidb;'; do
    i=$((i+1))
    if [ "$i" -gt 40 ]; then
        echo 'Failed to start upstream TiDB'
        exit 2
    fi
    sleep 1
done

i=0
while ! mysql -uroot -h${UP_TIDB_HOST} -P${UP_TIDB_OTHER_PORT} --default-character-set utf8mb4 -e 'select * from mysql.tidb;'; do
    i=$((i+1))
    if [ "$i" -gt 40 ]; then
        echo 'Failed to start upstream TiDB'
        exit 2
    fi
    sleep 1
done

echo "Verifying Downstream TiDB is started..."
i=0
while ! mysql -uroot -h${DOWN_TIDB_HOST} -P${DOWN_TIDB_PORT} --default-character-set utf8mb4 -e 'select * from mysql.tidb;'; do
    i=$((i+1))
    if [ "$i" -gt 10 ]; then
        echo 'Failed to start downstream TiDB'
        exit 1
    fi
    sleep 2
done

run_sql "update mysql.tidb set variable_value='60m' where variable_name='tikv_gc_life_time';" ${UP_TIDB_HOST} ${UP_TIDB_PORT}
run_sql "update mysql.tidb set variable_value='60m' where variable_name='tikv_gc_life_time';" ${DOWN_TIDB_HOST} ${DOWN_TIDB_PORT}
