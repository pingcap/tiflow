drop table if exists warehouse;

create table warehouse (
id int PRIMARY KEY,
w_idtiny tinyint not null,
w_idmedium mediumint not null);

ALTER TABLE warehouse ADD UNIQUE id_idx (w_idtiny);
ALTER TABLE warehouse DROP INDEX id_idx;
#Since TiCDC test enable alter-primary-key, we close this error
#--error UNSUPPORT_MODIFY_PK_ERROR
ALTER TABLE warehouse DROP PRIMARY KEY;
ALTER TABLE warehouse DROP COLUMN w_idmedium;

# For add column
drop table if exists t;
create table t (c1 int);
alter table t add column c2 int;
alter table t add column c3 int first;
alter table t add column c4 int after c1;
insert into t values (1, 2, 3, 4);
select * from t;



create table t1 (
col1 int not null auto_increment primary key,
col2 varchar(30) not null,
col3 varchar (20) not null,
col4 varchar(4) not null,
col5 enum('PENDING', 'ACTIVE', 'DISABLED') not null,
col6 int not null, to_be_deleted int);
insert into t1 values (2,4,3,5,"PENDING",1,7);
alter table t1 add column col4_5 varchar(20) not null after col4;
alter table t1 add column col7 varchar(30) not null after col5;
alter table t1 add column col8 datetime not null;
alter table t1 drop column to_be_deleted;
alter table t1 change column col2 fourth varchar(30) not null after col3;
alter table t1 modify column col6 int not null first;
select * from t1;
#drop table t1;



# Check that pack_keys and dynamic length rows are not forced. 

CREATE TABLE t2 (
GROUP_ID int(10) unsigned DEFAULT '0' NOT NULL,
LANG_ID smallint(5) unsigned DEFAULT '0' NOT NULL,
NAME varchar(80) DEFAULT '' NOT NULL,
PRIMARY KEY (GROUP_ID,LANG_ID),
KEY NAME (NAME));
--error 8200
ALTER TABLE t2 CHANGE NAME NAME CHAR(80) not null;
# TODO: SHOW FULL COLUMNS FROM t1;
# TODO: Expected result: > SHOW FULL COLUMNS FROM t1;
# TODO: Expected result: > Field	Type	Collation	Null	Key	Default	Extra	Privileges	Comment
# TODO: Expected result: > GROUP_ID	int(10) unsigned	NULL	NO	PRI	0		#	
# TODO: Expected result: > LANG_ID	smallint(5) unsigned	NULL	NO	PRI	0		#	
# TODO: Expected result: > NAME	char(80)	latin1_swedish_ci	NO	MUL	NULL		#	
#DROP TABLE t2;


# The following is also part of bug #6236 (CREATE TABLE didn't properly count
# not null columns for primary keys)

create table t3 (a int, b int, c int, d int, e int, f int, g int, h int,i int, primary key (a,b,c,d,e,f,g,i,h)) engine=MyISAM;
# TODO: insert into t1 (a) values(1);
# TODO: Expected warnings
--replace_column 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
# TODO: show table status like 't1';
# TODO: Expected result: > show table status like 't1';
# TODO: Expected result: > Name	Engine	Version	Row_format	Rows	Avg_row_length	Data_length	Max_data_length	Index_length	Data_free	Auto_increment	Create_time	Update_time	Check_time	Collation	Checksum	Create_options	Comment
# TODO: Expected result: > t1	MyISAM	10	Fixed	1	37	X	X	X	X	X	X	X	X	latin1_swedish_ci	NULL		
alter table t3 modify a int;
--replace_column 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
# TODO: show table status like 't1';
# TODO: Expected result: > show table status like 't1';
# TODO: Expected result: > Name	Engine	Version	Row_format	Rows	Avg_row_length	Data_length	Max_data_length	Index_length	Data_free	Auto_increment	Create_time	Update_time	Check_time	Collation	Checksum	Create_options	Comment
# TODO: Expected result: > t1	MyISAM	10	Fixed	1	37	X	X	X	X	X	X	X	X	latin1_swedish_ci	NULL		
#drop table t1;
create table t4 (a int not null, b int not null, c int not null, d int not null, e int not null, f int not null, g int not null, h int not null,i int not null, primary key (a,b,c,d,e,f,g,i,h)) engine=MyISAM;
# TODO: insert into t1 (a) values(1);
# TODO: Expected warnings
--replace_column 7 X 8 X 9 X 10 X 11 X 12 X 13 X 14 X
# TODO: show table status like 't1';
# TODO: Expected result: > show table status like 't1';
# TODO: Expected result: > Name	Engine	Version	Row_format	Rows	Avg_row_length	Data_length	Max_data_length	Index_length	Data_free	Auto_increment	Create_time	Update_time	Check_time	Collation	Checksum	Create_options	Comment
# TODO: Expected result: > t1	MyISAM	10	Fixed	1	37	X	X	X	X	X	X	X	X	latin1_swedish_ci	NULL		
#drop table t1;

#
# Bug#18038  MySQL server corrupts binary columns data
#

CREATE TABLE t5 (s CHAR(8) BINARY);
INSERT INTO t5 VALUES ('test');
SELECT LENGTH(s) FROM t5;
ALTER TABLE t5 MODIFY s CHAR(10) BINARY;
SELECT LENGTH(s) FROM t5;
#DROP TABLE t1;

CREATE TABLE t6 (s BINARY(8));
INSERT INTO t6 VALUES ('test');
SELECT LENGTH(s) FROM t6;
SELECT HEX(s) FROM t6;
ALTER TABLE t6 MODIFY s BINARY(10);
# TODO: SELECT HEX(s) FROM t1;
# TODO: Expected result: > SELECT HEX(s) FROM t1;
# TODO: Expected result: > HEX(s)
# TODO: Expected result: > 74657374000000000000
# TODO: SELECT LENGTH(s) FROM t1;
# TODO: Expected result: > SELECT LENGTH(s) FROM t1;
# TODO: Expected result: > LENGTH(s)
# TODO: Expected result: > 10
#DROP TABLE t1;


#
# Bug#19386: Multiple alter causes crashed table
# The trailing column would get corrupted data, or server could not even read
# it.
#

CREATE TABLE t7 (v VARCHAR(3), b INT);
INSERT INTO t7 VALUES ('abc', 5);
SELECT * FROM t7;
ALTER TABLE t7 MODIFY COLUMN v VARCHAR(4);
SELECT * FROM t7;
#DROP TABLE t1;


#
# Bug#28427: Columns were renamed instead of moving by ALTER TABLE.
#
CREATE TABLE t8 (f1 INT, f2 INT, f3 INT);
INSERT INTO t8 VALUES (1, 2, NULL);
SELECT * FROM t8;
ALTER TABLE t8 MODIFY COLUMN f3 INT AFTER f1;
SELECT * FROM t8;
ALTER TABLE t8 MODIFY COLUMN f3 INT AFTER f2;
SELECT * FROM t8;
#DROP TABLE t1;


--echo #
--echo # Test for bug #12652385 - "61493: REORDERING COLUMNS TO POSITION
--echo #                           FIRST CAN CAUSE DATA TO BE CORRUPTED".
--echo #
--disable_warnings
drop table if exists t9;
--enable_warnings
--echo # Use MyISAM engine as the fact that InnoDB doesn't support
--echo # in-place ALTER TABLE in cases when columns are being renamed
--echo # hides some bugs.
create table t9 (i int, j int) engine=myisam;
insert into t9 value (1, 2);
--echo # First, test for original problem described in the bug report.
select * from t9;
--echo # Change of column order by the below ALTER TABLE statement should
--echo # affect both column names and column contents.
alter table t9 modify column j int first;
select * from t9;
--echo # Now test for similar problem with the same root.
--echo # The below ALTER TABLE should change not only the name but
--echo # also the value for the last column of the table.
alter table t9 drop column i;
alter table t9 add column k int default 0;
select * from t9;
--echo # Clean-up.
#drop table t1;


--echo # Bug#11748057 (formerly known as 34972): ALTER TABLE statement doesn't
--echo #                                         identify correct column name.
--echo #

CREATE TABLE t10 (c1 int unsigned , c2 char(100) not null default '');
ALTER TABLE t10 ADD c3 char(16) NOT NULL DEFAULT '' AFTER c2;
ALTER TABLE t10 MODIFY c2 char(100) NOT NULL DEFAULT '' AFTER c1;
# TODO: SHOW CREATE TABLE t1;
# TODO: Expected result: > SHOW CREATE TABLE t1;
# TODO: Expected result: > Table	Create Table
# TODO: Expected result: > t1	CREATE TABLE `t1` (
# TODO: Expected result: >   `c1` int(10) unsigned DEFAULT NULL,
# TODO: Expected result: >   `c2` char(100) NOT NULL DEFAULT '',
# TODO: Expected result: >   `c3` char(16) NOT NULL DEFAULT ''
# TODO: Expected result: > ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
#DROP TABLE t1;




#
# Some additional tests for new, faster alter table.  Note that most of the
# whole alter table code is being tested all around the test suite already.
#

create table t11 (v varchar(32));
insert into t11 values ('def'),('abc'),('hij'),('3r4f');
select * from t11;
# Fast alter, no copy performed
alter table t11 change v v2 varchar(32);
select * from t11;
# Fast alter, no copy performed
alter table t11 change v2 v varchar(64);
select * from t11;
update t11 set v = 'lmn' where v = 'hij';
select * from t11;
#drop table t1;
