#!/bin/bash

# --workdir: work directory
# --tidb-config: path to tidb config file

set -e

OUT_DIR=
tidb_config=

while [[ ${1} ]]; do
    case "${1}" in
        --workdir)
            OUT_DIR=${2}
            shift
            ;;
        --tidb-config)
            tidb_config=${2}
            shift
            ;;
        *)
            echo "Unknown parameter: ${1}" >&2
            exit 1
    esac

    if ! shift; then
        echo 'Missing parameter argument.' >&2
        exit 1
    fi
done

CUR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
source $CUR/../_utils/test_prepare
DOWN_TIDB_HOST=127.0.0.1
DOWN_TIDB_PORT=4000

stop_tidb_cluster

cd $OUT_DIR && echo "start tidb cluster in $OUT_DIR"

cat - >"$OUT_DIR/pd-config.toml" <<EOF
[replication]
# Set it to 1 to make sure we have enough replicas to run placement-rules.
max-replicas = 1
enable-placement-rules = true
EOF

echo "Starting Downstream PD..."
pd-server \
    --advertise-client-urls http://${DOWN_PD_HOST}:${DOWN_PD_PORT} \
    --client-urls http://0.0.0.0:${DOWN_PD_PORT} \
    --advertise-peer-urls http://${DOWN_PD_HOST}:${DOWN_PD_PEER_PORT} \
    --peer-urls http://0.0.0.0:${DOWN_PD_PEER_PORT} \
    --config "$OUT_DIR/pd-config.toml" \
    --log-file "$OUT_DIR/down_pd.log" \
    --data-dir "$OUT_DIR/down_pd" &


while ! curl -o /dev/null -sf http://${DOWN_PD_HOST}:${DOWN_PD_PORT}/pd/api/v1/version; do
    sleep 1
done


while [ -z "$(curl http://${DOWN_PD_HOST}:${DOWN_PD_PORT}/pd/health 2> /dev/null | grep 'health' | grep 'true')" ]; do
    sleep 1
done

# Tries to limit the max number of open files under the system limit
cat - >"$OUT_DIR/tikv-config.toml" <<EOF
[storage]
# Disable creating a large temp file.
reserve-space = "0MB"
[rocksdb]
max-open-files = 4096
[raftdb]
max-open-files = 4096
[raftstore]
# true (default value) for high reliability, this can prevent data loss when power failure.
sync-log = false
EOF

# tidb server config file
if [[ "$tidb_config" != "" ]]; then
    cat $tidb_config > $OUT_DIR/tidb-config.toml
else
    cat - >"$OUT_DIR/tidb-config.toml" <<EOF
split-table = true
EOF
fi


echo "Starting Downstream TiKV..."
tikv-server \
    --pd ${DOWN_PD_HOST}:${DOWN_PD_PORT} \
    -A ${DOWN_TIKV_HOST}:${DOWN_TIKV_PORT} \
    --status-addr ${DOWN_TIKV_HOST}:${DOWN_TIKV_STATUS_PORT} \
    --log-file "$OUT_DIR/tikv_down.log" \
    --log-level debug \
    -C "$OUT_DIR/tikv-config.toml" \
    -s "$OUT_DIR/tikv_down" &

sleep 2

echo "Starting Downstream TiDB..."
tidb-server \
    -P ${DOWN_TIDB_PORT} \
    -config "$OUT_DIR/tidb-config.toml" \
    --store tikv \
    --path ${DOWN_PD_HOST}:${DOWN_PD_PORT} \
    --status=${DOWN_TIDB_STATUS} \
    --log-file "$OUT_DIR/tidb_down.log" &


echo ${DOWN_TIDB_HOST}
echo ${DOWN_TIDB_PORT}
echo "Verifying Downstream TiDB is started..."
i=0
while ! mysql -uroot -h${DOWN_TIDB_HOST} -P${DOWN_TIDB_PORT}  -e 'select * from mysql.tidb;' --protocol=tcp; do
    i=$((i + 1))
    if [ "$i" -gt 60 ]; then
        echo 'Failed to start downstream TiDB'
        exit 1
    fi
    sleep 2
done

run_sql "update mysql.tidb set variable_value='60m' where variable_name='tikv_gc_life_time';" ${DOWN_TIDB_HOST} ${DOWN_TIDB_PORT}
run_sql "update mysql.tidb set variable_value='false' where variable_name='tikv_gc_enable';" ${DOWN_TIDB_HOST} ${DOWN_TIDB_PORT}

