#!/usr/bin/env bash
# tools to run a TiDB cluster
# parameter 1: work directory
set -eux
WORK_DIR="${1}_deploy_tidb"
CONF_DIR=$2

export PD_PEER_ADDR_TLS="127.0.0.1:23800"
export PD_ADDR_TLS="127.0.0.1:23790"

export TIDB_IP_TLS="127.0.0.1"
export TIDB_PORT_TLS="4000"
export TIDB_ADDR_TLS="127.0.0.1:4000"
export TIDB_STATUS_PORT_TLS="10080"
export TIDB_STATUS_ADDR_TLS="127.0.0.1:10080"

export TIKV_ADDR_TLS="127.0.0.1:20160"
export TIKV_STATUS_ADDR_TLS="127.0.0.1:20180"

start_pd() {
	echo "Starting PD..."

	cat >"$WORK_DIR/pd-tls.toml" <<EOF
[replication]
# The number of replicas for each region.
max-replicas = 1
[security]
cacert-path = "$CONF_DIR/ca.pem"
cert-path = "$CONF_DIR/dm.pem"
key-path = "$CONF_DIR/dm.key"
cert-verify-cn = ["TiDB", "dm", "localhost"]
EOF

	bin/pd-server --version
	mkdir -p "$WORK_DIR/pd-tls"
	bin/pd-server \
		--client-urls "https://$PD_ADDR_TLS" \
		--peer-urls "https://$PD_PEER_ADDR_TLS" \
		--log-file "$WORK_DIR/pd-tls.log" \
		--config "$WORK_DIR/pd-tls.toml" \
		--data-dir "$WORK_DIR/pd-tls" &
	sleep 5
	i=0
	while true; do
		response=$(curl -s -o /dev/null -w "%{http_code}" --cacert "$CONF_DIR/ca.pem" --cert "$CONF_DIR/dm.pem" \
			--key "$CONF_DIR/dm.key" "https://$PD_ADDR_TLS/pd/api/v1/version" || echo "")
		echo "curl response: $response"
		if [ "$response" -eq 200 ]; then
			echo 'Start PD success'
			break
		fi
		i=$((i + 1))
		if [ "$i" -gt 20 ]; then
			echo 'Failed to start PD'
			return 1
		fi
		echo 'Waiting for PD ready...'
		sleep 3
	done
	echo "curl PD port with wrong TLS config"
	if ! output=$(curl --cacert "$CONF_DIR/ca2.pem" --cert "$CONF_DIR/tidb.pem" \
		--key "$CONF_DIR/tidb.key" "https://$PD_ADDR_TLS/pd/api/v1/version" 2>&1); then
		echo "$output"
	fi
}

start_tikv() {
	echo "Starting TiKV..."

	cat >"$WORK_DIR/tikv-tls.toml" <<EOF
[security]
ca-path = "$CONF_DIR/ca.pem"
cert-path = "$CONF_DIR/dm.pem"
key-path = "$CONF_DIR/dm.key"
cert-verify-cn = ["TiDB", "dm", "localhost"]
EOF
	mkdir -p "$WORK_DIR/tikv-tls"
	bin/tikv-server --version
	bin/tikv-server \
		--pd "$PD_ADDR_TLS" \
		-A "$TIKV_ADDR_TLS" \
		--status-addr "$TIKV_STATUS_ADDR_TLS" \
		--log-file "$WORK_DIR/tikv-tls.log" \
		--log-level info \
		--config $WORK_DIR/tikv-tls.toml \
		-s "$WORK_DIR/tikv-tls" &
	sleep 5
	i=0
	while true; do
		response=$(curl -s "https://$PD_ADDR_TLS/pd/api/v1/cluster/status" --cacert "$CONF_DIR/ca.pem" --cert "$CONF_DIR/dm.pem" \
			--key "$CONF_DIR/dm.key" || echo "")

		if [ -z "$response" ]; then
			echo "Failed to connect to PD server"
		else
			echo "PD response: $response"
			if echo "$response" | grep -q '"is_initialized": true'; then
				echo "TiKV cluster initialized successfully"
				break
			fi
		fi

		i=$((i + 1))
		if [ "$i" -gt 20 ]; then
			echo 'Failed to initialize TiKV cluster after 20 attempts'
			return 1
		fi

		echo 'Waiting for TiKV ready...'
		sleep 5
	done
}

start_tidb() {
	echo "Starting TiDB with TLS..."
	cat - >"$WORK_DIR/tidb-tls-config.toml" <<EOF
socket = "/tmp/tidb-tls.sock"
[status]
status-port = $TIDB_STATUS_PORT_TLS
[security]
ssl-ca = "$CONF_DIR/ca2.pem"
ssl-cert = "$CONF_DIR/tidb.pem"
ssl-key = "$CONF_DIR/tidb.key"
cluster-ssl-ca = "$CONF_DIR/ca.pem"
cluster-ssl-cert = "$CONF_DIR/dm.pem"
cluster-ssl-key = "$CONF_DIR/dm.key"
cluster-verify-cn = ["TiDB", "dm" , "localhost"]
EOF
	mkdir -p "$WORK_DIR/tidb-tls"
	bin/tidb-server \
		-P $TIDB_PORT_TLS \
		--store tikv \
		--path "$PD_ADDR_TLS" \
		--config $WORK_DIR/tidb-tls-config.toml \
		--log-file "$WORK_DIR/tidb-tls.log" >/dev/null 2>&1 &
	sleep 5
	i=0
	while true; do
		response=$(curl -s -o /dev/null -w "%{http_code}" --cacert "$CONF_DIR/ca.pem" \
			--cert "$CONF_DIR/dm.pem" --key "$CONF_DIR/dm.key" "https://$TIDB_STATUS_ADDR_TLS/status" || echo "")
		echo "curl response: $response"
		if [ "$response" -eq 200 ]; then
			echo 'Start TiDB success'
			break
		fi
		i=$((i + 1))
		if [ "$i" -gt 50 ]; then
			echo 'Failed to start TiDB'
			return 1
		fi
		echo 'Waiting for TiDB ready...'
		sleep 3
	done
}
rm -rf $WORK_DIR
mkdir $WORK_DIR
start_pd
start_tikv
start_tidb

echo "Show databases without TLS"
mysql -uroot -h$TIDB_IP_TLS -P$TIDB_PORT_TLS --default-character-set utf8 -E -e "SHOW DATABASES;"
echo "Show database with TLS"
mysql -uroot -h$TIDB_IP_TLS -P$TIDB_PORT_TLS --default-character-set utf8 --ssl-ca $CONF_DIR/ca2.pem \
	--ssl-cert $CONF_DIR/tidb.pem --ssl-key $CONF_DIR/tidb.key --ssl-mode=VERIFY_CA -E -e "SHOW DATABASES;"
echo "Show databases with invalid TLS"
if ! output=$(mysql -uroot -h"$TIDB_IP_TLS" -P"$TIDB_PORT_TLS" --default-character-set=utf8 \
	--ssl-ca "$CONF_DIR/ca.pem" --ssl-cert "$CONF_DIR/dm.pem" --ssl-key "$CONF_DIR/dm.key" \
	--ssl-mode=VERIFY_CA -E -e "SHOW DATABASES;" 2>&1); then
	echo "$output"
fi
