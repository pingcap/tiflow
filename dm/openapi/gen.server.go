// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get cluster info such as cluster id
	// (GET /api/v1/cluster/info)
	DMAPIGetClusterInfo(c *gin.Context)
	// get cluster master node list
	// (GET /api/v1/cluster/masters)
	DMAPIGetClusterMasterList(c *gin.Context)
	// offline master node
	// (DELETE /api/v1/cluster/masters/{master-name})
	DMAPIOfflineMasterNode(c *gin.Context, masterName string)
	// get cluster worker node list
	// (GET /api/v1/cluster/workers)
	DMAPIGetClusterWorkerList(c *gin.Context)
	// offline worker node
	// (DELETE /api/v1/cluster/workers/{worker-name})
	DMAPIOfflineWorkerNode(c *gin.Context, workerName string)
	// get doc json
	// (GET /api/v1/dm.json)
	GetDocJSON(c *gin.Context)
	// get doc html
	// (GET /api/v1/docs)
	GetDocHTML(c *gin.Context)
	// get data source list
	// (GET /api/v1/sources)
	DMAPIGetSourceList(c *gin.Context, params DMAPIGetSourceListParams)
	// create and enable a new data source
	// (POST /api/v1/sources)
	DMAPICreateSource(c *gin.Context)
	// delete a data source
	// (DELETE /api/v1/sources/{source-name})
	DMAPIDeleteSource(c *gin.Context, sourceName string, params DMAPIDeleteSourceParams)
	// get source
	// (GET /api/v1/sources/{source-name})
	DMAPIGetSource(c *gin.Context, sourceName string, params DMAPIGetSourceParams)
	// update a data source
	// (PUT /api/v1/sources/{source-name})
	DMAPIUpdateSource(c *gin.Context, sourceName string)
	// disable a data source
	// (POST /api/v1/sources/{source-name}/disable)
	DMAPIDisableSource(c *gin.Context, sourceName string)
	// enable a data source
	// (POST /api/v1/sources/{source-name}/enable)
	DMAPIEnableSource(c *gin.Context, sourceName string)
	// disable relay log function for the data source
	// (POST /api/v1/sources/{source-name}/relay/disable)
	DMAPIDisableRelay(c *gin.Context, sourceName string)
	// enable relay log function for the data source
	// (POST /api/v1/sources/{source-name}/relay/enable)
	DMAPIEnableRelay(c *gin.Context, sourceName string)
	// purge relay log
	// (POST /api/v1/sources/{source-name}/relay/purge)
	DMAPIPurgeRelay(c *gin.Context, sourceName string)
	// get source schema list
	// (GET /api/v1/sources/{source-name}/schemas)
	DMAPIGetSourceSchemaList(c *gin.Context, sourceName string)
	// get source table list
	// (GET /api/v1/sources/{source-name}/schemas/{schema-name})
	DMAPIGetSourceTableList(c *gin.Context, sourceName string, schemaName string)
	// get the current status of the data source
	// (GET /api/v1/sources/{source-name}/status)
	DMAPIGetSourceStatus(c *gin.Context, sourceName string)
	// transfer source to a free worker
	// (POST /api/v1/sources/{source-name}/transfer)
	DMAPITransferSource(c *gin.Context, sourceName string)
	// get task list
	// (GET /api/v1/tasks)
	DMAPIGetTaskList(c *gin.Context, params DMAPIGetTaskListParams)
	// create a task
	// (POST /api/v1/tasks)
	DMAPICreateTask(c *gin.Context)
	// Turn task into the format of a configuration file or vice versa.
	// (POST /api/v1/tasks/converters)
	DMAPIConvertTask(c *gin.Context)
	// get task template list
	// (GET /api/v1/tasks/templates)
	DMAPIGetTaskTemplateList(c *gin.Context)
	// create task template
	// (POST /api/v1/tasks/templates)
	DMAPICreateTaskTemplate(c *gin.Context)
	// import task template
	// (POST /api/v1/tasks/templates/import)
	DMAPIImportTaskTemplate(c *gin.Context)
	// delete task template template
	// (DELETE /api/v1/tasks/templates/{task-name})
	DMAPIDeleteTaskTemplate(c *gin.Context, taskName string)
	// get task template template
	// (GET /api/v1/tasks/templates/{task-name})
	DMAPIGetTaskTemplate(c *gin.Context, taskName string)
	// update task template template
	// (PUT /api/v1/tasks/templates/{task-name})
	DMAPUpdateTaskTemplate(c *gin.Context, taskName string)
	// delete a task
	// (DELETE /api/v1/tasks/{task-name})
	DMAPIDeleteTask(c *gin.Context, taskName string, params DMAPIDeleteTaskParams)
	// get a task
	// (GET /api/v1/tasks/{task-name})
	DMAPIGetTask(c *gin.Context, taskName string, params DMAPIGetTaskParams)
	// update a task
	// (PUT /api/v1/tasks/{task-name})
	DMAPIUpdateTask(c *gin.Context, taskName string)
	// get task source table and target table route relation
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/migrate_targets)
	DMAPIGetTaskMigrateTargets(c *gin.Context, taskName string, sourceName string, params DMAPIGetTaskMigrateTargetsParams)
	// get task source schema list
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/schemas)
	DMAPIGetSchemaListByTaskAndSource(c *gin.Context, taskName string, sourceName string)
	// get task source table list
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name})
	DMAPIGetTableListByTaskAndSource(c *gin.Context, taskName string, sourceName string, schemaName string)
	// delete task source table structure
	// (DELETE /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name}/{table-name})
	DMAPIDeleteTableStructure(c *gin.Context, taskName string, sourceName string, schemaName string, tableName string)
	// get task source table structure
	// (GET /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name}/{table-name})
	DMAPIGetTableStructure(c *gin.Context, taskName string, sourceName string, schemaName string, tableName string)
	// operate task source table structure
	// (PUT /api/v1/tasks/{task-name}/sources/{source-name}/schemas/{schema-name}/{table-name})
	DMAPIOperateTableStructure(c *gin.Context, taskName string, sourceName string, schemaName string, tableName string)
	// start a task
	// (POST /api/v1/tasks/{task-name}/start)
	DMAPIStartTask(c *gin.Context, taskName string)
	// get task status
	// (GET /api/v1/tasks/{task-name}/status)
	DMAPIGetTaskStatus(c *gin.Context, taskName string, params DMAPIGetTaskStatusParams)
	// stop a task
	// (POST /api/v1/tasks/{task-name}/stop)
	DMAPIStopTask(c *gin.Context, taskName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// DMAPIGetClusterInfo operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetClusterInfo(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetClusterInfo(c)
}

// DMAPIGetClusterMasterList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetClusterMasterList(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetClusterMasterList(c)
}

// DMAPIOfflineMasterNode operation middleware
func (siw *ServerInterfaceWrapper) DMAPIOfflineMasterNode(c *gin.Context) {
	var err error

	// ------------- Path parameter "master-name" -------------
	var masterName string

	err = runtime.BindStyledParameter("simple", false, "master-name", c.Param("master-name"), &masterName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter master-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIOfflineMasterNode(c, masterName)
}

// DMAPIGetClusterWorkerList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetClusterWorkerList(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetClusterWorkerList(c)
}

// DMAPIOfflineWorkerNode operation middleware
func (siw *ServerInterfaceWrapper) DMAPIOfflineWorkerNode(c *gin.Context) {
	var err error

	// ------------- Path parameter "worker-name" -------------
	var workerName string

	err = runtime.BindStyledParameter("simple", false, "worker-name", c.Param("worker-name"), &workerName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter worker-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIOfflineWorkerNode(c, workerName)
}

// GetDocJSON operation middleware
func (siw *ServerInterfaceWrapper) GetDocJSON(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDocJSON(c)
}

// GetDocHTML operation middleware
func (siw *ServerInterfaceWrapper) GetDocHTML(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetDocHTML(c)
}

// DMAPIGetSourceList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceList(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetSourceListParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	// ------------- Optional query parameter "enable_relay" -------------
	if paramValue := c.Query("enable_relay"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "enable_relay", c.Request.URL.Query(), &params.EnableRelay)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter enable_relay: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceList(c, params)
}

// DMAPICreateSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPICreateSource(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPICreateSource(c)
}

// DMAPIDeleteSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIDeleteSourceParams

	// ------------- Optional query parameter "force" -------------
	if paramValue := c.Query("force"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "force", c.Request.URL.Query(), &params.Force)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter force: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteSource(c, sourceName, params)
}

// DMAPIGetSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetSourceParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSource(c, sourceName, params)
}

// DMAPIUpdateSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIUpdateSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIUpdateSource(c, sourceName)
}

// DMAPIDisableSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDisableSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDisableSource(c, sourceName)
}

// DMAPIEnableSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIEnableSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIEnableSource(c, sourceName)
}

// DMAPIDisableRelay operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDisableRelay(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDisableRelay(c, sourceName)
}

// DMAPIEnableRelay operation middleware
func (siw *ServerInterfaceWrapper) DMAPIEnableRelay(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIEnableRelay(c, sourceName)
}

// DMAPIPurgeRelay operation middleware
func (siw *ServerInterfaceWrapper) DMAPIPurgeRelay(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIPurgeRelay(c, sourceName)
}

// DMAPIGetSourceSchemaList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceSchemaList(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceSchemaList(c, sourceName)
}

// DMAPIGetSourceTableList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceTableList(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceTableList(c, sourceName, schemaName)
}

// DMAPIGetSourceStatus operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSourceStatus(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSourceStatus(c, sourceName)
}

// DMAPITransferSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPITransferSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPITransferSource(c, sourceName)
}

// DMAPIGetTaskList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskList(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskListParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	// ------------- Optional query parameter "stage" -------------
	if paramValue := c.Query("stage"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "stage", c.Request.URL.Query(), &params.Stage)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter stage: %s", err)})
		return
	}

	// ------------- Optional query parameter "source_name_list" -------------
	if paramValue := c.Query("source_name_list"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "source_name_list", c.Request.URL.Query(), &params.SourceNameList)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source_name_list: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskList(c, params)
}

// DMAPICreateTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPICreateTask(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPICreateTask(c)
}

// DMAPIConvertTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIConvertTask(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIConvertTask(c)
}

// DMAPIGetTaskTemplateList operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskTemplateList(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskTemplateList(c)
}

// DMAPICreateTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPICreateTaskTemplate(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPICreateTaskTemplate(c)
}

// DMAPIImportTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPIImportTaskTemplate(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIImportTaskTemplate(c)
}

// DMAPIDeleteTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteTaskTemplate(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteTaskTemplate(c, taskName)
}

// DMAPIGetTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskTemplate(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskTemplate(c, taskName)
}

// DMAPUpdateTaskTemplate operation middleware
func (siw *ServerInterfaceWrapper) DMAPUpdateTaskTemplate(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPUpdateTaskTemplate(c, taskName)
}

// DMAPIDeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIDeleteTaskParams

	// ------------- Optional query parameter "force" -------------
	if paramValue := c.Query("force"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "force", c.Request.URL.Query(), &params.Force)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter force: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteTask(c, taskName, params)
}

// DMAPIGetTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskParams

	// ------------- Optional query parameter "with_status" -------------
	if paramValue := c.Query("with_status"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "with_status", c.Request.URL.Query(), &params.WithStatus)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter with_status: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTask(c, taskName, params)
}

// DMAPIUpdateTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIUpdateTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIUpdateTask(c, taskName)
}

// DMAPIGetTaskMigrateTargets operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskMigrateTargets(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskMigrateTargetsParams

	// ------------- Optional query parameter "schema_pattern" -------------
	if paramValue := c.Query("schema_pattern"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "schema_pattern", c.Request.URL.Query(), &params.SchemaPattern)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema_pattern: %s", err)})
		return
	}

	// ------------- Optional query parameter "table_pattern" -------------
	if paramValue := c.Query("table_pattern"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "table_pattern", c.Request.URL.Query(), &params.TablePattern)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table_pattern: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskMigrateTargets(c, taskName, sourceName, params)
}

// DMAPIGetSchemaListByTaskAndSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSchemaListByTaskAndSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSchemaListByTaskAndSource(c, taskName, sourceName)
}

// DMAPIGetTableListByTaskAndSource operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTableListByTaskAndSource(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTableListByTaskAndSource(c, taskName, sourceName, schemaName)
}

// DMAPIDeleteTableStructure operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteTableStructure(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	// ------------- Path parameter "table-name" -------------
	var tableName string

	err = runtime.BindStyledParameter("simple", false, "table-name", c.Param("table-name"), &tableName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteTableStructure(c, taskName, sourceName, schemaName, tableName)
}

// DMAPIGetTableStructure operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTableStructure(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	// ------------- Path parameter "table-name" -------------
	var tableName string

	err = runtime.BindStyledParameter("simple", false, "table-name", c.Param("table-name"), &tableName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTableStructure(c, taskName, sourceName, schemaName, tableName)
}

// DMAPIOperateTableStructure operation middleware
func (siw *ServerInterfaceWrapper) DMAPIOperateTableStructure(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// ------------- Path parameter "source-name" -------------
	var sourceName string

	err = runtime.BindStyledParameter("simple", false, "source-name", c.Param("source-name"), &sourceName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source-name: %s", err)})
		return
	}

	// ------------- Path parameter "schema-name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema-name", c.Param("schema-name"), &schemaName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter schema-name: %s", err)})
		return
	}

	// ------------- Path parameter "table-name" -------------
	var tableName string

	err = runtime.BindStyledParameter("simple", false, "table-name", c.Param("table-name"), &tableName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIOperateTableStructure(c, taskName, sourceName, schemaName, tableName)
}

// DMAPIStartTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIStartTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIStartTask(c, taskName)
}

// DMAPIGetTaskStatus operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetTaskStatus(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetTaskStatusParams

	// ------------- Optional query parameter "source_name_list" -------------
	if paramValue := c.Query("source_name_list"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "source_name_list", c.Request.URL.Query(), &params.SourceNameList)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter source_name_list: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetTaskStatus(c, taskName, params)
}

// DMAPIStopTask operation middleware
func (siw *ServerInterfaceWrapper) DMAPIStopTask(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIStopTask(c, taskName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/v1/cluster/info", wrapper.DMAPIGetClusterInfo)

	router.GET(options.BaseURL+"/api/v1/cluster/masters", wrapper.DMAPIGetClusterMasterList)

	router.DELETE(options.BaseURL+"/api/v1/cluster/masters/:master-name", wrapper.DMAPIOfflineMasterNode)

	router.GET(options.BaseURL+"/api/v1/cluster/workers", wrapper.DMAPIGetClusterWorkerList)

	router.DELETE(options.BaseURL+"/api/v1/cluster/workers/:worker-name", wrapper.DMAPIOfflineWorkerNode)

	router.GET(options.BaseURL+"/api/v1/dm.json", wrapper.GetDocJSON)

	router.GET(options.BaseURL+"/api/v1/docs", wrapper.GetDocHTML)

	router.GET(options.BaseURL+"/api/v1/sources", wrapper.DMAPIGetSourceList)

	router.POST(options.BaseURL+"/api/v1/sources", wrapper.DMAPICreateSource)

	router.DELETE(options.BaseURL+"/api/v1/sources/:source-name", wrapper.DMAPIDeleteSource)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name", wrapper.DMAPIGetSource)

	router.PUT(options.BaseURL+"/api/v1/sources/:source-name", wrapper.DMAPIUpdateSource)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/disable", wrapper.DMAPIDisableSource)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/enable", wrapper.DMAPIEnableSource)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/relay/disable", wrapper.DMAPIDisableRelay)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/relay/enable", wrapper.DMAPIEnableRelay)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/relay/purge", wrapper.DMAPIPurgeRelay)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name/schemas", wrapper.DMAPIGetSourceSchemaList)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name/schemas/:schema-name", wrapper.DMAPIGetSourceTableList)

	router.GET(options.BaseURL+"/api/v1/sources/:source-name/status", wrapper.DMAPIGetSourceStatus)

	router.POST(options.BaseURL+"/api/v1/sources/:source-name/transfer", wrapper.DMAPITransferSource)

	router.GET(options.BaseURL+"/api/v1/tasks", wrapper.DMAPIGetTaskList)

	router.POST(options.BaseURL+"/api/v1/tasks", wrapper.DMAPICreateTask)

	router.POST(options.BaseURL+"/api/v1/tasks/converters", wrapper.DMAPIConvertTask)

	router.GET(options.BaseURL+"/api/v1/tasks/templates", wrapper.DMAPIGetTaskTemplateList)

	router.POST(options.BaseURL+"/api/v1/tasks/templates", wrapper.DMAPICreateTaskTemplate)

	router.POST(options.BaseURL+"/api/v1/tasks/templates/import", wrapper.DMAPIImportTaskTemplate)

	router.DELETE(options.BaseURL+"/api/v1/tasks/templates/:task-name", wrapper.DMAPIDeleteTaskTemplate)

	router.GET(options.BaseURL+"/api/v1/tasks/templates/:task-name", wrapper.DMAPIGetTaskTemplate)

	router.PUT(options.BaseURL+"/api/v1/tasks/templates/:task-name", wrapper.DMAPUpdateTaskTemplate)

	router.DELETE(options.BaseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIDeleteTask)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIGetTask)

	router.PUT(options.BaseURL+"/api/v1/tasks/:task-name", wrapper.DMAPIUpdateTask)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/migrate_targets", wrapper.DMAPIGetTaskMigrateTargets)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas", wrapper.DMAPIGetSchemaListByTaskAndSource)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name", wrapper.DMAPIGetTableListByTaskAndSource)

	router.DELETE(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name/:table-name", wrapper.DMAPIDeleteTableStructure)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name/:table-name", wrapper.DMAPIGetTableStructure)

	router.PUT(options.BaseURL+"/api/v1/tasks/:task-name/sources/:source-name/schemas/:schema-name/:table-name", wrapper.DMAPIOperateTableStructure)

	router.POST(options.BaseURL+"/api/v1/tasks/:task-name/start", wrapper.DMAPIStartTask)

	router.GET(options.BaseURL+"/api/v1/tasks/:task-name/status", wrapper.DMAPIGetTaskStatus)

	router.POST(options.BaseURL+"/api/v1/tasks/:task-name/stop", wrapper.DMAPIStopTask)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
