// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DMAPIGetClusterMasterList request
	DMAPIGetClusterMasterList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIOfflineMasterNode request
	DMAPIOfflineMasterNode(ctx context.Context, masterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetClusterWorkerList request
	DMAPIGetClusterWorkerList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIOfflineWorkerNode request
	DMAPIOfflineWorkerNode(ctx context.Context, workerName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocJSON request
	GetDocJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocHTML request
	GetDocHTML(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetSourceList request
	DMAPIGetSourceList(ctx context.Context, params *DMAPIGetSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPICreateSource request with any body
	DMAPICreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPICreateSource(ctx context.Context, body DMAPICreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIDeleteSource request
	DMAPIDeleteSource(ctx context.Context, sourceName string, params *DMAPIDeleteSourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIPauseRelay request
	DMAPIPauseRelay(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIResumeRelay request
	DMAPIResumeRelay(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetSourceSchemaList request
	DMAPIGetSourceSchemaList(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetSourceTableList request
	DMAPIGetSourceTableList(ctx context.Context, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIStartRelay request with any body
	DMAPIStartRelayWithBody(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPIStartRelay(ctx context.Context, sourceName string, body DMAPIStartRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetSourceStatus request
	DMAPIGetSourceStatus(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIStopRelay request with any body
	DMAPIStopRelayWithBody(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPIStopRelay(ctx context.Context, sourceName string, body DMAPIStopRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPITransferSource request with any body
	DMAPITransferSourceWithBody(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPITransferSource(ctx context.Context, sourceName string, body DMAPITransferSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetTaskConfigList request
	DMAPIGetTaskConfigList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPICreateTaskConfig request with any body
	DMAPICreateTaskConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPICreateTaskConfig(ctx context.Context, body DMAPICreateTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIImportTaskConfig request with any body
	DMAPIImportTaskConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPIImportTaskConfig(ctx context.Context, body DMAPIImportTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIDeleteTaskConfig request
	DMAPIDeleteTaskConfig(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetTaskConfig request
	DMAPIGetTaskConfig(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPUpdateTaskConfig request
	DMAPUpdateTaskConfig(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetTaskList request
	DMAPIGetTaskList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIStartTask request with any body
	DMAPIStartTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPIStartTask(ctx context.Context, body DMAPIStartTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIDeleteTask request
	DMAPIDeleteTask(ctx context.Context, taskName string, params *DMAPIDeleteTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIPauseTask request with any body
	DMAPIPauseTaskWithBody(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPIPauseTask(ctx context.Context, taskName string, body DMAPIPauseTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIResumeTask request with any body
	DMAPIResumeTaskWithBody(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPIResumeTask(ctx context.Context, taskName string, body DMAPIResumeTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetSchemaListByTaskAndSource request
	DMAPIGetSchemaListByTaskAndSource(ctx context.Context, taskName string, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetTableListByTaskAndSource request
	DMAPIGetTableListByTaskAndSource(ctx context.Context, taskName string, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIDeleteTableStructure request
	DMAPIDeleteTableStructure(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetTableStructure request
	DMAPIGetTableStructure(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIOperateTableStructure request with any body
	DMAPIOperateTableStructureWithBody(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DMAPIOperateTableStructure(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, body DMAPIOperateTableStructureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DMAPIGetTaskStatus request
	DMAPIGetTaskStatus(ctx context.Context, taskName string, params *DMAPIGetTaskStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DMAPIGetClusterMasterList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetClusterMasterListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIOfflineMasterNode(ctx context.Context, masterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIOfflineMasterNodeRequest(c.Server, masterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetClusterWorkerList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetClusterWorkerListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIOfflineWorkerNode(ctx context.Context, workerName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIOfflineWorkerNodeRequest(c.Server, workerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocJSON(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocJSONRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocHTML(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocHTMLRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetSourceList(ctx context.Context, params *DMAPIGetSourceListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetSourceListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPICreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPICreateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPICreateSource(ctx context.Context, body DMAPICreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPICreateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIDeleteSource(ctx context.Context, sourceName string, params *DMAPIDeleteSourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIDeleteSourceRequest(c.Server, sourceName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIPauseRelay(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIPauseRelayRequest(c.Server, sourceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIResumeRelay(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIResumeRelayRequest(c.Server, sourceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetSourceSchemaList(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetSourceSchemaListRequest(c.Server, sourceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetSourceTableList(ctx context.Context, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetSourceTableListRequest(c.Server, sourceName, schemaName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIStartRelayWithBody(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIStartRelayRequestWithBody(c.Server, sourceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIStartRelay(ctx context.Context, sourceName string, body DMAPIStartRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIStartRelayRequest(c.Server, sourceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetSourceStatus(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetSourceStatusRequest(c.Server, sourceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIStopRelayWithBody(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIStopRelayRequestWithBody(c.Server, sourceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIStopRelay(ctx context.Context, sourceName string, body DMAPIStopRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIStopRelayRequest(c.Server, sourceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPITransferSourceWithBody(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPITransferSourceRequestWithBody(c.Server, sourceName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPITransferSource(ctx context.Context, sourceName string, body DMAPITransferSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPITransferSourceRequest(c.Server, sourceName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetTaskConfigList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetTaskConfigListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPICreateTaskConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPICreateTaskConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPICreateTaskConfig(ctx context.Context, body DMAPICreateTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPICreateTaskConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIImportTaskConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIImportTaskConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIImportTaskConfig(ctx context.Context, body DMAPIImportTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIImportTaskConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIDeleteTaskConfig(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIDeleteTaskConfigRequest(c.Server, taskName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetTaskConfig(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetTaskConfigRequest(c.Server, taskName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPUpdateTaskConfig(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPUpdateTaskConfigRequest(c.Server, taskName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetTaskList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetTaskListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIStartTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIStartTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIStartTask(ctx context.Context, body DMAPIStartTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIStartTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIDeleteTask(ctx context.Context, taskName string, params *DMAPIDeleteTaskParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIDeleteTaskRequest(c.Server, taskName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIPauseTaskWithBody(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIPauseTaskRequestWithBody(c.Server, taskName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIPauseTask(ctx context.Context, taskName string, body DMAPIPauseTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIPauseTaskRequest(c.Server, taskName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIResumeTaskWithBody(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIResumeTaskRequestWithBody(c.Server, taskName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIResumeTask(ctx context.Context, taskName string, body DMAPIResumeTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIResumeTaskRequest(c.Server, taskName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetSchemaListByTaskAndSource(ctx context.Context, taskName string, sourceName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetSchemaListByTaskAndSourceRequest(c.Server, taskName, sourceName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetTableListByTaskAndSource(ctx context.Context, taskName string, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetTableListByTaskAndSourceRequest(c.Server, taskName, sourceName, schemaName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIDeleteTableStructure(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIDeleteTableStructureRequest(c.Server, taskName, sourceName, schemaName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetTableStructure(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetTableStructureRequest(c.Server, taskName, sourceName, schemaName, tableName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIOperateTableStructureWithBody(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIOperateTableStructureRequestWithBody(c.Server, taskName, sourceName, schemaName, tableName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIOperateTableStructure(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, body DMAPIOperateTableStructureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIOperateTableStructureRequest(c.Server, taskName, sourceName, schemaName, tableName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DMAPIGetTaskStatus(ctx context.Context, taskName string, params *DMAPIGetTaskStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDMAPIGetTaskStatusRequest(c.Server, taskName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDMAPIGetClusterMasterListRequest generates requests for DMAPIGetClusterMasterList
func NewDMAPIGetClusterMasterListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cluster/masters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIOfflineMasterNodeRequest generates requests for DMAPIOfflineMasterNode
func NewDMAPIOfflineMasterNodeRequest(server string, masterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "master-name", runtime.ParamLocationPath, masterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cluster/masters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetClusterWorkerListRequest generates requests for DMAPIGetClusterWorkerList
func NewDMAPIGetClusterWorkerListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cluster/workers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIOfflineWorkerNodeRequest generates requests for DMAPIOfflineWorkerNode
func NewDMAPIOfflineWorkerNodeRequest(server string, workerName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "worker-name", runtime.ParamLocationPath, workerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cluster/workers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDocJSONRequest generates requests for GetDocJSON
func NewGetDocJSONRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dm.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDocHTMLRequest generates requests for GetDocHTML
func NewGetDocHTMLRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetSourceListRequest generates requests for DMAPIGetSourceList
func NewDMAPIGetSourceListRequest(server string, params *DMAPIGetSourceListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WithStatus != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_status", runtime.ParamLocationQuery, *params.WithStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPICreateSourceRequest calls the generic DMAPICreateSource builder with application/json body
func NewDMAPICreateSourceRequest(server string, body DMAPICreateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPICreateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewDMAPICreateSourceRequestWithBody generates requests for DMAPICreateSource with any type of body
func NewDMAPICreateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIDeleteSourceRequest generates requests for DMAPIDeleteSource
func NewDMAPIDeleteSourceRequest(server string, sourceName string, params *DMAPIDeleteSourceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Force != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIPauseRelayRequest generates requests for DMAPIPauseRelay
func NewDMAPIPauseRelayRequest(server string, sourceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/pause-relay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIResumeRelayRequest generates requests for DMAPIResumeRelay
func NewDMAPIResumeRelayRequest(server string, sourceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/resume-relay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetSourceSchemaListRequest generates requests for DMAPIGetSourceSchemaList
func NewDMAPIGetSourceSchemaListRequest(server string, sourceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/schemas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetSourceTableListRequest generates requests for DMAPIGetSourceTableList
func NewDMAPIGetSourceTableListRequest(server string, sourceName string, schemaName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "schema-name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/schemas/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIStartRelayRequest calls the generic DMAPIStartRelay builder with application/json body
func NewDMAPIStartRelayRequest(server string, sourceName string, body DMAPIStartRelayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPIStartRelayRequestWithBody(server, sourceName, "application/json", bodyReader)
}

// NewDMAPIStartRelayRequestWithBody generates requests for DMAPIStartRelay with any type of body
func NewDMAPIStartRelayRequestWithBody(server string, sourceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/start-relay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIGetSourceStatusRequest generates requests for DMAPIGetSourceStatus
func NewDMAPIGetSourceStatusRequest(server string, sourceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIStopRelayRequest calls the generic DMAPIStopRelay builder with application/json body
func NewDMAPIStopRelayRequest(server string, sourceName string, body DMAPIStopRelayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPIStopRelayRequestWithBody(server, sourceName, "application/json", bodyReader)
}

// NewDMAPIStopRelayRequestWithBody generates requests for DMAPIStopRelay with any type of body
func NewDMAPIStopRelayRequestWithBody(server string, sourceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/stop-relay", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPITransferSourceRequest calls the generic DMAPITransferSource builder with application/json body
func NewDMAPITransferSourceRequest(server string, sourceName string, body DMAPITransferSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPITransferSourceRequestWithBody(server, sourceName, "application/json", bodyReader)
}

// NewDMAPITransferSourceRequestWithBody generates requests for DMAPITransferSource with any type of body
func NewDMAPITransferSourceRequestWithBody(server string, sourceName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sources/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIGetTaskConfigListRequest generates requests for DMAPIGetTaskConfigList
func NewDMAPIGetTaskConfigListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/task/configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPICreateTaskConfigRequest calls the generic DMAPICreateTaskConfig builder with application/json body
func NewDMAPICreateTaskConfigRequest(server string, body DMAPICreateTaskConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPICreateTaskConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewDMAPICreateTaskConfigRequestWithBody generates requests for DMAPICreateTaskConfig with any type of body
func NewDMAPICreateTaskConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/task/configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIImportTaskConfigRequest calls the generic DMAPIImportTaskConfig builder with application/json body
func NewDMAPIImportTaskConfigRequest(server string, body DMAPIImportTaskConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPIImportTaskConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewDMAPIImportTaskConfigRequestWithBody generates requests for DMAPIImportTaskConfig with any type of body
func NewDMAPIImportTaskConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/task/configs/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIDeleteTaskConfigRequest generates requests for DMAPIDeleteTaskConfig
func NewDMAPIDeleteTaskConfigRequest(server string, taskName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/task/configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetTaskConfigRequest generates requests for DMAPIGetTaskConfig
func NewDMAPIGetTaskConfigRequest(server string, taskName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/task/configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPUpdateTaskConfigRequest generates requests for DMAPUpdateTaskConfig
func NewDMAPUpdateTaskConfigRequest(server string, taskName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/task/configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetTaskListRequest generates requests for DMAPIGetTaskList
func NewDMAPIGetTaskListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIStartTaskRequest calls the generic DMAPIStartTask builder with application/json body
func NewDMAPIStartTaskRequest(server string, body DMAPIStartTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPIStartTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewDMAPIStartTaskRequestWithBody generates requests for DMAPIStartTask with any type of body
func NewDMAPIStartTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIDeleteTaskRequest generates requests for DMAPIDeleteTask
func NewDMAPIDeleteTaskRequest(server string, taskName string, params *DMAPIDeleteTaskParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SourceNameList != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name_list", runtime.ParamLocationQuery, *params.SourceNameList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIPauseTaskRequest calls the generic DMAPIPauseTask builder with application/json body
func NewDMAPIPauseTaskRequest(server string, taskName string, body DMAPIPauseTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPIPauseTaskRequestWithBody(server, taskName, "application/json", bodyReader)
}

// NewDMAPIPauseTaskRequestWithBody generates requests for DMAPIPauseTask with any type of body
func NewDMAPIPauseTaskRequestWithBody(server string, taskName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIResumeTaskRequest calls the generic DMAPIResumeTask builder with application/json body
func NewDMAPIResumeTaskRequest(server string, taskName string, body DMAPIResumeTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPIResumeTaskRequestWithBody(server, taskName, "application/json", bodyReader)
}

// NewDMAPIResumeTaskRequestWithBody generates requests for DMAPIResumeTask with any type of body
func NewDMAPIResumeTaskRequestWithBody(server string, taskName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIGetSchemaListByTaskAndSourceRequest generates requests for DMAPIGetSchemaListByTaskAndSource
func NewDMAPIGetSchemaListByTaskAndSourceRequest(server string, taskName string, sourceName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/sources/%s/schemas", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetTableListByTaskAndSourceRequest generates requests for DMAPIGetTableListByTaskAndSource
func NewDMAPIGetTableListByTaskAndSourceRequest(server string, taskName string, sourceName string, schemaName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schema-name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/sources/%s/schemas/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIDeleteTableStructureRequest generates requests for DMAPIDeleteTableStructure
func NewDMAPIDeleteTableStructureRequest(server string, taskName string, sourceName string, schemaName string, tableName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schema-name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "table-name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/sources/%s/schemas/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIGetTableStructureRequest generates requests for DMAPIGetTableStructure
func NewDMAPIGetTableStructureRequest(server string, taskName string, sourceName string, schemaName string, tableName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schema-name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "table-name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/sources/%s/schemas/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDMAPIOperateTableStructureRequest calls the generic DMAPIOperateTableStructure builder with application/json body
func NewDMAPIOperateTableStructureRequest(server string, taskName string, sourceName string, schemaName string, tableName string, body DMAPIOperateTableStructureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDMAPIOperateTableStructureRequestWithBody(server, taskName, sourceName, schemaName, tableName, "application/json", bodyReader)
}

// NewDMAPIOperateTableStructureRequestWithBody generates requests for DMAPIOperateTableStructure with any type of body
func NewDMAPIOperateTableStructureRequestWithBody(server string, taskName string, sourceName string, schemaName string, tableName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "source-name", runtime.ParamLocationPath, sourceName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schema-name", runtime.ParamLocationPath, schemaName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "table-name", runtime.ParamLocationPath, tableName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/sources/%s/schemas/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDMAPIGetTaskStatusRequest generates requests for DMAPIGetTaskStatus
func NewDMAPIGetTaskStatusRequest(server string, taskName string, params *DMAPIGetTaskStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task-name", runtime.ParamLocationPath, taskName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.SourceNameList != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name_list", runtime.ParamLocationQuery, *params.SourceNameList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DMAPIGetClusterMasterList request
	DMAPIGetClusterMasterListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetClusterMasterListResponse, error)

	// DMAPIOfflineMasterNode request
	DMAPIOfflineMasterNodeWithResponse(ctx context.Context, masterName string, reqEditors ...RequestEditorFn) (*DMAPIOfflineMasterNodeResponse, error)

	// DMAPIGetClusterWorkerList request
	DMAPIGetClusterWorkerListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetClusterWorkerListResponse, error)

	// DMAPIOfflineWorkerNode request
	DMAPIOfflineWorkerNodeWithResponse(ctx context.Context, workerName string, reqEditors ...RequestEditorFn) (*DMAPIOfflineWorkerNodeResponse, error)

	// GetDocJSON request
	GetDocJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocJSONResponse, error)

	// GetDocHTML request
	GetDocHTMLWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocHTMLResponse, error)

	// DMAPIGetSourceList request
	DMAPIGetSourceListWithResponse(ctx context.Context, params *DMAPIGetSourceListParams, reqEditors ...RequestEditorFn) (*DMAPIGetSourceListResponse, error)

	// DMAPICreateSource request with any body
	DMAPICreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPICreateSourceResponse, error)

	DMAPICreateSourceWithResponse(ctx context.Context, body DMAPICreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPICreateSourceResponse, error)

	// DMAPIDeleteSource request
	DMAPIDeleteSourceWithResponse(ctx context.Context, sourceName string, params *DMAPIDeleteSourceParams, reqEditors ...RequestEditorFn) (*DMAPIDeleteSourceResponse, error)

	// DMAPIPauseRelay request
	DMAPIPauseRelayWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIPauseRelayResponse, error)

	// DMAPIResumeRelay request
	DMAPIResumeRelayWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIResumeRelayResponse, error)

	// DMAPIGetSourceSchemaList request
	DMAPIGetSourceSchemaListWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIGetSourceSchemaListResponse, error)

	// DMAPIGetSourceTableList request
	DMAPIGetSourceTableListWithResponse(ctx context.Context, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*DMAPIGetSourceTableListResponse, error)

	// DMAPIStartRelay request with any body
	DMAPIStartRelayWithBodyWithResponse(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIStartRelayResponse, error)

	DMAPIStartRelayWithResponse(ctx context.Context, sourceName string, body DMAPIStartRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIStartRelayResponse, error)

	// DMAPIGetSourceStatus request
	DMAPIGetSourceStatusWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIGetSourceStatusResponse, error)

	// DMAPIStopRelay request with any body
	DMAPIStopRelayWithBodyWithResponse(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIStopRelayResponse, error)

	DMAPIStopRelayWithResponse(ctx context.Context, sourceName string, body DMAPIStopRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIStopRelayResponse, error)

	// DMAPITransferSource request with any body
	DMAPITransferSourceWithBodyWithResponse(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPITransferSourceResponse, error)

	DMAPITransferSourceWithResponse(ctx context.Context, sourceName string, body DMAPITransferSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPITransferSourceResponse, error)

	// DMAPIGetTaskConfigList request
	DMAPIGetTaskConfigListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetTaskConfigListResponse, error)

	// DMAPICreateTaskConfig request with any body
	DMAPICreateTaskConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPICreateTaskConfigResponse, error)

	DMAPICreateTaskConfigWithResponse(ctx context.Context, body DMAPICreateTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPICreateTaskConfigResponse, error)

	// DMAPIImportTaskConfig request with any body
	DMAPIImportTaskConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIImportTaskConfigResponse, error)

	DMAPIImportTaskConfigWithResponse(ctx context.Context, body DMAPIImportTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIImportTaskConfigResponse, error)

	// DMAPIDeleteTaskConfig request
	DMAPIDeleteTaskConfigWithResponse(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*DMAPIDeleteTaskConfigResponse, error)

	// DMAPIGetTaskConfig request
	DMAPIGetTaskConfigWithResponse(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*DMAPIGetTaskConfigResponse, error)

	// DMAPUpdateTaskConfig request
	DMAPUpdateTaskConfigWithResponse(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*DMAPUpdateTaskConfigResponse, error)

	// DMAPIGetTaskList request
	DMAPIGetTaskListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetTaskListResponse, error)

	// DMAPIStartTask request with any body
	DMAPIStartTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIStartTaskResponse, error)

	DMAPIStartTaskWithResponse(ctx context.Context, body DMAPIStartTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIStartTaskResponse, error)

	// DMAPIDeleteTask request
	DMAPIDeleteTaskWithResponse(ctx context.Context, taskName string, params *DMAPIDeleteTaskParams, reqEditors ...RequestEditorFn) (*DMAPIDeleteTaskResponse, error)

	// DMAPIPauseTask request with any body
	DMAPIPauseTaskWithBodyWithResponse(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIPauseTaskResponse, error)

	DMAPIPauseTaskWithResponse(ctx context.Context, taskName string, body DMAPIPauseTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIPauseTaskResponse, error)

	// DMAPIResumeTask request with any body
	DMAPIResumeTaskWithBodyWithResponse(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIResumeTaskResponse, error)

	DMAPIResumeTaskWithResponse(ctx context.Context, taskName string, body DMAPIResumeTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIResumeTaskResponse, error)

	// DMAPIGetSchemaListByTaskAndSource request
	DMAPIGetSchemaListByTaskAndSourceWithResponse(ctx context.Context, taskName string, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIGetSchemaListByTaskAndSourceResponse, error)

	// DMAPIGetTableListByTaskAndSource request
	DMAPIGetTableListByTaskAndSourceWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*DMAPIGetTableListByTaskAndSourceResponse, error)

	// DMAPIDeleteTableStructure request
	DMAPIDeleteTableStructureWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*DMAPIDeleteTableStructureResponse, error)

	// DMAPIGetTableStructure request
	DMAPIGetTableStructureWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*DMAPIGetTableStructureResponse, error)

	// DMAPIOperateTableStructure request with any body
	DMAPIOperateTableStructureWithBodyWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIOperateTableStructureResponse, error)

	DMAPIOperateTableStructureWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, body DMAPIOperateTableStructureJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIOperateTableStructureResponse, error)

	// DMAPIGetTaskStatus request
	DMAPIGetTaskStatusWithResponse(ctx context.Context, taskName string, params *DMAPIGetTaskStatusParams, reqEditors ...RequestEditorFn) (*DMAPIGetTaskStatusResponse, error)
}

type DMAPIGetClusterMasterListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetClusterMasterListResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetClusterMasterListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetClusterMasterListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIOfflineMasterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIOfflineMasterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIOfflineMasterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetClusterWorkerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetClusterWorkerListResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetClusterWorkerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetClusterWorkerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIOfflineWorkerNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIOfflineWorkerNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIOfflineWorkerNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocJSONResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDocJSONResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocJSONResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocHTMLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDocHTMLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocHTMLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetSourceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSourceListResponse
}

// Status returns HTTPResponse.Status
func (r DMAPIGetSourceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetSourceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPICreateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Source
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPICreateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPICreateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIDeleteSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *DeleteSourceResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIDeleteSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIDeleteSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIPauseRelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIPauseRelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIPauseRelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIResumeRelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIResumeRelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIResumeRelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetSourceSchemaListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchemaNameList
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetSourceSchemaListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetSourceSchemaListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetSourceTableListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TableNameList
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetSourceTableListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetSourceTableListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIStartRelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIStartRelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIStartRelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetSourceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSourceStatusResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetSourceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetSourceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIStopRelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIStopRelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIStopRelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPITransferSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPITransferSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPITransferSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetTaskConfigListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaskListResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetTaskConfigListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetTaskConfigListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPICreateTaskConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPICreateTaskConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPICreateTaskConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIImportTaskConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *TaskConfigResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIImportTaskConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIImportTaskConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIDeleteTaskConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIDeleteTaskConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIDeleteTaskConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetTaskConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetTaskConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetTaskConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPUpdateTaskConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPUpdateTaskConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPUpdateTaskConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetTaskListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaskListResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetTaskListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetTaskListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIStartTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Task
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIStartTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIStartTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIDeleteTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIDeleteTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIDeleteTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIPauseTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIPauseTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIPauseTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIResumeTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIResumeTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIResumeTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetSchemaListByTaskAndSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchemaNameList
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetSchemaListByTaskAndSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetSchemaListByTaskAndSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetTableListByTaskAndSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TableNameList
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetTableListByTaskAndSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetTableListByTaskAndSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIDeleteTableStructureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIDeleteTableStructureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIDeleteTableStructureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetTableStructureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaskTableStructureResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetTableStructureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetTableStructureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIOperateTableStructureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIOperateTableStructureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIOperateTableStructureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DMAPIGetTaskStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaskStatusResponse
	JSON400      *ErrorWithMessage
}

// Status returns HTTPResponse.Status
func (r DMAPIGetTaskStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DMAPIGetTaskStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DMAPIGetClusterMasterListWithResponse request returning *DMAPIGetClusterMasterListResponse
func (c *ClientWithResponses) DMAPIGetClusterMasterListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetClusterMasterListResponse, error) {
	rsp, err := c.DMAPIGetClusterMasterList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetClusterMasterListResponse(rsp)
}

// DMAPIOfflineMasterNodeWithResponse request returning *DMAPIOfflineMasterNodeResponse
func (c *ClientWithResponses) DMAPIOfflineMasterNodeWithResponse(ctx context.Context, masterName string, reqEditors ...RequestEditorFn) (*DMAPIOfflineMasterNodeResponse, error) {
	rsp, err := c.DMAPIOfflineMasterNode(ctx, masterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIOfflineMasterNodeResponse(rsp)
}

// DMAPIGetClusterWorkerListWithResponse request returning *DMAPIGetClusterWorkerListResponse
func (c *ClientWithResponses) DMAPIGetClusterWorkerListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetClusterWorkerListResponse, error) {
	rsp, err := c.DMAPIGetClusterWorkerList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetClusterWorkerListResponse(rsp)
}

// DMAPIOfflineWorkerNodeWithResponse request returning *DMAPIOfflineWorkerNodeResponse
func (c *ClientWithResponses) DMAPIOfflineWorkerNodeWithResponse(ctx context.Context, workerName string, reqEditors ...RequestEditorFn) (*DMAPIOfflineWorkerNodeResponse, error) {
	rsp, err := c.DMAPIOfflineWorkerNode(ctx, workerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIOfflineWorkerNodeResponse(rsp)
}

// GetDocJSONWithResponse request returning *GetDocJSONResponse
func (c *ClientWithResponses) GetDocJSONWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocJSONResponse, error) {
	rsp, err := c.GetDocJSON(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocJSONResponse(rsp)
}

// GetDocHTMLWithResponse request returning *GetDocHTMLResponse
func (c *ClientWithResponses) GetDocHTMLWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDocHTMLResponse, error) {
	rsp, err := c.GetDocHTML(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocHTMLResponse(rsp)
}

// DMAPIGetSourceListWithResponse request returning *DMAPIGetSourceListResponse
func (c *ClientWithResponses) DMAPIGetSourceListWithResponse(ctx context.Context, params *DMAPIGetSourceListParams, reqEditors ...RequestEditorFn) (*DMAPIGetSourceListResponse, error) {
	rsp, err := c.DMAPIGetSourceList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetSourceListResponse(rsp)
}

// DMAPICreateSourceWithBodyWithResponse request with arbitrary body returning *DMAPICreateSourceResponse
func (c *ClientWithResponses) DMAPICreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPICreateSourceResponse, error) {
	rsp, err := c.DMAPICreateSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPICreateSourceResponse(rsp)
}

func (c *ClientWithResponses) DMAPICreateSourceWithResponse(ctx context.Context, body DMAPICreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPICreateSourceResponse, error) {
	rsp, err := c.DMAPICreateSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPICreateSourceResponse(rsp)
}

// DMAPIDeleteSourceWithResponse request returning *DMAPIDeleteSourceResponse
func (c *ClientWithResponses) DMAPIDeleteSourceWithResponse(ctx context.Context, sourceName string, params *DMAPIDeleteSourceParams, reqEditors ...RequestEditorFn) (*DMAPIDeleteSourceResponse, error) {
	rsp, err := c.DMAPIDeleteSource(ctx, sourceName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIDeleteSourceResponse(rsp)
}

// DMAPIPauseRelayWithResponse request returning *DMAPIPauseRelayResponse
func (c *ClientWithResponses) DMAPIPauseRelayWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIPauseRelayResponse, error) {
	rsp, err := c.DMAPIPauseRelay(ctx, sourceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIPauseRelayResponse(rsp)
}

// DMAPIResumeRelayWithResponse request returning *DMAPIResumeRelayResponse
func (c *ClientWithResponses) DMAPIResumeRelayWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIResumeRelayResponse, error) {
	rsp, err := c.DMAPIResumeRelay(ctx, sourceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIResumeRelayResponse(rsp)
}

// DMAPIGetSourceSchemaListWithResponse request returning *DMAPIGetSourceSchemaListResponse
func (c *ClientWithResponses) DMAPIGetSourceSchemaListWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIGetSourceSchemaListResponse, error) {
	rsp, err := c.DMAPIGetSourceSchemaList(ctx, sourceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetSourceSchemaListResponse(rsp)
}

// DMAPIGetSourceTableListWithResponse request returning *DMAPIGetSourceTableListResponse
func (c *ClientWithResponses) DMAPIGetSourceTableListWithResponse(ctx context.Context, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*DMAPIGetSourceTableListResponse, error) {
	rsp, err := c.DMAPIGetSourceTableList(ctx, sourceName, schemaName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetSourceTableListResponse(rsp)
}

// DMAPIStartRelayWithBodyWithResponse request with arbitrary body returning *DMAPIStartRelayResponse
func (c *ClientWithResponses) DMAPIStartRelayWithBodyWithResponse(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIStartRelayResponse, error) {
	rsp, err := c.DMAPIStartRelayWithBody(ctx, sourceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIStartRelayResponse(rsp)
}

func (c *ClientWithResponses) DMAPIStartRelayWithResponse(ctx context.Context, sourceName string, body DMAPIStartRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIStartRelayResponse, error) {
	rsp, err := c.DMAPIStartRelay(ctx, sourceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIStartRelayResponse(rsp)
}

// DMAPIGetSourceStatusWithResponse request returning *DMAPIGetSourceStatusResponse
func (c *ClientWithResponses) DMAPIGetSourceStatusWithResponse(ctx context.Context, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIGetSourceStatusResponse, error) {
	rsp, err := c.DMAPIGetSourceStatus(ctx, sourceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetSourceStatusResponse(rsp)
}

// DMAPIStopRelayWithBodyWithResponse request with arbitrary body returning *DMAPIStopRelayResponse
func (c *ClientWithResponses) DMAPIStopRelayWithBodyWithResponse(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIStopRelayResponse, error) {
	rsp, err := c.DMAPIStopRelayWithBody(ctx, sourceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIStopRelayResponse(rsp)
}

func (c *ClientWithResponses) DMAPIStopRelayWithResponse(ctx context.Context, sourceName string, body DMAPIStopRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIStopRelayResponse, error) {
	rsp, err := c.DMAPIStopRelay(ctx, sourceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIStopRelayResponse(rsp)
}

// DMAPITransferSourceWithBodyWithResponse request with arbitrary body returning *DMAPITransferSourceResponse
func (c *ClientWithResponses) DMAPITransferSourceWithBodyWithResponse(ctx context.Context, sourceName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPITransferSourceResponse, error) {
	rsp, err := c.DMAPITransferSourceWithBody(ctx, sourceName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPITransferSourceResponse(rsp)
}

func (c *ClientWithResponses) DMAPITransferSourceWithResponse(ctx context.Context, sourceName string, body DMAPITransferSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPITransferSourceResponse, error) {
	rsp, err := c.DMAPITransferSource(ctx, sourceName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPITransferSourceResponse(rsp)
}

// DMAPIGetTaskConfigListWithResponse request returning *DMAPIGetTaskConfigListResponse
func (c *ClientWithResponses) DMAPIGetTaskConfigListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetTaskConfigListResponse, error) {
	rsp, err := c.DMAPIGetTaskConfigList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetTaskConfigListResponse(rsp)
}

// DMAPICreateTaskConfigWithBodyWithResponse request with arbitrary body returning *DMAPICreateTaskConfigResponse
func (c *ClientWithResponses) DMAPICreateTaskConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPICreateTaskConfigResponse, error) {
	rsp, err := c.DMAPICreateTaskConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPICreateTaskConfigResponse(rsp)
}

func (c *ClientWithResponses) DMAPICreateTaskConfigWithResponse(ctx context.Context, body DMAPICreateTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPICreateTaskConfigResponse, error) {
	rsp, err := c.DMAPICreateTaskConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPICreateTaskConfigResponse(rsp)
}

// DMAPIImportTaskConfigWithBodyWithResponse request with arbitrary body returning *DMAPIImportTaskConfigResponse
func (c *ClientWithResponses) DMAPIImportTaskConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIImportTaskConfigResponse, error) {
	rsp, err := c.DMAPIImportTaskConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIImportTaskConfigResponse(rsp)
}

func (c *ClientWithResponses) DMAPIImportTaskConfigWithResponse(ctx context.Context, body DMAPIImportTaskConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIImportTaskConfigResponse, error) {
	rsp, err := c.DMAPIImportTaskConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIImportTaskConfigResponse(rsp)
}

// DMAPIDeleteTaskConfigWithResponse request returning *DMAPIDeleteTaskConfigResponse
func (c *ClientWithResponses) DMAPIDeleteTaskConfigWithResponse(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*DMAPIDeleteTaskConfigResponse, error) {
	rsp, err := c.DMAPIDeleteTaskConfig(ctx, taskName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIDeleteTaskConfigResponse(rsp)
}

// DMAPIGetTaskConfigWithResponse request returning *DMAPIGetTaskConfigResponse
func (c *ClientWithResponses) DMAPIGetTaskConfigWithResponse(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*DMAPIGetTaskConfigResponse, error) {
	rsp, err := c.DMAPIGetTaskConfig(ctx, taskName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetTaskConfigResponse(rsp)
}

// DMAPUpdateTaskConfigWithResponse request returning *DMAPUpdateTaskConfigResponse
func (c *ClientWithResponses) DMAPUpdateTaskConfigWithResponse(ctx context.Context, taskName string, reqEditors ...RequestEditorFn) (*DMAPUpdateTaskConfigResponse, error) {
	rsp, err := c.DMAPUpdateTaskConfig(ctx, taskName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPUpdateTaskConfigResponse(rsp)
}

// DMAPIGetTaskListWithResponse request returning *DMAPIGetTaskListResponse
func (c *ClientWithResponses) DMAPIGetTaskListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DMAPIGetTaskListResponse, error) {
	rsp, err := c.DMAPIGetTaskList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetTaskListResponse(rsp)
}

// DMAPIStartTaskWithBodyWithResponse request with arbitrary body returning *DMAPIStartTaskResponse
func (c *ClientWithResponses) DMAPIStartTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIStartTaskResponse, error) {
	rsp, err := c.DMAPIStartTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIStartTaskResponse(rsp)
}

func (c *ClientWithResponses) DMAPIStartTaskWithResponse(ctx context.Context, body DMAPIStartTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIStartTaskResponse, error) {
	rsp, err := c.DMAPIStartTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIStartTaskResponse(rsp)
}

// DMAPIDeleteTaskWithResponse request returning *DMAPIDeleteTaskResponse
func (c *ClientWithResponses) DMAPIDeleteTaskWithResponse(ctx context.Context, taskName string, params *DMAPIDeleteTaskParams, reqEditors ...RequestEditorFn) (*DMAPIDeleteTaskResponse, error) {
	rsp, err := c.DMAPIDeleteTask(ctx, taskName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIDeleteTaskResponse(rsp)
}

// DMAPIPauseTaskWithBodyWithResponse request with arbitrary body returning *DMAPIPauseTaskResponse
func (c *ClientWithResponses) DMAPIPauseTaskWithBodyWithResponse(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIPauseTaskResponse, error) {
	rsp, err := c.DMAPIPauseTaskWithBody(ctx, taskName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIPauseTaskResponse(rsp)
}

func (c *ClientWithResponses) DMAPIPauseTaskWithResponse(ctx context.Context, taskName string, body DMAPIPauseTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIPauseTaskResponse, error) {
	rsp, err := c.DMAPIPauseTask(ctx, taskName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIPauseTaskResponse(rsp)
}

// DMAPIResumeTaskWithBodyWithResponse request with arbitrary body returning *DMAPIResumeTaskResponse
func (c *ClientWithResponses) DMAPIResumeTaskWithBodyWithResponse(ctx context.Context, taskName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIResumeTaskResponse, error) {
	rsp, err := c.DMAPIResumeTaskWithBody(ctx, taskName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIResumeTaskResponse(rsp)
}

func (c *ClientWithResponses) DMAPIResumeTaskWithResponse(ctx context.Context, taskName string, body DMAPIResumeTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIResumeTaskResponse, error) {
	rsp, err := c.DMAPIResumeTask(ctx, taskName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIResumeTaskResponse(rsp)
}

// DMAPIGetSchemaListByTaskAndSourceWithResponse request returning *DMAPIGetSchemaListByTaskAndSourceResponse
func (c *ClientWithResponses) DMAPIGetSchemaListByTaskAndSourceWithResponse(ctx context.Context, taskName string, sourceName string, reqEditors ...RequestEditorFn) (*DMAPIGetSchemaListByTaskAndSourceResponse, error) {
	rsp, err := c.DMAPIGetSchemaListByTaskAndSource(ctx, taskName, sourceName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetSchemaListByTaskAndSourceResponse(rsp)
}

// DMAPIGetTableListByTaskAndSourceWithResponse request returning *DMAPIGetTableListByTaskAndSourceResponse
func (c *ClientWithResponses) DMAPIGetTableListByTaskAndSourceWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, reqEditors ...RequestEditorFn) (*DMAPIGetTableListByTaskAndSourceResponse, error) {
	rsp, err := c.DMAPIGetTableListByTaskAndSource(ctx, taskName, sourceName, schemaName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetTableListByTaskAndSourceResponse(rsp)
}

// DMAPIDeleteTableStructureWithResponse request returning *DMAPIDeleteTableStructureResponse
func (c *ClientWithResponses) DMAPIDeleteTableStructureWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*DMAPIDeleteTableStructureResponse, error) {
	rsp, err := c.DMAPIDeleteTableStructure(ctx, taskName, sourceName, schemaName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIDeleteTableStructureResponse(rsp)
}

// DMAPIGetTableStructureWithResponse request returning *DMAPIGetTableStructureResponse
func (c *ClientWithResponses) DMAPIGetTableStructureWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, reqEditors ...RequestEditorFn) (*DMAPIGetTableStructureResponse, error) {
	rsp, err := c.DMAPIGetTableStructure(ctx, taskName, sourceName, schemaName, tableName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetTableStructureResponse(rsp)
}

// DMAPIOperateTableStructureWithBodyWithResponse request with arbitrary body returning *DMAPIOperateTableStructureResponse
func (c *ClientWithResponses) DMAPIOperateTableStructureWithBodyWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DMAPIOperateTableStructureResponse, error) {
	rsp, err := c.DMAPIOperateTableStructureWithBody(ctx, taskName, sourceName, schemaName, tableName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIOperateTableStructureResponse(rsp)
}

func (c *ClientWithResponses) DMAPIOperateTableStructureWithResponse(ctx context.Context, taskName string, sourceName string, schemaName string, tableName string, body DMAPIOperateTableStructureJSONRequestBody, reqEditors ...RequestEditorFn) (*DMAPIOperateTableStructureResponse, error) {
	rsp, err := c.DMAPIOperateTableStructure(ctx, taskName, sourceName, schemaName, tableName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIOperateTableStructureResponse(rsp)
}

// DMAPIGetTaskStatusWithResponse request returning *DMAPIGetTaskStatusResponse
func (c *ClientWithResponses) DMAPIGetTaskStatusWithResponse(ctx context.Context, taskName string, params *DMAPIGetTaskStatusParams, reqEditors ...RequestEditorFn) (*DMAPIGetTaskStatusResponse, error) {
	rsp, err := c.DMAPIGetTaskStatus(ctx, taskName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDMAPIGetTaskStatusResponse(rsp)
}

// ParseDMAPIGetClusterMasterListResponse parses an HTTP response from a DMAPIGetClusterMasterListWithResponse call
func ParseDMAPIGetClusterMasterListResponse(rsp *http.Response) (*DMAPIGetClusterMasterListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetClusterMasterListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetClusterMasterListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIOfflineMasterNodeResponse parses an HTTP response from a DMAPIOfflineMasterNodeWithResponse call
func ParseDMAPIOfflineMasterNodeResponse(rsp *http.Response) (*DMAPIOfflineMasterNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIOfflineMasterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetClusterWorkerListResponse parses an HTTP response from a DMAPIGetClusterWorkerListWithResponse call
func ParseDMAPIGetClusterWorkerListResponse(rsp *http.Response) (*DMAPIGetClusterWorkerListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetClusterWorkerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetClusterWorkerListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIOfflineWorkerNodeResponse parses an HTTP response from a DMAPIOfflineWorkerNodeWithResponse call
func ParseDMAPIOfflineWorkerNodeResponse(rsp *http.Response) (*DMAPIOfflineWorkerNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIOfflineWorkerNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseGetDocJSONResponse parses an HTTP response from a GetDocJSONWithResponse call
func ParseGetDocJSONResponse(rsp *http.Response) (*GetDocJSONResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocJSONResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDocHTMLResponse parses an HTTP response from a GetDocHTMLWithResponse call
func ParseGetDocHTMLResponse(rsp *http.Response) (*GetDocHTMLResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocHTMLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDMAPIGetSourceListResponse parses an HTTP response from a DMAPIGetSourceListWithResponse call
func ParseDMAPIGetSourceListResponse(rsp *http.Response) (*DMAPIGetSourceListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetSourceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSourceListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseDMAPICreateSourceResponse parses an HTTP response from a DMAPICreateSourceWithResponse call
func ParseDMAPICreateSourceResponse(rsp *http.Response) (*DMAPICreateSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPICreateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIDeleteSourceResponse parses an HTTP response from a DMAPIDeleteSourceWithResponse call
func ParseDMAPIDeleteSourceResponse(rsp *http.Response) (*DMAPIDeleteSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIDeleteSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest DeleteSourceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIPauseRelayResponse parses an HTTP response from a DMAPIPauseRelayWithResponse call
func ParseDMAPIPauseRelayResponse(rsp *http.Response) (*DMAPIPauseRelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIPauseRelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIResumeRelayResponse parses an HTTP response from a DMAPIResumeRelayWithResponse call
func ParseDMAPIResumeRelayResponse(rsp *http.Response) (*DMAPIResumeRelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIResumeRelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetSourceSchemaListResponse parses an HTTP response from a DMAPIGetSourceSchemaListWithResponse call
func ParseDMAPIGetSourceSchemaListResponse(rsp *http.Response) (*DMAPIGetSourceSchemaListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetSourceSchemaListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchemaNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIGetSourceTableListResponse parses an HTTP response from a DMAPIGetSourceTableListWithResponse call
func ParseDMAPIGetSourceTableListResponse(rsp *http.Response) (*DMAPIGetSourceTableListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetSourceTableListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TableNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIStartRelayResponse parses an HTTP response from a DMAPIStartRelayWithResponse call
func ParseDMAPIStartRelayResponse(rsp *http.Response) (*DMAPIStartRelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIStartRelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetSourceStatusResponse parses an HTTP response from a DMAPIGetSourceStatusWithResponse call
func ParseDMAPIGetSourceStatusResponse(rsp *http.Response) (*DMAPIGetSourceStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetSourceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSourceStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIStopRelayResponse parses an HTTP response from a DMAPIStopRelayWithResponse call
func ParseDMAPIStopRelayResponse(rsp *http.Response) (*DMAPIStopRelayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIStopRelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPITransferSourceResponse parses an HTTP response from a DMAPITransferSourceWithResponse call
func ParseDMAPITransferSourceResponse(rsp *http.Response) (*DMAPITransferSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPITransferSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetTaskConfigListResponse parses an HTTP response from a DMAPIGetTaskConfigListWithResponse call
func ParseDMAPIGetTaskConfigListResponse(rsp *http.Response) (*DMAPIGetTaskConfigListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetTaskConfigListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaskListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPICreateTaskConfigResponse parses an HTTP response from a DMAPICreateTaskConfigWithResponse call
func ParseDMAPICreateTaskConfigResponse(rsp *http.Response) (*DMAPICreateTaskConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPICreateTaskConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIImportTaskConfigResponse parses an HTTP response from a DMAPIImportTaskConfigWithResponse call
func ParseDMAPIImportTaskConfigResponse(rsp *http.Response) (*DMAPIImportTaskConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIImportTaskConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest TaskConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIDeleteTaskConfigResponse parses an HTTP response from a DMAPIDeleteTaskConfigWithResponse call
func ParseDMAPIDeleteTaskConfigResponse(rsp *http.Response) (*DMAPIDeleteTaskConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIDeleteTaskConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetTaskConfigResponse parses an HTTP response from a DMAPIGetTaskConfigWithResponse call
func ParseDMAPIGetTaskConfigResponse(rsp *http.Response) (*DMAPIGetTaskConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetTaskConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPUpdateTaskConfigResponse parses an HTTP response from a DMAPUpdateTaskConfigWithResponse call
func ParseDMAPUpdateTaskConfigResponse(rsp *http.Response) (*DMAPUpdateTaskConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPUpdateTaskConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIGetTaskListResponse parses an HTTP response from a DMAPIGetTaskListWithResponse call
func ParseDMAPIGetTaskListResponse(rsp *http.Response) (*DMAPIGetTaskListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetTaskListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaskListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIStartTaskResponse parses an HTTP response from a DMAPIStartTaskWithResponse call
func ParseDMAPIStartTaskResponse(rsp *http.Response) (*DMAPIStartTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIStartTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIDeleteTaskResponse parses an HTTP response from a DMAPIDeleteTaskWithResponse call
func ParseDMAPIDeleteTaskResponse(rsp *http.Response) (*DMAPIDeleteTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIDeleteTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIPauseTaskResponse parses an HTTP response from a DMAPIPauseTaskWithResponse call
func ParseDMAPIPauseTaskResponse(rsp *http.Response) (*DMAPIPauseTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIPauseTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIResumeTaskResponse parses an HTTP response from a DMAPIResumeTaskWithResponse call
func ParseDMAPIResumeTaskResponse(rsp *http.Response) (*DMAPIResumeTaskResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIResumeTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetSchemaListByTaskAndSourceResponse parses an HTTP response from a DMAPIGetSchemaListByTaskAndSourceWithResponse call
func ParseDMAPIGetSchemaListByTaskAndSourceResponse(rsp *http.Response) (*DMAPIGetSchemaListByTaskAndSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetSchemaListByTaskAndSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchemaNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIGetTableListByTaskAndSourceResponse parses an HTTP response from a DMAPIGetTableListByTaskAndSourceWithResponse call
func ParseDMAPIGetTableListByTaskAndSourceResponse(rsp *http.Response) (*DMAPIGetTableListByTaskAndSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetTableListByTaskAndSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TableNameList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIDeleteTableStructureResponse parses an HTTP response from a DMAPIDeleteTableStructureWithResponse call
func ParseDMAPIDeleteTableStructureResponse(rsp *http.Response) (*DMAPIDeleteTableStructureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIDeleteTableStructureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetTableStructureResponse parses an HTTP response from a DMAPIGetTableStructureWithResponse call
func ParseDMAPIGetTableStructureResponse(rsp *http.Response) (*DMAPIGetTableStructureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetTableStructureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaskTableStructureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDMAPIOperateTableStructureResponse parses an HTTP response from a DMAPIOperateTableStructureWithResponse call
func ParseDMAPIOperateTableStructureResponse(rsp *http.Response) (*DMAPIOperateTableStructureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIOperateTableStructureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest
	}

	return response, nil
}

// ParseDMAPIGetTaskStatusResponse parses an HTTP response from a DMAPIGetTaskStatusWithResponse call
func ParseDMAPIGetTaskStatusResponse(rsp *http.Response) (*DMAPIGetTaskStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DMAPIGetTaskStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaskStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorWithMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
