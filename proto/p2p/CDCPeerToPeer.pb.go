// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: CDCPeerToPeer.proto

package p2p

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExitReason int32

const (
	ExitReason_UNKNOWN              ExitReason = 0
	ExitReason_OK                   ExitReason = 1
	ExitReason_CONGESTED            ExitReason = 2
	ExitReason_CAPTURE_SUICIDE      ExitReason = 3
	ExitReason_STALE_CONNECTION     ExitReason = 4
	ExitReason_DUPLICATE_CONNECTION ExitReason = 5
	ExitReason_CAPTURE_ID_MISMATCH  ExitReason = 6
)

var ExitReason_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "CONGESTED",
	3: "CAPTURE_SUICIDE",
	4: "STALE_CONNECTION",
	5: "DUPLICATE_CONNECTION",
	6: "CAPTURE_ID_MISMATCH",
}

var ExitReason_value = map[string]int32{
	"UNKNOWN":              0,
	"OK":                   1,
	"CONGESTED":            2,
	"CAPTURE_SUICIDE":      3,
	"STALE_CONNECTION":     4,
	"DUPLICATE_CONNECTION": 5,
	"CAPTURE_ID_MISMATCH":  6,
}

func (x ExitReason) String() string {
	return proto.EnumName(ExitReason_name, int32(x))
}

func (ExitReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6560df28dddfd2cc, []int{0}
}

// MessageEntry represents a single message.
type MessageEntry struct {
	// topic is used to separate messages into order-guaranteed logical streams.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// serialized payload. The format and schema is defined by the business logic
	// using the peer-to-peer mechanism.
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// monotonically increase.
	Sequence int64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MessageEntry) Reset()         { *m = MessageEntry{} }
func (m *MessageEntry) String() string { return proto.CompactTextString(m) }
func (*MessageEntry) ProtoMessage()    {}
func (*MessageEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6560df28dddfd2cc, []int{0}
}
func (m *MessageEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEntry.Merge(m, src)
}
func (m *MessageEntry) XXX_Size() int {
	return m.Size()
}
func (m *MessageEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEntry proto.InternalMessageInfo

func (m *MessageEntry) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MessageEntry) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *MessageEntry) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// Metadata associated with one client-server bidirectional stream.
type StreamMeta struct {
	// fields required for correctness
	SenderId   string `protobuf:"bytes,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	ReceiverId string `protobuf:"bytes,2,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	Epoch      int64  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// fields required for compatibility check
	ClientVersion string `protobuf:"bytes,50,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	// fields for metrics, logging, debugging, etc.
	SenderAdvertisedAddr string `protobuf:"bytes,100,opt,name=sender_advertised_addr,json=senderAdvertisedAddr,proto3" json:"sender_advertised_addr,omitempty"`
}

func (m *StreamMeta) Reset()         { *m = StreamMeta{} }
func (m *StreamMeta) String() string { return proto.CompactTextString(m) }
func (*StreamMeta) ProtoMessage()    {}
func (*StreamMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_6560df28dddfd2cc, []int{1}
}
func (m *StreamMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMeta.Merge(m, src)
}
func (m *StreamMeta) XXX_Size() int {
	return m.Size()
}
func (m *StreamMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMeta.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMeta proto.InternalMessageInfo

func (m *StreamMeta) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *StreamMeta) GetReceiverId() string {
	if m != nil {
		return m.ReceiverId
	}
	return ""
}

func (m *StreamMeta) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *StreamMeta) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *StreamMeta) GetSenderAdvertisedAddr() string {
	if m != nil {
		return m.SenderAdvertisedAddr
	}
	return ""
}

type MessagePacket struct {
	Meta *StreamMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// multiple messages can be batched.
	Entries []*MessageEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *MessagePacket) Reset()         { *m = MessagePacket{} }
func (m *MessagePacket) String() string { return proto.CompactTextString(m) }
func (*MessagePacket) ProtoMessage()    {}
func (*MessagePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_6560df28dddfd2cc, []int{2}
}
func (m *MessagePacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePacket.Merge(m, src)
}
func (m *MessagePacket) XXX_Size() int {
	return m.Size()
}
func (m *MessagePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePacket.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePacket proto.InternalMessageInfo

func (m *MessagePacket) GetMeta() *StreamMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MessagePacket) GetEntries() []*MessageEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Ack struct {
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// the sequence of an already processed message.
	// Must be monotonically increasing for a given topic and two given node processes.
	LastSeq int64 `protobuf:"varint,2,opt,name=last_seq,json=lastSeq,proto3" json:"last_seq,omitempty"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_6560df28dddfd2cc, []int{3}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return m.Size()
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Ack) GetLastSeq() int64 {
	if m != nil {
		return m.LastSeq
	}
	return 0
}

type SendMessageResponse struct {
	Ack          []*Ack     `protobuf:"bytes,1,rep,name=ack,proto3" json:"ack,omitempty"`
	ExitReason   ExitReason `protobuf:"varint,2,opt,name=exit_reason,json=exitReason,proto3,enum=p2p.ExitReason" json:"exit_reason,omitempty"`
	ErrorMessage string     `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *SendMessageResponse) Reset()         { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()    {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6560df28dddfd2cc, []int{4}
}
func (m *SendMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageResponse.Merge(m, src)
}
func (m *SendMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageResponse proto.InternalMessageInfo

func (m *SendMessageResponse) GetAck() []*Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

func (m *SendMessageResponse) GetExitReason() ExitReason {
	if m != nil {
		return m.ExitReason
	}
	return ExitReason_UNKNOWN
}

func (m *SendMessageResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("p2p.ExitReason", ExitReason_name, ExitReason_value)
	proto.RegisterType((*MessageEntry)(nil), "p2p.MessageEntry")
	proto.RegisterType((*StreamMeta)(nil), "p2p.StreamMeta")
	proto.RegisterType((*MessagePacket)(nil), "p2p.MessagePacket")
	proto.RegisterType((*Ack)(nil), "p2p.Ack")
	proto.RegisterType((*SendMessageResponse)(nil), "p2p.SendMessageResponse")
}

func init() { proto.RegisterFile("CDCPeerToPeer.proto", fileDescriptor_6560df28dddfd2cc) }

var fileDescriptor_6560df28dddfd2cc = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xae, 0x9b, 0x6d, 0x6d, 0x5f, 0xd7, 0x2d, 0xb8, 0x15, 0x84, 0x22, 0x95, 0xaa, 0x13, 0x52,
	0x05, 0xd2, 0x98, 0x0a, 0xe2, 0x8a, 0x42, 0x1a, 0x41, 0xb4, 0x35, 0xad, 0x92, 0x14, 0x24, 0x2e,
	0x51, 0x48, 0x9e, 0x46, 0xd4, 0x2d, 0xce, 0x6c, 0x33, 0x8d, 0x7f, 0xc0, 0x09, 0xf1, 0x87, 0xb8,
	0x73, 0xdc, 0x91, 0x23, 0xda, 0xfe, 0x08, 0xaa, 0x93, 0x6e, 0x9d, 0x10, 0x17, 0xcb, 0xdf, 0xf7,
	0x3d, 0xbf, 0xcf, 0xfe, 0x9e, 0x0c, 0x6d, 0x6b, 0x6c, 0xcd, 0x10, 0x79, 0xc0, 0x96, 0xeb, 0x7e,
	0xce, 0x99, 0x64, 0x54, 0xcb, 0x47, 0x79, 0xb7, 0x73, 0xcc, 0x8e, 0x99, 0xc2, 0xcf, 0x97, 0xbb,
	0x42, 0x1a, 0x7c, 0x84, 0xed, 0x09, 0x0a, 0x11, 0x1d, 0xa3, 0x9d, 0x49, 0xfe, 0x95, 0x76, 0x60,
	0x53, 0xb2, 0x3c, 0x8d, 0x0d, 0xd2, 0x27, 0xc3, 0x86, 0x57, 0x00, 0x6a, 0x40, 0x2d, 0x66, 0x99,
	0xc4, 0x4c, 0x1a, 0xd5, 0x3e, 0x19, 0x6e, 0x7b, 0x2b, 0x48, 0xbb, 0x50, 0x17, 0x78, 0xf6, 0x05,
	0xb3, 0x18, 0x0d, 0xad, 0x4f, 0x86, 0x9a, 0x77, 0x83, 0x07, 0x3f, 0x09, 0x80, 0x2f, 0x39, 0x46,
	0xa7, 0x13, 0x94, 0x11, 0x7d, 0x04, 0x0d, 0x81, 0x59, 0x82, 0x3c, 0x4c, 0x93, 0xb2, 0x7d, 0xbd,
	0x20, 0x9c, 0x84, 0x3e, 0x86, 0x26, 0xc7, 0x18, 0xd3, 0xf3, 0x42, 0xae, 0x2a, 0x19, 0x56, 0x94,
	0x93, 0x2c, 0x2f, 0x86, 0x39, 0x8b, 0x3f, 0x97, 0x2e, 0x05, 0xa0, 0x4f, 0x60, 0x27, 0x3e, 0x49,
	0x31, 0x93, 0xe1, 0x39, 0x72, 0x91, 0xb2, 0xcc, 0x18, 0xa9, 0x93, 0xad, 0x82, 0x7d, 0x5f, 0x90,
	0xf4, 0x25, 0xdc, 0x2f, 0xad, 0xa3, 0xe4, 0x1c, 0xb9, 0x4c, 0x05, 0x26, 0x61, 0x94, 0x24, 0xdc,
	0x48, 0x54, 0x79, 0xa7, 0x50, 0xcd, 0x1b, 0xd1, 0x4c, 0x12, 0x3e, 0x88, 0xa0, 0x55, 0x66, 0x33,
	0x8b, 0xe2, 0x05, 0x4a, 0xba, 0x07, 0x1b, 0xa7, 0x28, 0x23, 0x75, 0xf9, 0xe6, 0x68, 0x77, 0x3f,
	0x1f, 0xe5, 0xfb, 0xb7, 0x0f, 0xf4, 0x94, 0x48, 0x9f, 0x41, 0x0d, 0x33, 0xc9, 0x53, 0x14, 0x46,
	0xb5, 0xaf, 0x0d, 0x9b, 0xa3, 0x7b, 0xaa, 0x6e, 0x3d, 0x65, 0x6f, 0x55, 0x31, 0x78, 0x05, 0x9a,
	0x19, 0x2f, 0xfe, 0x93, 0xfa, 0x43, 0xa8, 0x9f, 0x44, 0x42, 0x86, 0x02, 0xcf, 0x54, 0x20, 0x9a,
	0x57, 0x5b, 0x62, 0x1f, 0xcf, 0x06, 0xdf, 0x08, 0xb4, 0x7d, 0xcc, 0x92, 0xb2, 0xab, 0x87, 0x22,
	0x67, 0x99, 0x40, 0xda, 0x05, 0x2d, 0x8a, 0x17, 0x06, 0x51, 0xc6, 0x75, 0x65, 0x6c, 0xc6, 0x0b,
	0x6f, 0x49, 0xd2, 0x03, 0x68, 0xe2, 0x45, 0x2a, 0x43, 0x8e, 0x91, 0x60, 0x99, 0xea, 0xb8, 0x53,
	0x3e, 0xc2, 0xbe, 0x48, 0xa5, 0xa7, 0x68, 0x0f, 0xf0, 0x66, 0x4f, 0xf7, 0xa0, 0x85, 0x9c, 0x33,
	0x1e, 0x9e, 0x16, 0x36, 0x2a, 0xfb, 0x86, 0xb7, 0xad, 0xc8, 0xd2, 0xfa, 0xe9, 0x77, 0x02, 0x70,
	0x7b, 0x9e, 0x36, 0xa1, 0x36, 0x77, 0x0f, 0xdd, 0xe9, 0x07, 0x57, 0xaf, 0xd0, 0x2d, 0xa8, 0x4e,
	0x0f, 0x75, 0x42, 0x5b, 0xd0, 0xb0, 0xa6, 0xee, 0x5b, 0xdb, 0x0f, 0xec, 0xb1, 0x5e, 0xa5, 0x6d,
	0xd8, 0xb5, 0xcc, 0x59, 0x30, 0xf7, 0xec, 0xd0, 0x9f, 0x3b, 0x96, 0x33, 0xb6, 0x75, 0x8d, 0x76,
	0x40, 0xf7, 0x03, 0xf3, 0xc8, 0x0e, 0xad, 0xa9, 0xeb, 0xda, 0x56, 0xe0, 0x4c, 0x5d, 0x7d, 0x83,
	0x1a, 0xd0, 0x19, 0xcf, 0x67, 0x47, 0x8e, 0x65, 0x06, 0x77, 0x94, 0x4d, 0xfa, 0x00, 0xda, 0xab,
	0x26, 0xce, 0x38, 0x9c, 0x38, 0xfe, 0xc4, 0x0c, 0xac, 0x77, 0xfa, 0xd6, 0x68, 0x06, 0xad, 0x3b,
	0x9f, 0x80, 0xbe, 0x86, 0xe6, 0x5a, 0x56, 0x94, 0xae, 0xcf, 0xa3, 0x98, 0x6c, 0xd7, 0x28, 0x66,
	0xf9, 0x6f, 0xa2, 0x43, 0x72, 0x40, 0xde, 0x18, 0xbf, 0xae, 0x7a, 0xe4, 0xf2, 0xaa, 0x47, 0xfe,
	0x5c, 0xf5, 0xc8, 0x8f, 0xeb, 0x5e, 0xe5, 0xf2, 0xba, 0x57, 0xf9, 0x7d, 0xdd, 0xab, 0x7c, 0xda,
	0x52, 0xbf, 0xe8, 0xc5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x85, 0x98, 0x36, 0x77, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CDCPeerToPeerClient is the client API for CDCPeerToPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDCPeerToPeerClient interface {
	// A bidirectional stream from the sender (client) to the receiver (server)
	// The send direction is used to carry the serialized payload, and the
	// reply direction is used to receive ACKs (progress information) from the server.
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (CDCPeerToPeer_SendMessageClient, error)
}

type cDCPeerToPeerClient struct {
	cc *grpc.ClientConn
}

func NewCDCPeerToPeerClient(cc *grpc.ClientConn) CDCPeerToPeerClient {
	return &cDCPeerToPeerClient{cc}
}

func (c *cDCPeerToPeerClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (CDCPeerToPeer_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDCPeerToPeer_serviceDesc.Streams[0], "/p2p.CDCPeerToPeer/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDCPeerToPeerSendMessageClient{stream}
	return x, nil
}

type CDCPeerToPeer_SendMessageClient interface {
	Send(*MessagePacket) error
	Recv() (*SendMessageResponse, error)
	grpc.ClientStream
}

type cDCPeerToPeerSendMessageClient struct {
	grpc.ClientStream
}

func (x *cDCPeerToPeerSendMessageClient) Send(m *MessagePacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cDCPeerToPeerSendMessageClient) Recv() (*SendMessageResponse, error) {
	m := new(SendMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CDCPeerToPeerServer is the server API for CDCPeerToPeer service.
type CDCPeerToPeerServer interface {
	// A bidirectional stream from the sender (client) to the receiver (server)
	// The send direction is used to carry the serialized payload, and the
	// reply direction is used to receive ACKs (progress information) from the server.
	SendMessage(CDCPeerToPeer_SendMessageServer) error
}

// UnimplementedCDCPeerToPeerServer can be embedded to have forward compatible implementations.
type UnimplementedCDCPeerToPeerServer struct {
}

func (*UnimplementedCDCPeerToPeerServer) SendMessage(srv CDCPeerToPeer_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

func RegisterCDCPeerToPeerServer(s *grpc.Server, srv CDCPeerToPeerServer) {
	s.RegisterService(&_CDCPeerToPeer_serviceDesc, srv)
}

func _CDCPeerToPeer_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CDCPeerToPeerServer).SendMessage(&cDCPeerToPeerSendMessageServer{stream})
}

type CDCPeerToPeer_SendMessageServer interface {
	Send(*SendMessageResponse) error
	Recv() (*MessagePacket, error)
	grpc.ServerStream
}

type cDCPeerToPeerSendMessageServer struct {
	grpc.ServerStream
}

func (x *cDCPeerToPeerSendMessageServer) Send(m *SendMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cDCPeerToPeerSendMessageServer) Recv() (*MessagePacket, error) {
	m := new(MessagePacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CDCPeerToPeer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "p2p.CDCPeerToPeer",
	HandlerType: (*CDCPeerToPeerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _CDCPeerToPeer_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "CDCPeerToPeer.proto",
}

func (m *MessageEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAdvertisedAddr) > 0 {
		i -= len(m.SenderAdvertisedAddr)
		copy(dAtA[i:], m.SenderAdvertisedAddr)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.SenderAdvertisedAddr)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ClientVersion) > 0 {
		i -= len(m.ClientVersion)
		copy(dAtA[i:], m.ClientVersion)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.ClientVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.Epoch != 0 {
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReceiverId) > 0 {
		i -= len(m.ReceiverId)
		copy(dAtA[i:], m.ReceiverId)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.ReceiverId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderId) > 0 {
		i -= len(m.SenderId)
		copy(dAtA[i:], m.SenderId)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.SenderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagePacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSeq != 0 {
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(m.LastSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExitReason != 0 {
		i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(m.ExitReason))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ack) > 0 {
		for iNdEx := len(m.Ack) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ack[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCDCPeerToPeer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCDCPeerToPeer(dAtA []byte, offset int, v uint64) int {
	offset -= sovCDCPeerToPeer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovCDCPeerToPeer(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCDCPeerToPeer(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovCDCPeerToPeer(uint64(m.Sequence))
	}
	return n
}

func (m *StreamMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovCDCPeerToPeer(uint64(l))
	}
	l = len(m.ReceiverId)
	if l > 0 {
		n += 1 + l + sovCDCPeerToPeer(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovCDCPeerToPeer(uint64(m.Epoch))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 2 + l + sovCDCPeerToPeer(uint64(l))
	}
	l = len(m.SenderAdvertisedAddr)
	if l > 0 {
		n += 2 + l + sovCDCPeerToPeer(uint64(l))
	}
	return n
}

func (m *MessagePacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCDCPeerToPeer(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCDCPeerToPeer(uint64(l))
		}
	}
	return n
}

func (m *Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovCDCPeerToPeer(uint64(l))
	}
	if m.LastSeq != 0 {
		n += 1 + sovCDCPeerToPeer(uint64(m.LastSeq))
	}
	return n
}

func (m *SendMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ack) > 0 {
		for _, e := range m.Ack {
			l = e.Size()
			n += 1 + l + sovCDCPeerToPeer(uint64(l))
		}
	}
	if m.ExitReason != 0 {
		n += 1 + sovCDCPeerToPeer(uint64(m.ExitReason))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovCDCPeerToPeer(uint64(l))
	}
	return n
}

func sovCDCPeerToPeer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCDCPeerToPeer(x uint64) (n int) {
	return sovCDCPeerToPeer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCDCPeerToPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCDCPeerToPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCDCPeerToPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAdvertisedAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAdvertisedAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCDCPeerToPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCDCPeerToPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &StreamMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &MessageEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCDCPeerToPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCDCPeerToPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeq", wireType)
			}
			m.LastSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCDCPeerToPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCDCPeerToPeer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ack = append(m.Ack, &Ack{})
			if err := m.Ack[len(m.Ack)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitReason", wireType)
			}
			m.ExitReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitReason |= ExitReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCDCPeerToPeer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCDCPeerToPeer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCDCPeerToPeer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCDCPeerToPeer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCDCPeerToPeer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCDCPeerToPeer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCDCPeerToPeer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCDCPeerToPeer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCDCPeerToPeer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCDCPeerToPeer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCDCPeerToPeer = fmt.Errorf("proto: unexpected end of group")
)
