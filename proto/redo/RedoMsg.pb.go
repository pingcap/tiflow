// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: RedoMsg.proto

package redo

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_DDL Type = 0
	Type_DML Type = 1
)

var Type_name = map[int32]string{
	0: "DDL",
	1: "DML",
}

var Type_value = map[string]int32{
	"DDL": 0,
	"DML": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{0}
}

type RedoLog struct {
	Row  *RedoRowChangedEvent `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
	Ddl  *RedoDDLEvent        `protobuf:"bytes,2,opt,name=ddl,proto3" json:"ddl,omitempty"`
	Type Type                 `protobuf:"varint,3,opt,name=type,proto3,enum=redo.Type" json:"type,omitempty"`
}

func (m *RedoLog) Reset()         { *m = RedoLog{} }
func (m *RedoLog) String() string { return proto.CompactTextString(m) }
func (*RedoLog) ProtoMessage()    {}
func (*RedoLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{0}
}
func (m *RedoLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedoLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedoLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedoLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedoLog.Merge(m, src)
}
func (m *RedoLog) XXX_Size() int {
	return m.Size()
}
func (m *RedoLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RedoLog.DiscardUnknown(m)
}

var xxx_messageInfo_RedoLog proto.InternalMessageInfo

func (m *RedoLog) GetRow() *RedoRowChangedEvent {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *RedoLog) GetDdl() *RedoDDLEvent {
	if m != nil {
		return m.Ddl
	}
	return nil
}

func (m *RedoLog) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_DDL
}

type RedoRowChangedEvent struct {
	Row        *RowChangedEvent `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
	PreColumns []*RedoColumn    `protobuf:"bytes,2,rep,name=pre_columns,json=preColumns,proto3" json:"pre_columns,omitempty"`
	Columns    []*RedoColumn    `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *RedoRowChangedEvent) Reset()         { *m = RedoRowChangedEvent{} }
func (m *RedoRowChangedEvent) String() string { return proto.CompactTextString(m) }
func (*RedoRowChangedEvent) ProtoMessage()    {}
func (*RedoRowChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{1}
}
func (m *RedoRowChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedoRowChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedoRowChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedoRowChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedoRowChangedEvent.Merge(m, src)
}
func (m *RedoRowChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *RedoRowChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RedoRowChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RedoRowChangedEvent proto.InternalMessageInfo

func (m *RedoRowChangedEvent) GetRow() *RowChangedEvent {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *RedoRowChangedEvent) GetPreColumns() []*RedoColumn {
	if m != nil {
		return m.PreColumns
	}
	return nil
}

func (m *RedoRowChangedEvent) GetColumns() []*RedoColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

type RowChangedEvent struct {
	StartTs  uint64     `protobuf:"varint,1,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	CommitTs uint64     `protobuf:"varint,2,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	Table    *TableName `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	IndexIds []*IntArr  `protobuf:"bytes,4,rep,name=index_ids,json=indexIds,proto3" json:"index_ids,omitempty"`
}

func (m *RowChangedEvent) Reset()         { *m = RowChangedEvent{} }
func (m *RowChangedEvent) String() string { return proto.CompactTextString(m) }
func (*RowChangedEvent) ProtoMessage()    {}
func (*RowChangedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{2}
}
func (m *RowChangedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowChangedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowChangedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowChangedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowChangedEvent.Merge(m, src)
}
func (m *RowChangedEvent) XXX_Size() int {
	return m.Size()
}
func (m *RowChangedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RowChangedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RowChangedEvent proto.InternalMessageInfo

func (m *RowChangedEvent) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *RowChangedEvent) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *RowChangedEvent) GetTable() *TableName {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *RowChangedEvent) GetIndexIds() []*IntArr {
	if m != nil {
		return m.IndexIds
	}
	return nil
}

type IntArr struct {
	Value []int32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (m *IntArr) Reset()         { *m = IntArr{} }
func (m *IntArr) String() string { return proto.CompactTextString(m) }
func (*IntArr) ProtoMessage()    {}
func (*IntArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{3}
}
func (m *IntArr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntArr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntArr.Merge(m, src)
}
func (m *IntArr) XXX_Size() int {
	return m.Size()
}
func (m *IntArr) XXX_DiscardUnknown() {
	xxx_messageInfo_IntArr.DiscardUnknown(m)
}

var xxx_messageInfo_IntArr proto.InternalMessageInfo

func (m *IntArr) GetValue() []int32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type TableName struct {
	Schema      string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table       string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	TableId     int64  `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	IsPartition bool   `protobuf:"varint,4,opt,name=is_partition,json=isPartition,proto3" json:"is_partition,omitempty"`
}

func (m *TableName) Reset()         { *m = TableName{} }
func (m *TableName) String() string { return proto.CompactTextString(m) }
func (*TableName) ProtoMessage()    {}
func (*TableName) Descriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{4}
}
func (m *TableName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableName.Merge(m, src)
}
func (m *TableName) XXX_Size() int {
	return m.Size()
}
func (m *TableName) XXX_DiscardUnknown() {
	xxx_messageInfo_TableName.DiscardUnknown(m)
}

var xxx_messageInfo_TableName proto.InternalMessageInfo

func (m *TableName) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *TableName) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *TableName) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *TableName) GetIsPartition() bool {
	if m != nil {
		return m.IsPartition
	}
	return false
}

type RedoColumn struct {
	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type              int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Charset           string `protobuf:"bytes,3,opt,name=charset,proto3" json:"charset,omitempty"`
	Collation         string `protobuf:"bytes,4,opt,name=collation,proto3" json:"collation,omitempty"`
	Flag              uint64 `protobuf:"varint,5,opt,name=flag,proto3" json:"flag,omitempty"`
	Value             []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	ValueIsEmptyBytes bool   `protobuf:"varint,7,opt,name=value_is_empty_bytes,json=valueIsEmptyBytes,proto3" json:"value_is_empty_bytes,omitempty"`
}

func (m *RedoColumn) Reset()         { *m = RedoColumn{} }
func (m *RedoColumn) String() string { return proto.CompactTextString(m) }
func (*RedoColumn) ProtoMessage()    {}
func (*RedoColumn) Descriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{5}
}
func (m *RedoColumn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedoColumn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedoColumn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedoColumn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedoColumn.Merge(m, src)
}
func (m *RedoColumn) XXX_Size() int {
	return m.Size()
}
func (m *RedoColumn) XXX_DiscardUnknown() {
	xxx_messageInfo_RedoColumn.DiscardUnknown(m)
}

var xxx_messageInfo_RedoColumn proto.InternalMessageInfo

func (m *RedoColumn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RedoColumn) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RedoColumn) GetCharset() string {
	if m != nil {
		return m.Charset
	}
	return ""
}

func (m *RedoColumn) GetCollation() string {
	if m != nil {
		return m.Collation
	}
	return ""
}

func (m *RedoColumn) GetFlag() uint64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *RedoColumn) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RedoColumn) GetValueIsEmptyBytes() bool {
	if m != nil {
		return m.ValueIsEmptyBytes
	}
	return false
}

type RedoDDLEvent struct {
	Type      int32      `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	StartTs   uint64     `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	CommitTs  uint64     `protobuf:"varint,3,opt,name=commit_ts,json=commitTs,proto3" json:"commit_ts,omitempty"`
	Query     string     `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	TableName *TableName `protobuf:"bytes,5,opt,name=tableName,proto3" json:"tableName,omitempty"`
}

func (m *RedoDDLEvent) Reset()         { *m = RedoDDLEvent{} }
func (m *RedoDDLEvent) String() string { return proto.CompactTextString(m) }
func (*RedoDDLEvent) ProtoMessage()    {}
func (*RedoDDLEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b460b14dea6144f7, []int{6}
}
func (m *RedoDDLEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedoDDLEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedoDDLEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedoDDLEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedoDDLEvent.Merge(m, src)
}
func (m *RedoDDLEvent) XXX_Size() int {
	return m.Size()
}
func (m *RedoDDLEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RedoDDLEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RedoDDLEvent proto.InternalMessageInfo

func (m *RedoDDLEvent) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RedoDDLEvent) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *RedoDDLEvent) GetCommitTs() uint64 {
	if m != nil {
		return m.CommitTs
	}
	return 0
}

func (m *RedoDDLEvent) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *RedoDDLEvent) GetTableName() *TableName {
	if m != nil {
		return m.TableName
	}
	return nil
}

func init() {
	proto.RegisterEnum("redo.Type", Type_name, Type_value)
	proto.RegisterType((*RedoLog)(nil), "redo.RedoLog")
	proto.RegisterType((*RedoRowChangedEvent)(nil), "redo.RedoRowChangedEvent")
	proto.RegisterType((*RowChangedEvent)(nil), "redo.RowChangedEvent")
	proto.RegisterType((*IntArr)(nil), "redo.IntArr")
	proto.RegisterType((*TableName)(nil), "redo.TableName")
	proto.RegisterType((*RedoColumn)(nil), "redo.RedoColumn")
	proto.RegisterType((*RedoDDLEvent)(nil), "redo.RedoDDLEvent")
}

func init() { proto.RegisterFile("RedoMsg.proto", fileDescriptor_b460b14dea6144f7) }

var fileDescriptor_b460b14dea6144f7 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xc6, 0x4e, 0x1c, 0x4f, 0x02, 0x2d, 0x4b, 0x41, 0x5b, 0x81, 0x2c, 0x63, 0x81, 0x30,
	0x45, 0x14, 0x11, 0x7e, 0x01, 0x6d, 0x7a, 0x88, 0x94, 0x22, 0xb4, 0xea, 0xdd, 0x72, 0xb3, 0x4b,
	0x6a, 0xc9, 0x5f, 0x78, 0xb7, 0x2d, 0x91, 0xf8, 0x11, 0xdc, 0x11, 0xe2, 0xe7, 0xc0, 0xb1, 0x47,
	0x8e, 0xa8, 0xfd, 0x23, 0x68, 0xc7, 0x4e, 0x1d, 0x55, 0x85, 0xdb, 0xcc, 0x7b, 0xcf, 0x3b, 0x6f,
	0xc7, 0xcf, 0x86, 0x3b, 0x5c, 0x8a, 0xe2, 0x50, 0x2d, 0x76, 0xcb, 0xaa, 0xd0, 0x05, 0xb5, 0x2b,
	0x29, 0x8a, 0xe0, 0x0b, 0x38, 0x06, 0x9e, 0x15, 0x0b, 0xfa, 0x12, 0xac, 0xaa, 0x38, 0x67, 0xc4,
	0x27, 0xe1, 0x70, 0xbc, 0xbd, 0x6b, 0xe8, 0x5d, 0xc3, 0xf1, 0xe2, 0x7c, 0xff, 0x24, 0xce, 0x17,
	0x52, 0x1c, 0x9c, 0xc9, 0x5c, 0x73, 0xa3, 0xa2, 0x4f, 0xc1, 0x12, 0x22, 0x65, 0x5d, 0x14, 0xd3,
	0x56, 0x3c, 0x99, 0xcc, 0x1a, 0x95, 0x10, 0x29, 0xf5, 0xc0, 0xd6, 0xcb, 0x52, 0x32, 0xcb, 0x27,
	0xe1, 0xdd, 0x31, 0xd4, 0xb2, 0xa3, 0x65, 0x29, 0x39, 0xe2, 0xc1, 0x77, 0x02, 0xf7, 0x6f, 0x19,
	0x41, 0x9f, 0xaf, 0x5b, 0x79, 0xd0, 0x9c, 0x7e, 0x9b, 0x8d, 0x37, 0x30, 0x2c, 0x2b, 0x19, 0xcd,
	0x8b, 0xf4, 0x34, 0xcb, 0x15, 0xeb, 0xfa, 0x56, 0x38, 0x1c, 0x6f, 0xb6, 0x76, 0xf6, 0x91, 0xe0,
	0x50, 0x56, 0xb2, 0x2e, 0x15, 0xdd, 0x01, 0x67, 0x25, 0xb7, 0xfe, 0x21, 0x5f, 0x09, 0x82, 0x6f,
	0x04, 0x36, 0x6e, 0x7a, 0xdb, 0x86, 0x81, 0xd2, 0x71, 0xa5, 0x23, 0xad, 0xd0, 0xa0, 0xcd, 0x1d,
	0xec, 0x8f, 0x14, 0x7d, 0x04, 0xee, 0xbc, 0xc8, 0xb2, 0x04, 0xb9, 0x2e, 0x72, 0x83, 0x1a, 0x38,
	0x52, 0xf4, 0x19, 0xf4, 0x74, 0x7c, 0x9c, 0xd6, 0xcb, 0x18, 0x8e, 0x37, 0x9a, 0x65, 0x18, 0xe8,
	0x7d, 0x9c, 0x49, 0x5e, 0xb3, 0xf4, 0x05, 0xb8, 0x49, 0x2e, 0xe4, 0xe7, 0x28, 0x11, 0x8a, 0xd9,
	0x68, 0x70, 0x54, 0x4b, 0xa7, 0xb9, 0x7e, 0x57, 0x55, 0x7c, 0x80, 0xf4, 0x54, 0xa8, 0xc0, 0x83,
	0x7e, 0x8d, 0xd1, 0x2d, 0xe8, 0x9d, 0xc5, 0xe9, 0xa9, 0x64, 0xc4, 0xb7, 0xc2, 0x1e, 0xaf, 0x9b,
	0xe0, 0x1c, 0xdc, 0xeb, 0xe3, 0xe9, 0x43, 0xe8, 0xab, 0xf9, 0x89, 0xcc, 0x62, 0x34, 0xed, 0xf2,
	0xa6, 0x33, 0x8f, 0xd6, 0xb6, 0xba, 0x08, 0x37, 0x2e, 0xb6, 0x61, 0x80, 0x45, 0x94, 0x08, 0xf4,
	0x6b, 0x71, 0x07, 0xfb, 0xa9, 0xa0, 0x4f, 0x60, 0x94, 0xa8, 0xa8, 0x8c, 0x2b, 0x9d, 0xe8, 0xa4,
	0xc8, 0x99, 0xed, 0x93, 0x70, 0xc0, 0x87, 0x89, 0xfa, 0xb0, 0x82, 0x82, 0x9f, 0x04, 0xa0, 0x5d,
	0x27, 0xa5, 0x60, 0xe7, 0x71, 0x26, 0x9b, 0xc1, 0x58, 0x1b, 0x0c, 0x93, 0x61, 0xa6, 0xf6, 0xea,
	0x34, 0x50, 0x06, 0xce, 0xfc, 0x24, 0xae, 0x94, 0xd4, 0x38, 0xd3, 0xe5, 0xab, 0x96, 0x3e, 0x36,
	0x8b, 0x4d, 0xd3, 0xf8, 0x7a, 0xa0, 0xcb, 0x5b, 0xc0, 0x9c, 0xf5, 0x31, 0x8d, 0x17, 0xac, 0x87,
	0x1b, 0xc7, 0xba, 0xdd, 0x48, 0xdf, 0x27, 0xe1, 0xa8, 0xd9, 0x08, 0x7d, 0x0d, 0x5b, 0x58, 0x44,
	0x89, 0x8a, 0x64, 0x56, 0xea, 0x65, 0x74, 0xbc, 0xd4, 0x52, 0x31, 0x07, 0xef, 0x70, 0x0f, 0xb9,
	0xa9, 0x3a, 0x30, 0xcc, 0x9e, 0x21, 0x82, 0x1f, 0x04, 0x46, 0xeb, 0xb1, 0xbe, 0xf6, 0x4d, 0xd6,
	0x7c, 0xaf, 0x27, 0xa2, 0xfb, 0x9f, 0x44, 0x58, 0x37, 0x12, 0xb1, 0x05, 0xbd, 0x4f, 0xa7, 0xb2,
	0x5a, 0x36, 0x37, 0xaa, 0x1b, 0xfa, 0x0a, 0x5c, 0xbd, 0x7a, 0x6b, 0x78, 0xa5, 0x5b, 0xb2, 0xd2,
	0x2a, 0x76, 0x18, 0xd8, 0xe6, 0x83, 0xa2, 0x0e, 0x58, 0x93, 0xc9, 0x6c, 0xb3, 0x83, 0xc5, 0xe1,
	0x6c, 0x93, 0xec, 0xb1, 0x5f, 0x97, 0x1e, 0xb9, 0xb8, 0xf4, 0xc8, 0x9f, 0x4b, 0x8f, 0x7c, 0xbd,
	0xf2, 0x3a, 0x17, 0x57, 0x5e, 0xe7, 0xf7, 0x95, 0xd7, 0x39, 0xee, 0xe3, 0x1f, 0xe0, 0xed, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x6f, 0x17, 0xa6, 0x12, 0x04, 0x00, 0x00,
}

func (m *RedoLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedoLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedoLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Ddl != nil {
		{
			size, err := m.Ddl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedoMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Row != nil {
		{
			size, err := m.Row.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedoMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedoRowChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedoRowChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedoRowChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRedoMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PreColumns) > 0 {
		for iNdEx := len(m.PreColumns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreColumns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRedoMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Row != nil {
		{
			size, err := m.Row.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedoMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RowChangedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowChangedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowChangedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexIds) > 0 {
		for iNdEx := len(m.IndexIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRedoMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Table != nil {
		{
			size, err := m.Table.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedoMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CommitTs != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTs != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IntArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntArr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntArr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA6 := make([]byte, len(m.Value)*10)
		var j5 int
		for _, num1 := range m.Value {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintRedoMsg(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TableName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPartition {
		i--
		if m.IsPartition {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TableId != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.TableId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Table) > 0 {
		i -= len(m.Table)
		copy(dAtA[i:], m.Table)
		i = encodeVarintRedoMsg(dAtA, i, uint64(len(m.Table)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintRedoMsg(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedoColumn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedoColumn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedoColumn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValueIsEmptyBytes {
		i--
		if m.ValueIsEmptyBytes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRedoMsg(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x32
	}
	if m.Flag != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Collation) > 0 {
		i -= len(m.Collation)
		copy(dAtA[i:], m.Collation)
		i = encodeVarintRedoMsg(dAtA, i, uint64(len(m.Collation)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Charset) > 0 {
		i -= len(m.Charset)
		copy(dAtA[i:], m.Charset)
		i = encodeVarintRedoMsg(dAtA, i, uint64(len(m.Charset)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRedoMsg(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedoDDLEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedoDDLEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedoDDLEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TableName != nil {
		{
			size, err := m.TableName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRedoMsg(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintRedoMsg(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.CommitTs != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.CommitTs))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTs != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintRedoMsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedoMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedoMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RedoLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if m.Ddl != nil {
		l = m.Ddl.Size()
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRedoMsg(uint64(m.Type))
	}
	return n
}

func (m *RedoRowChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Row != nil {
		l = m.Row.Size()
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if len(m.PreColumns) > 0 {
		for _, e := range m.PreColumns {
			l = e.Size()
			n += 1 + l + sovRedoMsg(uint64(l))
		}
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovRedoMsg(uint64(l))
		}
	}
	return n
}

func (m *RowChangedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTs != 0 {
		n += 1 + sovRedoMsg(uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		n += 1 + sovRedoMsg(uint64(m.CommitTs))
	}
	if m.Table != nil {
		l = m.Table.Size()
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if len(m.IndexIds) > 0 {
		for _, e := range m.IndexIds {
			l = e.Size()
			n += 1 + l + sovRedoMsg(uint64(l))
		}
	}
	return n
}

func (m *IntArr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		l = 0
		for _, e := range m.Value {
			l += sovRedoMsg(uint64(e))
		}
		n += 1 + sovRedoMsg(uint64(l)) + l
	}
	return n
}

func (m *TableName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if m.TableId != 0 {
		n += 1 + sovRedoMsg(uint64(m.TableId))
	}
	if m.IsPartition {
		n += 2
	}
	return n
}

func (m *RedoColumn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRedoMsg(uint64(m.Type))
	}
	l = len(m.Charset)
	if l > 0 {
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	l = len(m.Collation)
	if l > 0 {
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if m.Flag != 0 {
		n += 1 + sovRedoMsg(uint64(m.Flag))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if m.ValueIsEmptyBytes {
		n += 2
	}
	return n
}

func (m *RedoDDLEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRedoMsg(uint64(m.Type))
	}
	if m.StartTs != 0 {
		n += 1 + sovRedoMsg(uint64(m.StartTs))
	}
	if m.CommitTs != 0 {
		n += 1 + sovRedoMsg(uint64(m.CommitTs))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	if m.TableName != nil {
		l = m.TableName.Size()
		n += 1 + l + sovRedoMsg(uint64(l))
	}
	return n
}

func sovRedoMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedoMsg(x uint64) (n int) {
	return sovRedoMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RedoLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedoLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedoLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &RedoRowChangedEvent{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ddl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ddl == nil {
				m.Ddl = &RedoDDLEvent{}
			}
			if err := m.Ddl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedoRowChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedoRowChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedoRowChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Row", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Row == nil {
				m.Row = &RowChangedEvent{}
			}
			if err := m.Row.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreColumns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreColumns = append(m.PreColumns, &RedoColumn{})
			if err := m.PreColumns[len(m.PreColumns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &RedoColumn{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowChangedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowChangedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowChangedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Table == nil {
				m.Table = &TableName{}
			}
			if err := m.Table.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexIds = append(m.IndexIds, &IntArr{})
			if err := m.IndexIds[len(m.IndexIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedoMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedoMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRedoMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRedoMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Value) == 0 {
					m.Value = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRedoMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPartition", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPartition = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRedoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedoColumn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedoColumn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedoColumn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Charset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueIsEmptyBytes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValueIsEmptyBytes = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRedoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedoDDLEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedoDDLEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedoDDLEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTs", wireType)
			}
			m.CommitTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableName == nil {
				m.TableName = &TableName{}
			}
			if err := m.TableName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedoMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedoMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedoMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedoMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedoMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedoMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedoMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedoMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedoMsg = fmt.Errorf("proto: unexpected end of group")
)
