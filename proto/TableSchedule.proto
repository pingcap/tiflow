// Copyright 2022 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package pingcap.tiflow.cdc.schedulepb;
option go_package = "schedulepb";

import "gogoproto/gogo.proto";

message OwnerRevision { int64 revision = 1; }

message ProcessorEpoch { string epoch = 1; }

message Checkpoint {
    uint64 checkpoint_ts =
        1 [(gogoproto.casttype) = "github.com/pingcap/tiflow/cdc/model.Ts"];
    uint64 resolved_ts =
        2 [(gogoproto.casttype) = "github.com/pingcap/tiflow/cdc/model.Ts"];
}

message AddTableRequest {
    int64 table_id = 1
        [
            (gogoproto.casttype) = "github.com/pingcap/tiflow/cdc/model.TableID",
            (gogoproto.customname) = "TableID"
        ];
    bool is_secondary = 2;
    Checkpoint checkpoint = 3;
}

message RemoveTableRequest {
    int64 table_id = 1
        [
            (gogoproto.casttype) = "github.com/pingcap/tiflow/cdc/model.TableID",
            (gogoproto.customname) = "TableID"
        ];
}

message DispatchTableRequest {
    OwnerRevision owner_revision = 1;
    AddTableRequest add_table = 2;
    RemoveTableRequest remove_table = 3;
}

message AddTableResponse {
    int64 table_id = 1
        [
            (gogoproto.casttype) = "github.com/pingcap/tiflow/cdc/model.TableID",
            (gogoproto.customname) = "TableID"
        ];
    bool is_secondary = 2;
    Checkpoint checkpoint = 3;
    bool reject = 4;
}

message RemoveTableResponse {
    int64 table_id = 1
        [
            (gogoproto.casttype) = "github.com/pingcap/tiflow/cdc/model.TableID",
            (gogoproto.customname) = "TableID"
        ];
    Checkpoint checkpoint = 2;
}

message DispatchTableResponse {
    ProcessorEpoch processor_epoch = 1;

    AddTableResponse add_table = 2;
    RemoveTableResponse remove_table = 3;
}

message Announce { OwnerRevision owner_revision = 1; }

// TableState is the state of table repliction in processor.
//
//  ┌────────┐   ┌───────────┐   ┌──────────┐
//  │ Absent ├─> │ Preparing ├─> │ Prepared │
//  └────────┘   └───────────┘   └─────┬────┘
//                                     v
//  ┌─────────┐   ┌──────────┐   ┌─────────────┐
//  │ Stopped │ <─┤ Stopping │ <─┤ Replicating │
//  └─────────┘   └──────────┘   └─────────────┘
enum TableState {
    Unknown = 0;
    Absent = 1;
    Preparing = 2;
    Prepared = 3;
    Replicating = 4;
    Stopping = 5;
    Stopped = 6;
}

message TableStatus {
    int64 table_id = 1
        [
            (gogoproto.casttype) = "github.com/pingcap/tiflow/cdc/model.TableID",
            (gogoproto.customname) = "TableID"
        ];
    TableState state = 2;
    Checkpoint checkpoint = 3;
}

message Sync {
    ProcessorEpoch processor_epoch = 1;

    repeated TableStatus tables = 2;
}

enum MessageType {
    MsgUnknown = 0;
    MsgCheckpoint = 1;
    MsgDispatchTableRequest = 2;
    MsgDispatchTableResponse = 3;
    MsgAnnounce = 4;
    MsgSync = 5;
}

message Message {
    message Header {
        // The semantic version of the node that sent this message.
        string version = 1;
    }
    Header header = 1;
    MessageType msg_type = 2;
    string from = 3 [(gogoproto.casttype) =
                         "github.com/pingcap/tiflow/cdc/model.CaptureID"];
    string to = 4 [(gogoproto.casttype) =
                       "github.com/pingcap/tiflow/cdc/model.CaptureID"];
    DispatchTableRequest dispatch_table_request = 5;
    DispatchTableResponse dispatch_table_response = 6;
    Checkpoint checkpoint = 7;
    Announce announce = 8;
    Sync sync = 9;
}
