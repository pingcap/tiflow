// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: CraftBenchmark.proto

package benchmark

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Key struct {
	Ts        uint64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Schema    string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Table     string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	RowId     int64  `protobuf:"varint,4,opt,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	Type      uint32 `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Partition int64  `protobuf:"varint,6,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a6b0a2c8322bed, []int{0}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *Key) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Key) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Key) GetRowId() int64 {
	if m != nil {
		return m.RowId
	}
	return 0
}

func (m *Key) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Key) GetPartition() int64 {
	if m != nil {
		return m.Partition
	}
	return 0
}

type Column struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Flag  uint32 `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
	Value []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a6b0a2c8322bed, []int{1}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Column) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Column) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RowChanged struct {
	OldValue []*Column `protobuf:"bytes,1,rep,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue []*Column `protobuf:"bytes,2,rep,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (m *RowChanged) Reset()         { *m = RowChanged{} }
func (m *RowChanged) String() string { return proto.CompactTextString(m) }
func (*RowChanged) ProtoMessage()    {}
func (*RowChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a6b0a2c8322bed, []int{2}
}
func (m *RowChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowChanged.Merge(m, src)
}
func (m *RowChanged) XXX_Size() int {
	return m.Size()
}
func (m *RowChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_RowChanged.DiscardUnknown(m)
}

var xxx_messageInfo_RowChanged proto.InternalMessageInfo

func (m *RowChanged) GetOldValue() []*Column {
	if m != nil {
		return m.OldValue
	}
	return nil
}

func (m *RowChanged) GetNewValue() []*Column {
	if m != nil {
		return m.NewValue
	}
	return nil
}

type KeysColumnar struct {
	Ts        []uint64 `protobuf:"varint,1,rep,packed,name=ts,proto3" json:"ts,omitempty"`
	Schema    []string `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty"`
	Table     []string `protobuf:"bytes,3,rep,name=table,proto3" json:"table,omitempty"`
	RowId     []int64  `protobuf:"varint,4,rep,packed,name=row_id,json=rowId,proto3" json:"row_id,omitempty"`
	Type      []uint32 `protobuf:"varint,5,rep,packed,name=type,proto3" json:"type,omitempty"`
	Partition []int64  `protobuf:"varint,6,rep,packed,name=partition,proto3" json:"partition,omitempty"`
}

func (m *KeysColumnar) Reset()         { *m = KeysColumnar{} }
func (m *KeysColumnar) String() string { return proto.CompactTextString(m) }
func (*KeysColumnar) ProtoMessage()    {}
func (*KeysColumnar) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a6b0a2c8322bed, []int{3}
}
func (m *KeysColumnar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeysColumnar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeysColumnar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeysColumnar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeysColumnar.Merge(m, src)
}
func (m *KeysColumnar) XXX_Size() int {
	return m.Size()
}
func (m *KeysColumnar) XXX_DiscardUnknown() {
	xxx_messageInfo_KeysColumnar.DiscardUnknown(m)
}

var xxx_messageInfo_KeysColumnar proto.InternalMessageInfo

func (m *KeysColumnar) GetTs() []uint64 {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *KeysColumnar) GetSchema() []string {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *KeysColumnar) GetTable() []string {
	if m != nil {
		return m.Table
	}
	return nil
}

func (m *KeysColumnar) GetRowId() []int64 {
	if m != nil {
		return m.RowId
	}
	return nil
}

func (m *KeysColumnar) GetType() []uint32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *KeysColumnar) GetPartition() []int64 {
	if m != nil {
		return m.Partition
	}
	return nil
}

type ColumnsColumnar struct {
	Name        []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
	Type        []uint32 `protobuf:"varint,2,rep,packed,name=type,proto3" json:"type,omitempty"`
	WhereHandle []bool   `protobuf:"varint,3,rep,packed,name=where_handle,json=whereHandle,proto3" json:"where_handle,omitempty"`
	Flag        []uint32 `protobuf:"varint,4,rep,packed,name=flag,proto3" json:"flag,omitempty"`
	Value       [][]byte `protobuf:"bytes,5,rep,name=value,proto3" json:"value,omitempty"`
}

func (m *ColumnsColumnar) Reset()         { *m = ColumnsColumnar{} }
func (m *ColumnsColumnar) String() string { return proto.CompactTextString(m) }
func (*ColumnsColumnar) ProtoMessage()    {}
func (*ColumnsColumnar) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a6b0a2c8322bed, []int{4}
}
func (m *ColumnsColumnar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnsColumnar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnsColumnar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnsColumnar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnsColumnar.Merge(m, src)
}
func (m *ColumnsColumnar) XXX_Size() int {
	return m.Size()
}
func (m *ColumnsColumnar) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnsColumnar.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnsColumnar proto.InternalMessageInfo

func (m *ColumnsColumnar) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ColumnsColumnar) GetType() []uint32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ColumnsColumnar) GetWhereHandle() []bool {
	if m != nil {
		return m.WhereHandle
	}
	return nil
}

func (m *ColumnsColumnar) GetFlag() []uint32 {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *ColumnsColumnar) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RowChangedColumnar struct {
	OldValue []*ColumnsColumnar `protobuf:"bytes,1,rep,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	NewValue []*ColumnsColumnar `protobuf:"bytes,2,rep,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (m *RowChangedColumnar) Reset()         { *m = RowChangedColumnar{} }
func (m *RowChangedColumnar) String() string { return proto.CompactTextString(m) }
func (*RowChangedColumnar) ProtoMessage()    {}
func (*RowChangedColumnar) Descriptor() ([]byte, []int) {
	return fileDescriptor_14a6b0a2c8322bed, []int{5}
}
func (m *RowChangedColumnar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowChangedColumnar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RowChangedColumnar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RowChangedColumnar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowChangedColumnar.Merge(m, src)
}
func (m *RowChangedColumnar) XXX_Size() int {
	return m.Size()
}
func (m *RowChangedColumnar) XXX_DiscardUnknown() {
	xxx_messageInfo_RowChangedColumnar.DiscardUnknown(m)
}

var xxx_messageInfo_RowChangedColumnar proto.InternalMessageInfo

func (m *RowChangedColumnar) GetOldValue() []*ColumnsColumnar {
	if m != nil {
		return m.OldValue
	}
	return nil
}

func (m *RowChangedColumnar) GetNewValue() []*ColumnsColumnar {
	if m != nil {
		return m.NewValue
	}
	return nil
}

func init() {
	proto.RegisterType((*Key)(nil), "benchmark.Key")
	proto.RegisterType((*Column)(nil), "benchmark.Column")
	proto.RegisterType((*RowChanged)(nil), "benchmark.RowChanged")
	proto.RegisterType((*KeysColumnar)(nil), "benchmark.KeysColumnar")
	proto.RegisterType((*ColumnsColumnar)(nil), "benchmark.ColumnsColumnar")
	proto.RegisterType((*RowChangedColumnar)(nil), "benchmark.RowChangedColumnar")
}

func init() { proto.RegisterFile("CraftBenchmark.proto", fileDescriptor_14a6b0a2c8322bed) }

var fileDescriptor_14a6b0a2c8322bed = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0x86, 0x4d, 0x51, 0x16, 0xa2, 0x8b, 0x93, 0xa2, 0x44, 0x5a, 0xa8, 0x45, 0x21, 0xa8, 0x9e,
	0x34, 0x71, 0x68, 0x87, 0xec, 0x31, 0x0a, 0xa4, 0xc8, 0xc6, 0xa1, 0x43, 0x17, 0x83, 0x12, 0x19,
	0x4b, 0xa8, 0x4c, 0x1a, 0x34, 0x53, 0xc1, 0x2f, 0x90, 0xa9, 0x43, 0x97, 0xbe, 0x53, 0xc7, 0x8c,
	0x1d, 0x0b, 0xfb, 0x45, 0x0a, 0x51, 0x8e, 0x14, 0xc3, 0x4a, 0x37, 0xde, 0xf1, 0xbf, 0xc3, 0x8f,
	0xef, 0xc7, 0xc1, 0xc5, 0xcc, 0xf0, 0x5b, 0x7b, 0x25, 0x55, 0x5e, 0x2c, 0xb9, 0xf9, 0x46, 0x57,
	0x46, 0x5b, 0x4d, 0xc2, 0xec, 0xb1, 0x31, 0xfd, 0x81, 0x00, 0xdf, 0xc8, 0x0d, 0x39, 0x07, 0xcf,
	0xae, 0x23, 0x94, 0xa0, 0xd4, 0x67, 0x9e, 0x5d, 0x93, 0xd7, 0x10, 0xac, 0xf3, 0x42, 0x2e, 0x79,
	0xe4, 0x25, 0x28, 0x0d, 0xd9, 0xbe, 0x22, 0x17, 0x30, 0xb6, 0x3c, 0xab, 0x64, 0x84, 0x5d, 0xbb,
	0x2d, 0xc8, 0x2b, 0x08, 0x8c, 0xae, 0xe7, 0xa5, 0x88, 0xfc, 0x04, 0xa5, 0x98, 0x8d, 0x8d, 0xae,
	0x3f, 0x0b, 0x42, 0xc0, 0xb7, 0x9b, 0x95, 0x8c, 0xc6, 0x09, 0x4a, 0xcf, 0x98, 0x7b, 0x93, 0x77,
	0x10, 0xae, 0xb8, 0xb1, 0xa5, 0x2d, 0xb5, 0x8a, 0x02, 0xa7, 0xee, 0x1b, 0xd3, 0xaf, 0x10, 0xcc,
	0x74, 0x75, 0xb7, 0x54, 0xcd, 0xac, 0xe2, 0x4b, 0xe9, 0x2c, 0x85, 0xcc, 0xbd, 0xbb, 0x7d, 0xde,
	0x93, 0x7d, 0x04, 0xfc, 0xdb, 0x8a, 0x2f, 0x9c, 0x9f, 0x33, 0xe6, 0xde, 0x8d, 0xc9, 0xef, 0xbc,
	0xba, 0x93, 0xce, 0xcd, 0x84, 0xb5, 0xc5, 0xb4, 0x02, 0x60, 0xba, 0x9e, 0x15, 0x5c, 0x2d, 0xa4,
	0x20, 0x14, 0x42, 0x5d, 0x89, 0x79, 0xab, 0x43, 0x09, 0x4e, 0x4f, 0x3f, 0xbc, 0xa4, 0x1d, 0x17,
	0xda, 0xba, 0x60, 0x27, 0xba, 0x12, 0x5f, 0x1a, 0x49, 0xa3, 0x57, 0xb2, 0xde, 0xeb, 0xbd, 0x67,
	0xf5, 0x4a, 0xd6, 0x4e, 0x3f, 0xfd, 0x85, 0x60, 0x72, 0x23, 0x37, 0xeb, 0xf6, 0x83, 0x9b, 0x8e,
	0x30, 0x1e, 0x20, 0x8c, 0x87, 0x09, 0xe3, 0x61, 0xc2, 0x78, 0x88, 0x30, 0x7e, 0x8e, 0x30, 0x3e,
	0x24, 0x7c, 0x8f, 0xe0, 0x45, 0xeb, 0xa9, 0xb7, 0xd6, 0xb3, 0xc6, 0x03, 0xac, 0xfb, 0xcd, 0xef,
	0x61, 0x52, 0x17, 0xd2, 0xc8, 0x79, 0xc1, 0x95, 0xd8, 0x3b, 0x3c, 0x61, 0xa7, 0xae, 0x77, 0xed,
	0x5a, 0x5d, 0x1c, 0x7e, 0x3b, 0x76, 0x18, 0x47, 0xe3, 0xb2, 0x8b, 0xe3, 0x1e, 0x01, 0xe9, 0xf3,
	0xe8, 0xbc, 0x5c, 0x1e, 0xe7, 0xf2, 0xf6, 0x88, 0x73, 0x67, 0xfd, 0x49, 0x40, 0x97, 0xc7, 0x01,
	0xfd, 0x77, 0xf0, 0x31, 0xa9, 0xab, 0x4f, 0xbf, 0xb7, 0x31, 0x7a, 0xd8, 0xc6, 0xe8, 0xef, 0x36,
	0x46, 0x3f, 0x77, 0xf1, 0xe8, 0x61, 0x17, 0x8f, 0xfe, 0xec, 0xe2, 0x11, 0xbc, 0x29, 0x35, 0xb5,
	0xa5, 0xc8, 0x68, 0x56, 0x2e, 0x04, 0xb7, 0x9c, 0xe6, 0x22, 0xa7, 0xb9, 0xbb, 0xa8, 0xf3, 0xc3,
	0xc3, 0xba, 0x46, 0x59, 0xe0, 0x6e, 0xeb, 0xe3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0xb1,
	0x59, 0x1d, 0x73, 0x03, 0x00, 0x00,
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Partition != 0 {
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(m.Partition))
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.RowId != 0 {
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(m.RowId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Table) > 0 {
		i -= len(m.Table)
		copy(dAtA[i:], m.Table)
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Table)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ts != 0 {
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.Flag != 0 {
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(m.Flag))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RowChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewValue) > 0 {
		for iNdEx := len(m.NewValue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewValue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCraftBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OldValue) > 0 {
		for iNdEx := len(m.OldValue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OldValue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCraftBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeysColumnar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeysColumnar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeysColumnar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Partition) > 0 {
		dAtA2 := make([]byte, len(m.Partition)*10)
		var j1 int
		for _, num1 := range m.Partition {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		dAtA4 := make([]byte, len(m.Type)*10)
		var j3 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RowId) > 0 {
		dAtA6 := make([]byte, len(m.RowId)*10)
		var j5 int
		for _, num1 := range m.RowId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Table) > 0 {
		for iNdEx := len(m.Table) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Table[iNdEx])
			copy(dAtA[i:], m.Table[iNdEx])
			i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Table[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Schema) > 0 {
		for iNdEx := len(m.Schema) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schema[iNdEx])
			copy(dAtA[i:], m.Schema[iNdEx])
			i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Schema[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Ts) > 0 {
		dAtA8 := make([]byte, len(m.Ts)*10)
		var j7 int
		for _, num := range m.Ts {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ColumnsColumnar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnsColumnar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnsColumnar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Value[iNdEx])
			copy(dAtA[i:], m.Value[iNdEx])
			i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Value[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Flag) > 0 {
		dAtA10 := make([]byte, len(m.Flag)*10)
		var j9 int
		for _, num := range m.Flag {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WhereHandle) > 0 {
		for iNdEx := len(m.WhereHandle) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.WhereHandle[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.WhereHandle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		dAtA12 := make([]byte, len(m.Type)*10)
		var j11 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintCraftBenchmark(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintCraftBenchmark(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RowChangedColumnar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowChangedColumnar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowChangedColumnar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewValue) > 0 {
		for iNdEx := len(m.NewValue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewValue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCraftBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OldValue) > 0 {
		for iNdEx := len(m.OldValue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OldValue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCraftBenchmark(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCraftBenchmark(dAtA []byte, offset int, v uint64) int {
	offset -= sovCraftBenchmark(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovCraftBenchmark(uint64(m.Ts))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovCraftBenchmark(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovCraftBenchmark(uint64(l))
	}
	if m.RowId != 0 {
		n += 1 + sovCraftBenchmark(uint64(m.RowId))
	}
	if m.Type != 0 {
		n += 1 + sovCraftBenchmark(uint64(m.Type))
	}
	if m.Partition != 0 {
		n += 1 + sovCraftBenchmark(uint64(m.Partition))
	}
	return n
}

func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCraftBenchmark(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCraftBenchmark(uint64(m.Type))
	}
	if m.Flag != 0 {
		n += 1 + sovCraftBenchmark(uint64(m.Flag))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCraftBenchmark(uint64(l))
	}
	return n
}

func (m *RowChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OldValue) > 0 {
		for _, e := range m.OldValue {
			l = e.Size()
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	if len(m.NewValue) > 0 {
		for _, e := range m.NewValue {
			l = e.Size()
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	return n
}

func (m *KeysColumnar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ts) > 0 {
		l = 0
		for _, e := range m.Ts {
			l += sovCraftBenchmark(uint64(e))
		}
		n += 1 + sovCraftBenchmark(uint64(l)) + l
	}
	if len(m.Schema) > 0 {
		for _, s := range m.Schema {
			l = len(s)
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	if len(m.Table) > 0 {
		for _, s := range m.Table {
			l = len(s)
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	if len(m.RowId) > 0 {
		l = 0
		for _, e := range m.RowId {
			l += sovCraftBenchmark(uint64(e))
		}
		n += 1 + sovCraftBenchmark(uint64(l)) + l
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovCraftBenchmark(uint64(e))
		}
		n += 1 + sovCraftBenchmark(uint64(l)) + l
	}
	if len(m.Partition) > 0 {
		l = 0
		for _, e := range m.Partition {
			l += sovCraftBenchmark(uint64(e))
		}
		n += 1 + sovCraftBenchmark(uint64(l)) + l
	}
	return n
}

func (m *ColumnsColumnar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovCraftBenchmark(uint64(e))
		}
		n += 1 + sovCraftBenchmark(uint64(l)) + l
	}
	if len(m.WhereHandle) > 0 {
		n += 1 + sovCraftBenchmark(uint64(len(m.WhereHandle))) + len(m.WhereHandle)*1
	}
	if len(m.Flag) > 0 {
		l = 0
		for _, e := range m.Flag {
			l += sovCraftBenchmark(uint64(e))
		}
		n += 1 + sovCraftBenchmark(uint64(l)) + l
	}
	if len(m.Value) > 0 {
		for _, b := range m.Value {
			l = len(b)
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	return n
}

func (m *RowChangedColumnar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OldValue) > 0 {
		for _, e := range m.OldValue {
			l = e.Size()
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	if len(m.NewValue) > 0 {
		for _, e := range m.NewValue {
			l = e.Size()
			n += 1 + l + sovCraftBenchmark(uint64(l))
		}
	}
	return n
}

func sovCraftBenchmark(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCraftBenchmark(x uint64) (n int) {
	return sovCraftBenchmark(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCraftBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowId", wireType)
			}
			m.RowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCraftBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCraftBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCraftBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCraftBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldValue = append(m.OldValue, &Column{})
			if err := m.OldValue[len(m.OldValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewValue = append(m.NewValue, &Column{})
			if err := m.NewValue[len(m.NewValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCraftBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeysColumnar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCraftBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeysColumnar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeysColumnar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ts = append(m.Ts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ts) == 0 {
					m.Ts = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCraftBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ts = append(m.Ts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = append(m.Schema, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = append(m.Table, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RowId = append(m.RowId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RowId) == 0 {
					m.RowId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCraftBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RowId = append(m.RowId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RowId", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCraftBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Partition = append(m.Partition, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Partition) == 0 {
					m.Partition = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCraftBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Partition = append(m.Partition, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCraftBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColumnsColumnar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCraftBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnsColumnar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnsColumnar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCraftBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhereHandle = append(m.WhereHandle, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.WhereHandle) == 0 {
					m.WhereHandle = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCraftBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhereHandle = append(m.WhereHandle, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhereHandle", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flag = append(m.Flag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCraftBenchmark
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCraftBenchmark
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Flag) == 0 {
					m.Flag = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCraftBenchmark
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flag = append(m.Flag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, make([]byte, postIndex-iNdEx))
			copy(m.Value[len(m.Value)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCraftBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowChangedColumnar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCraftBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowChangedColumnar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowChangedColumnar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldValue = append(m.OldValue, &ColumnsColumnar{})
			if err := m.OldValue[len(m.OldValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewValue = append(m.NewValue, &ColumnsColumnar{})
			if err := m.NewValue[len(m.NewValue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCraftBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCraftBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCraftBenchmark(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCraftBenchmark
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCraftBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCraftBenchmark
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCraftBenchmark
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCraftBenchmark
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCraftBenchmark        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCraftBenchmark          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCraftBenchmark = fmt.Errorf("proto: unexpected end of group")
)
