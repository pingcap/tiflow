// Code generated by MockGen. DO NOT EDIT.
// Source: cdc/capture/capture_info_provider.go

// Package mock_capture is a generated GoMock package.
package mock_capture

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pingcap/tiflow/cdc/model"
	owner "github.com/pingcap/tiflow/cdc/owner"
	etcd "github.com/pingcap/tiflow/pkg/etcd"
	upstream "github.com/pingcap/tiflow/pkg/upstream"
)

// MockCaptureInfoProvider is a mock of CaptureInfoProvider interface.
type MockCaptureInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCaptureInfoProviderMockRecorder
}

// MockCaptureInfoProviderMockRecorder is the mock recorder for MockCaptureInfoProvider.
type MockCaptureInfoProviderMockRecorder struct {
	mock *MockCaptureInfoProvider
}

// NewMockCaptureInfoProvider creates a new mock instance.
func NewMockCaptureInfoProvider(ctrl *gomock.Controller) *MockCaptureInfoProvider {
	mock := &MockCaptureInfoProvider{ctrl: ctrl}
	mock.recorder = &MockCaptureInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptureInfoProvider) EXPECT() *MockCaptureInfoProviderMockRecorder {
	return m.recorder
}

// GetEtcdClient mocks base method.
func (m *MockCaptureInfoProvider) GetEtcdClient() etcd.CDCEtcdClientForAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtcdClient")
	ret0, _ := ret[0].(etcd.CDCEtcdClientForAPI)
	return ret0
}

// GetEtcdClient indicates an expected call of GetEtcdClient.
func (mr *MockCaptureInfoProviderMockRecorder) GetEtcdClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtcdClient", reflect.TypeOf((*MockCaptureInfoProvider)(nil).GetEtcdClient))
}

// GetOwnerCaptureInfo mocks base method.
func (m *MockCaptureInfoProvider) GetOwnerCaptureInfo(ctx context.Context) (*model.CaptureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerCaptureInfo", ctx)
	ret0, _ := ret[0].(*model.CaptureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerCaptureInfo indicates an expected call of GetOwnerCaptureInfo.
func (mr *MockCaptureInfoProviderMockRecorder) GetOwnerCaptureInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerCaptureInfo", reflect.TypeOf((*MockCaptureInfoProvider)(nil).GetOwnerCaptureInfo), ctx)
}

// GetUpstreamManager mocks base method.
func (m *MockCaptureInfoProvider) GetUpstreamManager() *upstream.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstreamManager")
	ret0, _ := ret[0].(*upstream.Manager)
	return ret0
}

// GetUpstreamManager indicates an expected call of GetUpstreamManager.
func (mr *MockCaptureInfoProviderMockRecorder) GetUpstreamManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstreamManager", reflect.TypeOf((*MockCaptureInfoProvider)(nil).GetUpstreamManager))
}

// Info mocks base method.
func (m *MockCaptureInfoProvider) Info() (model.CaptureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(model.CaptureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockCaptureInfoProviderMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCaptureInfoProvider)(nil).Info))
}

// IsOwner mocks base method.
func (m *MockCaptureInfoProvider) IsOwner() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockCaptureInfoProviderMockRecorder) IsOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockCaptureInfoProvider)(nil).IsOwner))
}

// IsReady mocks base method.
func (m *MockCaptureInfoProvider) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockCaptureInfoProviderMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockCaptureInfoProvider)(nil).IsReady))
}

// StatusProvider mocks base method.
func (m *MockCaptureInfoProvider) StatusProvider() owner.StatusProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusProvider")
	ret0, _ := ret[0].(owner.StatusProvider)
	return ret0
}

// StatusProvider indicates an expected call of StatusProvider.
func (mr *MockCaptureInfoProviderMockRecorder) StatusProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusProvider", reflect.TypeOf((*MockCaptureInfoProvider)(nil).StatusProvider))
}
