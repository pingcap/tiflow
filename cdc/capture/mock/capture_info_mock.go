// Code generated by MockGen. DO NOT EDIT.
// Source: cdc/capture/info_for_api.go

// Package mock_capture is a generated GoMock package.
package mock_capture

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pingcap/tiflow/cdc/model"
	owner "github.com/pingcap/tiflow/cdc/owner"
	etcd "github.com/pingcap/tiflow/pkg/etcd"
	upstream "github.com/pingcap/tiflow/pkg/upstream"
)

// MockInfoForAPI is a mock of InfoForAPI interface.
type MockInfoForAPI struct {
	ctrl     *gomock.Controller
	recorder *MockInfoForAPIMockRecorder
}

// MockInfoForAPIMockRecorder is the mock recorder for MockInfoForAPI.
type MockInfoForAPIMockRecorder struct {
	mock *MockInfoForAPI
}

// NewMockInfoForAPI creates a new mock instance.
func NewMockInfoForAPI(ctrl *gomock.Controller) *MockInfoForAPI {
	mock := &MockInfoForAPI{ctrl: ctrl}
	mock.recorder = &MockInfoForAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoForAPI) EXPECT() *MockInfoForAPIMockRecorder {
	return m.recorder
}

// GetEtcdClient mocks base method.
func (m *MockInfoForAPI) GetEtcdClient() etcd.CDCEtcdClientForAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtcdClient")
	ret0, _ := ret[0].(etcd.CDCEtcdClientForAPI)
	return ret0
}

// GetEtcdClient indicates an expected call of GetEtcdClient.
func (mr *MockInfoForAPIMockRecorder) GetEtcdClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtcdClient", reflect.TypeOf((*MockInfoForAPI)(nil).GetEtcdClient))
}

// GetOwner mocks base method.
func (m *MockInfoForAPI) GetOwner() (owner.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner")
	ret0, _ := ret[0].(owner.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockInfoForAPIMockRecorder) GetOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockInfoForAPI)(nil).GetOwner))
}

// GetOwnerCaptureInfo mocks base method.
func (m *MockInfoForAPI) GetOwnerCaptureInfo(ctx context.Context) (*model.CaptureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnerCaptureInfo", ctx)
	ret0, _ := ret[0].(*model.CaptureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnerCaptureInfo indicates an expected call of GetOwnerCaptureInfo.
func (mr *MockInfoForAPIMockRecorder) GetOwnerCaptureInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnerCaptureInfo", reflect.TypeOf((*MockInfoForAPI)(nil).GetOwnerCaptureInfo), ctx)
}

// GetUpstreamManager mocks base method.
func (m *MockInfoForAPI) GetUpstreamManager() *upstream.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstreamManager")
	ret0, _ := ret[0].(*upstream.Manager)
	return ret0
}

// GetUpstreamManager indicates an expected call of GetUpstreamManager.
func (mr *MockInfoForAPIMockRecorder) GetUpstreamManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstreamManager", reflect.TypeOf((*MockInfoForAPI)(nil).GetUpstreamManager))
}

// Info mocks base method.
func (m *MockInfoForAPI) Info() (model.CaptureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(model.CaptureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockInfoForAPIMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockInfoForAPI)(nil).Info))
}

// IsOwner mocks base method.
func (m *MockInfoForAPI) IsOwner() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockInfoForAPIMockRecorder) IsOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockInfoForAPI)(nil).IsOwner))
}

// IsReady mocks base method.
func (m *MockInfoForAPI) IsReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReady indicates an expected call of IsReady.
func (mr *MockInfoForAPIMockRecorder) IsReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReady", reflect.TypeOf((*MockInfoForAPI)(nil).IsReady))
}

// StatusProvider mocks base method.
func (m *MockInfoForAPI) StatusProvider() owner.StatusProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusProvider")
	ret0, _ := ret[0].(owner.StatusProvider)
	return ret0
}

// StatusProvider indicates an expected call of StatusProvider.
func (mr *MockInfoForAPIMockRecorder) StatusProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusProvider", reflect.TypeOf((*MockInfoForAPI)(nil).StatusProvider))
}
