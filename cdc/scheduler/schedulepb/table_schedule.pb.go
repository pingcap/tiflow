// Copyright 2022 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: scheduler/schedulepb/table_schedule.proto

package schedulepb

import (
	_ "github.com/gogo/protobuf/gogoproto"
	tablepb "github.com/pingcap/tiflow/cdc/processor/tablepb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_MsgUnknown               MessageType = 0
	MessageType_MsgDispatchTableRequest  MessageType = 1
	MessageType_MsgDispatchTableResponse MessageType = 2
	MessageType_MsgHeartbeat             MessageType = 3
	MessageType_MsgHeartbeatResponse     MessageType = 4
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MsgUnknown",
		1: "MsgDispatchTableRequest",
		2: "MsgDispatchTableResponse",
		3: "MsgHeartbeat",
		4: "MsgHeartbeatResponse",
	}
	MessageType_value = map[string]int32{
		"MsgUnknown":               0,
		"MsgDispatchTableRequest":  1,
		"MsgDispatchTableResponse": 2,
		"MsgHeartbeat":             3,
		"MsgHeartbeatResponse":     4,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_schedulepb_table_schedule_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_scheduler_schedulepb_table_schedule_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{0}
}

type AddTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     int64               `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Span        *tablepb.Span       `protobuf:"bytes,4,opt,name=span,proto3" json:"span,omitempty"`
	IsSecondary bool                `protobuf:"varint,2,opt,name=is_secondary,json=isSecondary,proto3" json:"is_secondary,omitempty"`
	Checkpoint  *tablepb.Checkpoint `protobuf:"bytes,3,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *AddTableRequest) Reset() {
	*x = AddTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTableRequest) ProtoMessage() {}

func (x *AddTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTableRequest.ProtoReflect.Descriptor instead.
func (*AddTableRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{0}
}

func (x *AddTableRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *AddTableRequest) GetSpan() *tablepb.Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *AddTableRequest) GetIsSecondary() bool {
	if x != nil {
		return x.IsSecondary
	}
	return false
}

func (x *AddTableRequest) GetCheckpoint() *tablepb.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

type RemoveTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId int64         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Span    *tablepb.Span `protobuf:"bytes,2,opt,name=span,proto3" json:"span,omitempty"`
}

func (x *RemoveTableRequest) Reset() {
	*x = RemoveTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableRequest) ProtoMessage() {}

func (x *RemoveTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableRequest.ProtoReflect.Descriptor instead.
func (*RemoveTableRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{1}
}

func (x *RemoveTableRequest) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *RemoveTableRequest) GetSpan() *tablepb.Span {
	if x != nil {
		return x.Span
	}
	return nil
}

type DispatchTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*DispatchTableRequest_AddTable
	//	*DispatchTableRequest_RemoveTable
	Request isDispatchTableRequest_Request `protobuf_oneof:"request"`
}

func (x *DispatchTableRequest) Reset() {
	*x = DispatchTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchTableRequest) ProtoMessage() {}

func (x *DispatchTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchTableRequest.ProtoReflect.Descriptor instead.
func (*DispatchTableRequest) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{2}
}

func (m *DispatchTableRequest) GetRequest() isDispatchTableRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *DispatchTableRequest) GetAddTable() *AddTableRequest {
	if x, ok := x.GetRequest().(*DispatchTableRequest_AddTable); ok {
		return x.AddTable
	}
	return nil
}

func (x *DispatchTableRequest) GetRemoveTable() *RemoveTableRequest {
	if x, ok := x.GetRequest().(*DispatchTableRequest_RemoveTable); ok {
		return x.RemoveTable
	}
	return nil
}

type isDispatchTableRequest_Request interface {
	isDispatchTableRequest_Request()
}

type DispatchTableRequest_AddTable struct {
	AddTable *AddTableRequest `protobuf:"bytes,1,opt,name=add_table,json=addTable,proto3,oneof"`
}

type DispatchTableRequest_RemoveTable struct {
	RemoveTable *RemoveTableRequest `protobuf:"bytes,2,opt,name=remove_table,json=removeTable,proto3,oneof"`
}

func (*DispatchTableRequest_AddTable) isDispatchTableRequest_Request() {}

func (*DispatchTableRequest_RemoveTable) isDispatchTableRequest_Request() {}

type AddTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *tablepb.TableStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Checkpoint *tablepb.Checkpoint  `protobuf:"bytes,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *AddTableResponse) Reset() {
	*x = AddTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTableResponse) ProtoMessage() {}

func (x *AddTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTableResponse.ProtoReflect.Descriptor instead.
func (*AddTableResponse) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{3}
}

func (x *AddTableResponse) GetStatus() *tablepb.TableStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddTableResponse) GetCheckpoint() *tablepb.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

type RemoveTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *tablepb.TableStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Checkpoint *tablepb.Checkpoint  `protobuf:"bytes,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *RemoveTableResponse) Reset() {
	*x = RemoveTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableResponse) ProtoMessage() {}

func (x *RemoveTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableResponse.ProtoReflect.Descriptor instead.
func (*RemoveTableResponse) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveTableResponse) GetStatus() *tablepb.TableStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RemoveTableResponse) GetCheckpoint() *tablepb.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

type DispatchTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DispatchTableResponse_AddTable
	//	*DispatchTableResponse_RemoveTable
	Response isDispatchTableResponse_Response `protobuf_oneof:"response"`
}

func (x *DispatchTableResponse) Reset() {
	*x = DispatchTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatchTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatchTableResponse) ProtoMessage() {}

func (x *DispatchTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatchTableResponse.ProtoReflect.Descriptor instead.
func (*DispatchTableResponse) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{5}
}

func (m *DispatchTableResponse) GetResponse() isDispatchTableResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DispatchTableResponse) GetAddTable() *AddTableResponse {
	if x, ok := x.GetResponse().(*DispatchTableResponse_AddTable); ok {
		return x.AddTable
	}
	return nil
}

func (x *DispatchTableResponse) GetRemoveTable() *RemoveTableResponse {
	if x, ok := x.GetResponse().(*DispatchTableResponse_RemoveTable); ok {
		return x.RemoveTable
	}
	return nil
}

type isDispatchTableResponse_Response interface {
	isDispatchTableResponse_Response()
}

type DispatchTableResponse_AddTable struct {
	AddTable *AddTableResponse `protobuf:"bytes,1,opt,name=add_table,json=addTable,proto3,oneof"`
}

type DispatchTableResponse_RemoveTable struct {
	RemoveTable *RemoveTableResponse `protobuf:"bytes,2,opt,name=remove_table,json=removeTable,proto3,oneof"`
}

func (*DispatchTableResponse_AddTable) isDispatchTableResponse_Response() {}

func (*DispatchTableResponse_RemoveTable) isDispatchTableResponse_Response() {}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIds   []int64         `protobuf:"varint,1,rep,packed,name=table_ids,json=tableIds,proto3" json:"table_ids,omitempty"`
	IsStopping bool            `protobuf:"varint,2,opt,name=is_stopping,json=isStopping,proto3" json:"is_stopping,omitempty"`
	Spans      []*tablepb.Span `protobuf:"bytes,3,rep,name=spans,proto3" json:"spans,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{6}
}

func (x *Heartbeat) GetTableIds() []int64 {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *Heartbeat) GetIsStopping() bool {
	if x != nil {
		return x.IsStopping
	}
	return false
}

func (x *Heartbeat) GetSpans() []*tablepb.Span {
	if x != nil {
		return x.Spans
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables   []*tablepb.TableStatus `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	Liveness int32                  `protobuf:"varint,2,opt,name=liveness,proto3" json:"liveness,omitempty"`
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{7}
}

func (x *HeartbeatResponse) GetTables() []*tablepb.TableStatus {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *HeartbeatResponse) GetLiveness() int32 {
	if x != nil {
		return x.Liveness
	}
	return 0
}

type OwnerRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision int64 `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *OwnerRevision) Reset() {
	*x = OwnerRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerRevision) ProtoMessage() {}

func (x *OwnerRevision) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerRevision.ProtoReflect.Descriptor instead.
func (*OwnerRevision) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{8}
}

func (x *OwnerRevision) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

type ProcessorEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch string `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ProcessorEpoch) Reset() {
	*x = ProcessorEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorEpoch) ProtoMessage() {}

func (x *ProcessorEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorEpoch.ProtoReflect.Descriptor instead.
func (*ProcessorEpoch) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessorEpoch) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header                *Message_Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MsgType               MessageType            `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3,enum=pingcap.tiflow.cdc.scheduler.schedulepb.MessageType" json:"msg_type,omitempty"`
	From                  string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                    string                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	DispatchTableRequest  *DispatchTableRequest  `protobuf:"bytes,5,opt,name=dispatch_table_request,json=dispatchTableRequest,proto3" json:"dispatch_table_request,omitempty"`
	DispatchTableResponse *DispatchTableResponse `protobuf:"bytes,6,opt,name=dispatch_table_response,json=dispatchTableResponse,proto3" json:"dispatch_table_response,omitempty"`
	Heartbeat             *Heartbeat             `protobuf:"bytes,7,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	HeartbeatResponse     *HeartbeatResponse     `protobuf:"bytes,8,opt,name=heartbeat_response,json=heartbeatResponse,proto3" json:"heartbeat_response,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{10}
}

func (x *Message) GetHeader() *Message_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Message) GetMsgType() MessageType {
	if x != nil {
		return x.MsgType
	}
	return MessageType_MsgUnknown
}

func (x *Message) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Message) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Message) GetDispatchTableRequest() *DispatchTableRequest {
	if x != nil {
		return x.DispatchTableRequest
	}
	return nil
}

func (x *Message) GetDispatchTableResponse() *DispatchTableResponse {
	if x != nil {
		return x.DispatchTableResponse
	}
	return nil
}

func (x *Message) GetHeartbeat() *Heartbeat {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

func (x *Message) GetHeartbeatResponse() *HeartbeatResponse {
	if x != nil {
		return x.HeartbeatResponse
	}
	return nil
}

type Message_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The semantic version of the node that sent this message.
	Version        string          `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	OwnerRevision  *OwnerRevision  `protobuf:"bytes,2,opt,name=owner_revision,json=ownerRevision,proto3" json:"owner_revision,omitempty"`
	ProcessorEpoch *ProcessorEpoch `protobuf:"bytes,3,opt,name=processor_epoch,json=processorEpoch,proto3" json:"processor_epoch,omitempty"`
}

func (x *Message_Header) Reset() {
	*x = Message_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Header) ProtoMessage() {}

func (x *Message_Header) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_schedulepb_table_schedule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Header.ProtoReflect.Descriptor instead.
func (*Message_Header) Descriptor() ([]byte, []int) {
	return file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Message_Header) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Message_Header) GetOwnerRevision() *OwnerRevision {
	if x != nil {
		return x.OwnerRevision
	}
	return nil
}

func (x *Message_Header) GetProcessorEpoch() *ProcessorEpoch {
	if x != nil {
		return x.ProcessorEpoch
	}
	return nil
}

var File_scheduler_schedulepb_table_schedule_proto protoreflect.FileDescriptor

var file_scheduler_schedulepb_table_schedule_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x70, 0x69, 0x6e,
	0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x70, 0x62, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x02, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x3a, 0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63,
	0x64, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0xe2, 0xde, 0x1f, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x56, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3a,
	0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x64,
	0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0xe2,
	0xde, 0x1f, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e,
	0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0xb8, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63,
	0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61,
	0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x15,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63,
	0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x61, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e,
	0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce,
	0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x58, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42,
	0x3b, 0xfa, 0xde, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63,
	0x64, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0xe2, 0xde, 0x1f, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70,
	0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x22,
	0xb2, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e,
	0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x30, 0xfa, 0xde, 0x1f, 0x2c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70,
	0x2f, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x22, 0x2b, 0x0a, 0x0d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0xd1, 0x07, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e,
	0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63,
	0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2f, 0x74, 0x69,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x41,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xfa, 0xde, 0x1f, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63,
	0x61, 0x70, 0x2f, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x73, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61,
	0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70,
	0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x69, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70,
	0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xef, 0x01, 0x0a, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x63, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63,
	0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x70, 0x62, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x70, 0x2e, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x2a, 0xfb, 0x01,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x1a, 0x0e, 0x8a,
	0x9d, 0x20, 0x0a, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a,
	0x17, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x1a, 0x1b, 0x8a, 0x9d, 0x20, 0x17,
	0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x73, 0x67, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x02, 0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x4d, 0x73, 0x67, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x10, 0x03, 0x1a, 0x10, 0x8a, 0x9d, 0x20, 0x0c, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x04, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x38, 0x5a, 0x32, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61,
	0x70, 0x2f, 0x74, 0x69, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70,
	0x62, 0xd0, 0xe1, 0x1e, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduler_schedulepb_table_schedule_proto_rawDescOnce sync.Once
	file_scheduler_schedulepb_table_schedule_proto_rawDescData = file_scheduler_schedulepb_table_schedule_proto_rawDesc
)

func file_scheduler_schedulepb_table_schedule_proto_rawDescGZIP() []byte {
	file_scheduler_schedulepb_table_schedule_proto_rawDescOnce.Do(func() {
		file_scheduler_schedulepb_table_schedule_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_schedulepb_table_schedule_proto_rawDescData)
	})
	return file_scheduler_schedulepb_table_schedule_proto_rawDescData
}

var file_scheduler_schedulepb_table_schedule_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_scheduler_schedulepb_table_schedule_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_scheduler_schedulepb_table_schedule_proto_goTypes = []interface{}{
	(MessageType)(0),              // 0: pingcap.tiflow.cdc.scheduler.schedulepb.MessageType
	(*AddTableRequest)(nil),       // 1: pingcap.tiflow.cdc.scheduler.schedulepb.AddTableRequest
	(*RemoveTableRequest)(nil),    // 2: pingcap.tiflow.cdc.scheduler.schedulepb.RemoveTableRequest
	(*DispatchTableRequest)(nil),  // 3: pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableRequest
	(*AddTableResponse)(nil),      // 4: pingcap.tiflow.cdc.scheduler.schedulepb.AddTableResponse
	(*RemoveTableResponse)(nil),   // 5: pingcap.tiflow.cdc.scheduler.schedulepb.RemoveTableResponse
	(*DispatchTableResponse)(nil), // 6: pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableResponse
	(*Heartbeat)(nil),             // 7: pingcap.tiflow.cdc.scheduler.schedulepb.Heartbeat
	(*HeartbeatResponse)(nil),     // 8: pingcap.tiflow.cdc.scheduler.schedulepb.HeartbeatResponse
	(*OwnerRevision)(nil),         // 9: pingcap.tiflow.cdc.scheduler.schedulepb.OwnerRevision
	(*ProcessorEpoch)(nil),        // 10: pingcap.tiflow.cdc.scheduler.schedulepb.ProcessorEpoch
	(*Message)(nil),               // 11: pingcap.tiflow.cdc.scheduler.schedulepb.Message
	(*Message_Header)(nil),        // 12: pingcap.tiflow.cdc.scheduler.schedulepb.Message.Header
	(*tablepb.Span)(nil),          // 13: pingcap.tiflow.cdc.processor.tablepb.Span
	(*tablepb.Checkpoint)(nil),    // 14: pingcap.tiflow.cdc.processor.tablepb.Checkpoint
	(*tablepb.TableStatus)(nil),   // 15: pingcap.tiflow.cdc.processor.tablepb.TableStatus
}
var file_scheduler_schedulepb_table_schedule_proto_depIdxs = []int32{
	13, // 0: pingcap.tiflow.cdc.scheduler.schedulepb.AddTableRequest.span:type_name -> pingcap.tiflow.cdc.processor.tablepb.Span
	14, // 1: pingcap.tiflow.cdc.scheduler.schedulepb.AddTableRequest.checkpoint:type_name -> pingcap.tiflow.cdc.processor.tablepb.Checkpoint
	13, // 2: pingcap.tiflow.cdc.scheduler.schedulepb.RemoveTableRequest.span:type_name -> pingcap.tiflow.cdc.processor.tablepb.Span
	1,  // 3: pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableRequest.add_table:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.AddTableRequest
	2,  // 4: pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableRequest.remove_table:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.RemoveTableRequest
	15, // 5: pingcap.tiflow.cdc.scheduler.schedulepb.AddTableResponse.status:type_name -> pingcap.tiflow.cdc.processor.tablepb.TableStatus
	14, // 6: pingcap.tiflow.cdc.scheduler.schedulepb.AddTableResponse.checkpoint:type_name -> pingcap.tiflow.cdc.processor.tablepb.Checkpoint
	15, // 7: pingcap.tiflow.cdc.scheduler.schedulepb.RemoveTableResponse.status:type_name -> pingcap.tiflow.cdc.processor.tablepb.TableStatus
	14, // 8: pingcap.tiflow.cdc.scheduler.schedulepb.RemoveTableResponse.checkpoint:type_name -> pingcap.tiflow.cdc.processor.tablepb.Checkpoint
	4,  // 9: pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableResponse.add_table:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.AddTableResponse
	5,  // 10: pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableResponse.remove_table:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.RemoveTableResponse
	13, // 11: pingcap.tiflow.cdc.scheduler.schedulepb.Heartbeat.spans:type_name -> pingcap.tiflow.cdc.processor.tablepb.Span
	15, // 12: pingcap.tiflow.cdc.scheduler.schedulepb.HeartbeatResponse.tables:type_name -> pingcap.tiflow.cdc.processor.tablepb.TableStatus
	12, // 13: pingcap.tiflow.cdc.scheduler.schedulepb.Message.header:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.Message.Header
	0,  // 14: pingcap.tiflow.cdc.scheduler.schedulepb.Message.msg_type:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.MessageType
	3,  // 15: pingcap.tiflow.cdc.scheduler.schedulepb.Message.dispatch_table_request:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableRequest
	6,  // 16: pingcap.tiflow.cdc.scheduler.schedulepb.Message.dispatch_table_response:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.DispatchTableResponse
	7,  // 17: pingcap.tiflow.cdc.scheduler.schedulepb.Message.heartbeat:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.Heartbeat
	8,  // 18: pingcap.tiflow.cdc.scheduler.schedulepb.Message.heartbeat_response:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.HeartbeatResponse
	9,  // 19: pingcap.tiflow.cdc.scheduler.schedulepb.Message.Header.owner_revision:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.OwnerRevision
	10, // 20: pingcap.tiflow.cdc.scheduler.schedulepb.Message.Header.processor_epoch:type_name -> pingcap.tiflow.cdc.scheduler.schedulepb.ProcessorEpoch
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_scheduler_schedulepb_table_schedule_proto_init() }
func file_scheduler_schedulepb_table_schedule_proto_init() {
	if File_scheduler_schedulepb_table_schedule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatchTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_schedulepb_table_schedule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scheduler_schedulepb_table_schedule_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DispatchTableRequest_AddTable)(nil),
		(*DispatchTableRequest_RemoveTable)(nil),
	}
	file_scheduler_schedulepb_table_schedule_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DispatchTableResponse_AddTable)(nil),
		(*DispatchTableResponse_RemoveTable)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_schedulepb_table_schedule_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scheduler_schedulepb_table_schedule_proto_goTypes,
		DependencyIndexes: file_scheduler_schedulepb_table_schedule_proto_depIdxs,
		EnumInfos:         file_scheduler_schedulepb_table_schedule_proto_enumTypes,
		MessageInfos:      file_scheduler_schedulepb_table_schedule_proto_msgTypes,
	}.Build()
	File_scheduler_schedulepb_table_schedule_proto = out.File
	file_scheduler_schedulepb_table_schedule_proto_rawDesc = nil
	file_scheduler_schedulepb_table_schedule_proto_goTypes = nil
	file_scheduler_schedulepb_table_schedule_proto_depIdxs = nil
}
