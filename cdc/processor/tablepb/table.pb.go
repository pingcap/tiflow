// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: processor/tablepb/table.proto

package tablepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_pingcap_tiflow_cdc_model "github.com/pingcap/tiflow/cdc/model"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TableState is the state of table replication in processor.
//
//  ┌────────┐   ┌───────────┐   ┌──────────┐
//  │ Absent ├─> │ Preparing ├─> │ Prepared │
//  └────────┘   └───────────┘   └─────┬────┘
//                                     v
//  ┌─────────┐   ┌──────────┐   ┌─────────────┐
//  │ Stopped │ <─┤ Stopping │ <─┤ Replicating │
//  └─────────┘   └──────────┘   └─────────────┘
type TableState int32

const (
	TableStateUnknown     TableState = 0
	TableStateAbsent      TableState = 1
	TableStatePreparing   TableState = 2
	TableStatePrepared    TableState = 3
	TableStateReplicating TableState = 4
	TableStateStopping    TableState = 5
	TableStateStopped     TableState = 6
)

var TableState_name = map[int32]string{
	0: "Unknown",
	1: "Absent",
	2: "Preparing",
	3: "Prepared",
	4: "Replicating",
	5: "Stopping",
	6: "Stopped",
}

var TableState_value = map[string]int32{
	"Unknown":     0,
	"Absent":      1,
	"Preparing":   2,
	"Prepared":    3,
	"Replicating": 4,
	"Stopping":    5,
	"Stopped":     6,
}

func (x TableState) String() string {
	return proto.EnumName(TableState_name, int32(x))
}

func (TableState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae83c9c6cf5ef75c, []int{0}
}

type Checkpoint struct {
	CheckpointTs github_com_pingcap_tiflow_cdc_model.Ts `protobuf:"varint,1,opt,name=checkpoint_ts,json=checkpointTs,proto3,casttype=github.com/pingcap/tiflow/cdc/model.Ts" json:"checkpoint_ts,omitempty"`
	ResolvedTs   github_com_pingcap_tiflow_cdc_model.Ts `protobuf:"varint,2,opt,name=resolved_ts,json=resolvedTs,proto3,casttype=github.com/pingcap/tiflow/cdc/model.Ts" json:"resolved_ts,omitempty"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae83c9c6cf5ef75c, []int{0}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return m.Size()
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetCheckpointTs() github_com_pingcap_tiflow_cdc_model.Ts {
	if m != nil {
		return m.CheckpointTs
	}
	return 0
}

func (m *Checkpoint) GetResolvedTs() github_com_pingcap_tiflow_cdc_model.Ts {
	if m != nil {
		return m.ResolvedTs
	}
	return 0
}

// TableStatus is the running status of a table.
type TableStatus struct {
	TableID    github_com_pingcap_tiflow_cdc_model.TableID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/pingcap/tiflow/cdc/model.TableID" json:"table_id,omitempty"`
	State      TableState                                  `protobuf:"varint,2,opt,name=state,proto3,enum=pingcap.tiflow.cdc.processor.tablepb.TableState" json:"state,omitempty"`
	Checkpoint Checkpoint                                  `protobuf:"bytes,3,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *TableStatus) Reset()         { *m = TableStatus{} }
func (m *TableStatus) String() string { return proto.CompactTextString(m) }
func (*TableStatus) ProtoMessage()    {}
func (*TableStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae83c9c6cf5ef75c, []int{1}
}
func (m *TableStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableStatus.Merge(m, src)
}
func (m *TableStatus) XXX_Size() int {
	return m.Size()
}
func (m *TableStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TableStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TableStatus proto.InternalMessageInfo

func (m *TableStatus) GetTableID() github_com_pingcap_tiflow_cdc_model.TableID {
	if m != nil {
		return m.TableID
	}
	return 0
}

func (m *TableStatus) GetState() TableState {
	if m != nil {
		return m.State
	}
	return TableStateUnknown
}

func (m *TableStatus) GetCheckpoint() Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return Checkpoint{}
}

func init() {
	proto.RegisterEnum("pingcap.tiflow.cdc.processor.tablepb.TableState", TableState_name, TableState_value)
	proto.RegisterType((*Checkpoint)(nil), "pingcap.tiflow.cdc.processor.tablepb.Checkpoint")
	proto.RegisterType((*TableStatus)(nil), "pingcap.tiflow.cdc.processor.tablepb.TableStatus")
}

func init() { proto.RegisterFile("processor/tablepb/table.proto", fileDescriptor_ae83c9c6cf5ef75c) }

var fileDescriptor_ae83c9c6cf5ef75c = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x93, 0xb6, 0x6b, 0xc7, 0x57, 0x40, 0xc1, 0x6c, 0x30, 0x22, 0x91, 0x46, 0xd5, 0x34,
	0x4d, 0x45, 0x72, 0x10, 0xdc, 0xb8, 0x51, 0x10, 0xd2, 0x84, 0x10, 0x28, 0xeb, 0x38, 0x70, 0x99,
	0x12, 0xdb, 0x64, 0xd1, 0xb2, 0xd8, 0x8a, 0x3d, 0xf6, 0x02, 0x9c, 0x72, 0xe2, 0xc4, 0x2d, 0x2f,
	0xc0, 0x93, 0xec, 0xd8, 0x23, 0xa7, 0x0a, 0xda, 0xb7, 0xd8, 0x09, 0x25, 0xe9, 0xe2, 0xa9, 0x48,
	0xa8, 0x9c, 0x62, 0xe7, 0xff, 0xff, 0xff, 0x3e, 0x7f, 0x5f, 0x62, 0x78, 0x2c, 0x32, 0x4e, 0x98,
	0x94, 0x3c, 0xf3, 0x54, 0x10, 0x26, 0x4c, 0x84, 0xf5, 0x13, 0x8b, 0x8c, 0x2b, 0x8e, 0x76, 0x45,
	0x9c, 0x46, 0x24, 0x10, 0x58, 0xc5, 0x9f, 0x13, 0x7e, 0x81, 0x09, 0x25, 0xb8, 0x49, 0xe0, 0x65,
	0xc2, 0xde, 0x8a, 0x78, 0xc4, 0xab, 0x80, 0x57, 0xae, 0xea, 0xec, 0xf0, 0x87, 0x09, 0xf0, 0xea,
	0x84, 0x91, 0x53, 0xc1, 0xe3, 0x54, 0xa1, 0xf7, 0x70, 0x87, 0x34, 0xbb, 0x63, 0x25, 0x77, 0x4c,
	0xd7, 0xdc, 0xef, 0x8c, 0x47, 0x57, 0xb3, 0xc1, 0x5e, 0x14, 0xab, 0x93, 0xf3, 0x10, 0x13, 0x7e,
	0xe6, 0x2d, 0x0b, 0x7a, 0x75, 0x41, 0x8f, 0x50, 0xe2, 0x9d, 0x71, 0xca, 0x12, 0x3c, 0x91, 0xfe,
	0x6d, 0x0d, 0x98, 0x48, 0xf4, 0x16, 0xfa, 0x19, 0x93, 0x3c, 0xf9, 0xc2, 0x68, 0x89, 0x6b, 0xfd,
	0x37, 0x0e, 0xae, 0xe3, 0x13, 0x39, 0xfc, 0xda, 0x82, 0xfe, 0xa4, 0x6c, 0xe7, 0x50, 0x05, 0xea,
	0x5c, 0xa2, 0x23, 0xd8, 0xac, 0xba, 0x3b, 0x8e, 0x69, 0x75, 0xd0, 0xf6, 0xf8, 0xc5, 0x7c, 0x36,
	0xe8, 0x55, 0x96, 0x83, 0xd7, 0x57, 0xb3, 0xc1, 0x93, 0xb5, 0x8a, 0xd4, 0x76, 0xbf, 0x57, 0xb1,
	0x0e, 0x28, 0x7a, 0x03, 0x1b, 0x52, 0x05, 0x8a, 0x55, 0xa7, 0xbd, 0xfb, 0xec, 0x29, 0x5e, 0x67,
	0xbe, 0xb8, 0x39, 0x18, 0xf3, 0xeb, 0x38, 0xfa, 0x08, 0xa0, 0x67, 0xb1, 0xd3, 0x76, 0xcd, 0xfd,
	0xfe, 0xba, 0x30, 0xfd, 0x49, 0xc6, 0x9d, 0xcb, 0xd9, 0xc0, 0xf0, 0x6f, 0x90, 0x46, 0xdf, 0x5b,
	0x00, 0xba, 0x1a, 0x1a, 0x42, 0xef, 0x28, 0x3d, 0x4d, 0xf9, 0x45, 0x6a, 0x19, 0xf6, 0x76, 0x5e,
	0xb8, 0xf7, 0xb4, 0xb8, 0x14, 0x90, 0x0b, 0xdd, 0x97, 0xa1, 0x64, 0xa9, 0xb2, 0x4c, 0x7b, 0x2b,
	0x2f, 0x5c, 0x4b, 0x5b, 0xea, 0xf7, 0x68, 0x0f, 0x6e, 0x7d, 0xc8, 0x98, 0x08, 0xb2, 0x38, 0x8d,
	0xac, 0x96, 0xfd, 0x30, 0x2f, 0xdc, 0xfb, 0xda, 0xd4, 0x48, 0x68, 0x17, 0x36, 0xeb, 0x0d, 0xa3,
	0x56, 0xdb, 0x7e, 0x90, 0x17, 0x2e, 0x5a, 0xb5, 0x31, 0x8a, 0x46, 0xd0, 0xf7, 0x99, 0x48, 0x62,
	0x12, 0xa8, 0x92, 0xd7, 0xb1, 0x1f, 0xe5, 0x85, 0xbb, 0x7d, 0x63, 0x44, 0x5a, 0x2c, 0x89, 0x87,
	0x8a, 0x8b, 0x72, 0x2e, 0xd6, 0xc6, 0x2a, 0xf1, 0x5a, 0x29, 0xbb, 0xac, 0xd6, 0x8c, 0x5a, 0xdd,
	0xd5, 0x2e, 0x97, 0xc2, 0xf8, 0xdd, 0xf4, 0xb7, 0x63, 0x5c, 0xce, 0x1d, 0x73, 0x3a, 0x77, 0xcc,
	0x5f, 0x73, 0xc7, 0xfc, 0xb6, 0x70, 0x8c, 0xe9, 0xc2, 0x31, 0x7e, 0x2e, 0x1c, 0xe3, 0x93, 0xf7,
	0xef, 0x9f, 0xe1, 0xaf, 0x3b, 0x16, 0x76, 0xab, 0x2b, 0xf2, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x20, 0x55, 0xc1, 0xb8, 0x7f, 0x03, 0x00, 0x00,
}

func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checkpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResolvedTs != 0 {
		i = encodeVarintTable(dAtA, i, uint64(m.ResolvedTs))
		i--
		dAtA[i] = 0x10
	}
	if m.CheckpointTs != 0 {
		i = encodeVarintTable(dAtA, i, uint64(m.CheckpointTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTable(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.State != 0 {
		i = encodeVarintTable(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintTable(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTable(dAtA []byte, offset int, v uint64) int {
	offset -= sovTable(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Checkpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckpointTs != 0 {
		n += 1 + sovTable(uint64(m.CheckpointTs))
	}
	if m.ResolvedTs != 0 {
		n += 1 + sovTable(uint64(m.ResolvedTs))
	}
	return n
}

func (m *TableStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovTable(uint64(m.TableID))
	}
	if m.State != 0 {
		n += 1 + sovTable(uint64(m.State))
	}
	l = m.Checkpoint.Size()
	n += 1 + l + sovTable(uint64(l))
	return n
}

func sovTable(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTable(x uint64) (n int) {
	return sovTable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointTs", wireType)
			}
			m.CheckpointTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckpointTs |= github_com_pingcap_tiflow_cdc_model.Ts(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedTs", wireType)
			}
			m.ResolvedTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedTs |= github_com_pingcap_tiflow_cdc_model.Ts(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_pingcap_tiflow_cdc_model.TableID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TableState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTable
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTable
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTable
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTable        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTable          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTable = fmt.Errorf("proto: unexpected end of group")
)
