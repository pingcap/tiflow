// Copyright 2022 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package verification

import (
	context "context"

	filter "github.com/pingcap/tiflow/pkg/filter"
	mock "github.com/stretchr/testify/mock"
)

// mockCheckSumChecker is an autogenerated mock type for the checkSumChecker type
type mockCheckSumChecker struct {
	mock.Mock
}

// getAllDBs provides a mock function with given fields: ctx
func (_m *mockCheckSumChecker) getAllDBs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getCheckSum provides a mock function with given fields: ctx, db, f
func (_m *mockCheckSumChecker) getCheckSum(ctx context.Context, db string, f *filter.Filter) (map[string]string, error) {
	ret := _m.Called(ctx, db, f)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, string, *filter.Filter) map[string]string); ok {
		r0 = rf(ctx, db, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *filter.Filter) error); ok {
		r1 = rf(ctx, db, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
