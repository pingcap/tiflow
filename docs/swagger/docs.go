// Package swagger GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/captures": {
            "get": {
                "description": "list all captures in cdc cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "capture"
                ],
                "summary": "List captures",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Capture"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/captures/drain": {
            "put": {
                "description": "Drain all tables at the target captures in cdc cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "capture"
                ],
                "summary": "Drain captures",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/changefeeds": {
            "get": {
                "description": "list all changefeeds in cdc cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "List changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ChangefeedCommonInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "create a new changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "Create changefeed",
                "parameters": [
                    {
                        "description": "changefeed config",
                        "name": "changefeed",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChangefeedConfig"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/changefeeds/{changefeed_id}": {
            "get": {
                "description": "get detail information of a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "Get changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ChangefeedDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "Update a changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "changefeed target ts",
                        "name": "target_ts",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "sink uri",
                        "name": "sink_uri",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "filter rules",
                        "name": "filter_rules",
                        "in": "body",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "ignore transaction start ts",
                        "name": "ignore_txn_start_ts",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "mounter worker nums",
                        "name": "mounter_worker_num",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "sink config",
                        "name": "sink_config",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/config.SinkConfig"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "Remove a changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/changefeeds/{changefeed_id}/pause": {
            "post": {
                "description": "Pause a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "Pause a changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/changefeeds/{changefeed_id}/resume": {
            "post": {
                "description": "Resume a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "Resume a changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed-id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/changefeeds/{changefeed_id}/tables/move_table": {
            "post": {
                "description": "move one table to the target capture",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "move table",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "table_id",
                        "name": "table_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "capture_id",
                        "name": "capture_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/changefeeds/{changefeed_id}/tables/rebalance_table": {
            "post": {
                "description": "rebalance all tables of a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed"
                ],
                "summary": "rebalance tables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/health": {
            "get": {
                "description": "check if CDC cluster is health",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Check if CDC cluster is health",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/log": {
            "post": {
                "description": "change TiCDC log level dynamically",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Change TiCDC log level",
                "parameters": [
                    {
                        "description": "log level",
                        "name": "log_level",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/owner/resign": {
            "post": {
                "description": "notify the current owner to resign",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner"
                ],
                "summary": "notify the owner to resign",
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/processors": {
            "get": {
                "description": "list all processors in the TiCDC cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "processor"
                ],
                "summary": "List processors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.ProcessorCommonInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/processors/{changefeed_id}/{capture_id}": {
            "get": {
                "description": "get the detail information of a processor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "processor"
                ],
                "summary": "Get processor detail information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProcessorDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v1/status": {
            "get": {
                "description": "get the status of a server(capture)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get server status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ServerStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/captures": {
            "get": {
                "description": "list all captures in cdc cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "capture",
                    "v2"
                ],
                "summary": "List captures",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v2.Capture"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/changefeeds": {
            "get": {
                "description": "list all changefeeds in cdc cluster",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed",
                    "v2"
                ],
                "summary": "List changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v2.ChangefeedCommonInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/changefeeds/{changefeed_id}": {
            "get": {
                "description": "get detail information of a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed",
                    "v2"
                ],
                "summary": "Get changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.ChangeFeedInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed",
                    "v2"
                ],
                "summary": "Remove a changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/changefeeds/{changefeed_id}/pause": {
            "post": {
                "description": "Pause a changefeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "changefeed",
                    "v2"
                ],
                "summary": "Pause a changefeed",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed_id",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/health": {
            "get": {
                "description": "Check the health status of a TiCDC cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common",
                    "v2"
                ],
                "summary": "Check the health status of a TiCDC cluster",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/log": {
            "post": {
                "description": "change TiCDC log level dynamically",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common",
                    "v2"
                ],
                "summary": "Change TiCDC log level",
                "parameters": [
                    {
                        "description": "log level",
                        "name": "log_level",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v2.LogLevelReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/owner/resign": {
            "post": {
                "description": "Notify the current owner to resign",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "owner",
                    "v2"
                ],
                "summary": "Notify the owner to resign",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/processors": {
            "get": {
                "description": "list all processors in the TiCDC cluster",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "processor",
                    "v2"
                ],
                "summary": "List processors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/v2.ProcessorCommonInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/processors/{changefeed_id}/{capture_id}": {
            "get": {
                "description": "get the detail information of a processor",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "processor",
                    "v2"
                ],
                "summary": "Get processor detail information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "changefeed ID",
                        "name": "changefeed_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "capture ID",
                        "name": "capture_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.ProcessorDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        },
        "/api/v2/status": {
            "get": {
                "description": "This API is a synchronous interface. If the request is successful,",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common",
                    "v2"
                ],
                "summary": "Get the status information of a TiCDC node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v2.ServerStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "config.CSVConfig": {
            "type": "object",
            "properties": {
                "binary-encoding-method": {
                    "description": "encoding method of binary type",
                    "type": "string"
                },
                "delimiter": {
                    "description": "delimiter between fields",
                    "type": "string"
                },
                "include-commit-ts": {
                    "description": "whether to include commit ts",
                    "type": "boolean"
                },
                "null": {
                    "description": "representation of null values",
                    "type": "string"
                },
                "quote": {
                    "description": "quoting character",
                    "type": "string"
                }
            }
        },
        "config.ColumnSelector": {
            "type": "object",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "matcher": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "config.DispatchRule": {
            "type": "object",
            "properties": {
                "dispatcher": {
                    "description": "Deprecated, please use PartitionRule.",
                    "type": "string"
                },
                "matcher": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "partition": {
                    "description": "PartitionRule is an alias added for DispatcherRule to mitigate confusions.\nIn the future release, the DispatcherRule is expected to be removed .",
                    "type": "string"
                },
                "topic": {
                    "type": "string"
                }
            }
        },
        "config.KafkaConfig": {
            "type": "object",
            "properties": {
                "large-message-handle": {
                    "$ref": "#/definitions/config.LargeMessageHandleConfig"
                },
                "sasl-mechanism": {
                    "type": "string"
                },
                "sasl-oauth-audience": {
                    "type": "string"
                },
                "sasl-oauth-client-id": {
                    "type": "string"
                },
                "sasl-oauth-client-secret": {
                    "type": "string"
                },
                "sasl-oauth-grant-type": {
                    "type": "string"
                },
                "sasl-oauth-scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sasl-oauth-token-url": {
                    "type": "string"
                }
            }
        },
        "config.LargeMessageHandleConfig": {
            "type": "object",
            "properties": {
                "large-message-handle-option": {
                    "type": "string"
                }
            }
        },
        "config.SinkConfig": {
            "type": "object",
            "properties": {
                "advance-timeout-in-sec": {
                    "description": "AdvanceTimeoutInSec is a duration in second. If a table sink progress hasn't been\nadvanced for this given duration, the sink will be canceled and re-established.",
                    "type": "integer"
                },
                "column-selectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/config.ColumnSelector"
                    }
                },
                "csv": {
                    "$ref": "#/definitions/config.CSVConfig"
                },
                "date-separator": {
                    "type": "string"
                },
                "dispatchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/config.DispatchRule"
                    }
                },
                "enable-partition-separator": {
                    "type": "boolean"
                },
                "encoder-concurrency": {
                    "type": "integer"
                },
                "file-index-digit": {
                    "type": "integer"
                },
                "kafka-config": {
                    "$ref": "#/definitions/config.KafkaConfig"
                },
                "protocol": {
                    "type": "string"
                },
                "schema-registry": {
                    "type": "string"
                },
                "terminator": {
                    "type": "string"
                },
                "transaction-atomicity": {
                    "type": "string"
                }
            }
        },
        "model.Capture": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cluster_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_owner": {
                    "type": "boolean"
                }
            }
        },
        "model.CaptureTaskStatus": {
            "type": "object",
            "properties": {
                "capture_id": {
                    "type": "string"
                },
                "table_ids": {
                    "description": "Table list, containing tables that processor should process",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "table_operations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.TableOperation"
                    }
                }
            }
        },
        "model.ChangefeedCommonInfo": {
            "type": "object",
            "properties": {
                "checkpoint_time": {
                    "type": "string"
                },
                "checkpoint_tso": {
                    "type": "integer"
                },
                "error": {
                    "$ref": "#/definitions/model.RunningError"
                },
                "id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "upstream_id": {
                    "type": "integer"
                }
            }
        },
        "model.ChangefeedConfig": {
            "type": "object",
            "properties": {
                "changefeed_id": {
                    "type": "string"
                },
                "filter_rules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "force_replicate": {
                    "description": "if true, force to replicate some ineligible tables",
                    "type": "boolean",
                    "default": false
                },
                "ignore_ineligible_table": {
                    "type": "boolean",
                    "default": false
                },
                "ignore_txn_start_ts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "mounter_worker_num": {
                    "type": "integer",
                    "default": 16
                },
                "namespace": {
                    "type": "string"
                },
                "sink_config": {
                    "$ref": "#/definitions/config.SinkConfig"
                },
                "sink_uri": {
                    "type": "string"
                },
                "start_ts": {
                    "type": "integer"
                },
                "target_ts": {
                    "type": "integer"
                },
                "timezone": {
                    "description": "timezone used when checking sink uri",
                    "type": "string",
                    "default": "system"
                }
            }
        },
        "model.ChangefeedDetail": {
            "type": "object",
            "properties": {
                "checkpoint_time": {
                    "type": "string"
                },
                "checkpoint_tso": {
                    "type": "integer"
                },
                "create_time": {
                    "type": "string"
                },
                "creator_version": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/model.RunningError"
                },
                "error_history": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "resolved_ts": {
                    "type": "integer"
                },
                "sink_uri": {
                    "type": "string"
                },
                "sort_engine": {
                    "type": "string"
                },
                "start_ts": {
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "target_ts": {
                    "type": "integer"
                },
                "task_status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CaptureTaskStatus"
                    }
                },
                "upstream_id": {
                    "type": "integer"
                }
            }
        },
        "model.HTTPError": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "string"
                },
                "error_msg": {
                    "type": "string"
                }
            }
        },
        "model.ProcessorCommonInfo": {
            "type": "object",
            "properties": {
                "capture_id": {
                    "type": "string"
                },
                "changefeed_id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "model.ProcessorDetail": {
            "type": "object",
            "properties": {
                "table_ids": {
                    "description": "All table ids that this processor are replicating.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.RunningError": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "model.ServerStatus": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "git_hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_owner": {
                    "type": "boolean"
                },
                "liveness": {
                    "type": "integer"
                },
                "pid": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "model.TableOperation": {
            "type": "object",
            "properties": {
                "boundary_ts": {
                    "description": "if the operation is a delete operation, BoundaryTs is checkpoint ts\nif the operation is an add operation, BoundaryTs is start ts",
                    "type": "integer"
                },
                "delete": {
                    "type": "boolean"
                },
                "flag": {
                    "type": "integer"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "v2.CSVConfig": {
            "type": "object",
            "properties": {
                "binary_encoding_method": {
                    "type": "string"
                },
                "delimiter": {
                    "type": "string"
                },
                "include_commit_ts": {
                    "type": "boolean"
                },
                "null": {
                    "type": "string"
                },
                "quote": {
                    "type": "string"
                }
            }
        },
        "v2.Capture": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cluster_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_owner": {
                    "type": "boolean"
                }
            }
        },
        "v2.ChangeFeedInfo": {
            "type": "object",
            "properties": {
                "admin_job_type": {
                    "description": "used for admin job notification, trigger watch event in capture",
                    "type": "integer"
                },
                "checkpoint_time": {
                    "type": "string"
                },
                "checkpoint_ts": {
                    "type": "integer"
                },
                "config": {
                    "$ref": "#/definitions/v2.ReplicaConfig"
                },
                "create_time": {
                    "type": "string"
                },
                "creator_version": {
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/v2.RunningError"
                },
                "id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "resolved_ts": {
                    "type": "integer"
                },
                "sink_uri": {
                    "type": "string"
                },
                "start_ts": {
                    "description": "Start sync at this commit ts if ` + "`" + `StartTs` + "`" + ` is specify or using the CreateTime of changefeed.",
                    "type": "integer"
                },
                "state": {
                    "type": "string"
                },
                "target_ts": {
                    "description": "The ChangeFeed will exits until sync to timestamp TargetTs",
                    "type": "integer"
                },
                "task_status": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CaptureTaskStatus"
                    }
                },
                "upstream_id": {
                    "type": "integer"
                }
            }
        },
        "v2.ChangefeedCommonInfo": {
            "type": "object",
            "properties": {
                "checkpoint_time": {
                    "type": "string"
                },
                "checkpoint_tso": {
                    "type": "integer"
                },
                "error": {
                    "$ref": "#/definitions/model.RunningError"
                },
                "id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "upstream_id": {
                    "type": "integer"
                }
            }
        },
        "v2.ColumnSelector": {
            "type": "object",
            "properties": {
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "matcher": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v2.ConsistentConfig": {
            "type": "object",
            "properties": {
                "encoding_worker_num": {
                    "type": "integer"
                },
                "flush_interval": {
                    "type": "integer"
                },
                "flush_worker_num": {
                    "type": "integer"
                },
                "level": {
                    "type": "string"
                },
                "max_log_size": {
                    "type": "integer"
                },
                "meta_flush_interval": {
                    "type": "integer"
                },
                "storage": {
                    "type": "string"
                },
                "use_file_backend": {
                    "type": "boolean"
                }
            }
        },
        "v2.DispatchRule": {
            "type": "object",
            "properties": {
                "matcher": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "partition": {
                    "type": "string"
                },
                "topic": {
                    "type": "string"
                }
            }
        },
        "v2.EmptyResponse": {
            "type": "object"
        },
        "v2.EventFilterRule": {
            "type": "object",
            "properties": {
                "ignore_delete_value_expr": {
                    "type": "string"
                },
                "ignore_event": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignore_insert_value_expr": {
                    "description": "sql expression",
                    "type": "string"
                },
                "ignore_sql": {
                    "description": "regular expression",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignore_update_new_value_expr": {
                    "type": "string"
                },
                "ignore_update_old_value_expr": {
                    "type": "string"
                },
                "matcher": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v2.FilterConfig": {
            "type": "object",
            "properties": {
                "do_dbs": {
                    "description": "DoDBs is an allowlist of schemas.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "do_tables": {
                    "description": "DoTables is an allowlist of tables.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.Table"
                    }
                },
                "event_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.EventFilterRule"
                    }
                },
                "ignore_dbs": {
                    "description": "IgnoreDBs is a blocklist of schemas.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignore_tables": {
                    "description": "IgnoreTables is a blocklist of tables.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.Table"
                    }
                },
                "ignore_txn_start_ts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "v2.KafkaConfig": {
            "type": "object",
            "properties": {
                "large_message_handle": {
                    "$ref": "#/definitions/v2.LargeMessageHandleConfig"
                },
                "sasl_mechanism": {
                    "type": "string"
                },
                "sasl_oauth_audience": {
                    "type": "string"
                },
                "sasl_oauth_client_id": {
                    "type": "string"
                },
                "sasl_oauth_client_secret": {
                    "type": "string"
                },
                "sasl_oauth_grant_type": {
                    "type": "string"
                },
                "sasl_oauth_scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sasl_oauth_token_url": {
                    "type": "string"
                }
            }
        },
        "v2.LargeMessageHandleConfig": {
            "type": "object",
            "properties": {
                "large_message_handle_option": {
                    "type": "string"
                }
            }
        },
        "v2.LogLevelReq": {
            "type": "object",
            "properties": {
                "log_level": {
                    "type": "string"
                }
            }
        },
        "v2.MounterConfig": {
            "type": "object",
            "properties": {
                "worker_num": {
                    "type": "integer"
                }
            }
        },
        "v2.ProcessorCommonInfo": {
            "type": "object",
            "properties": {
                "capture_id": {
                    "type": "string"
                },
                "changefeed_id": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            }
        },
        "v2.ProcessorDetail": {
            "type": "object",
            "properties": {
                "table_ids": {
                    "description": "All table ids that this processor are replicating.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "v2.ReplicaConfig": {
            "type": "object",
            "properties": {
                "bdr_mode": {
                    "type": "boolean"
                },
                "case_sensitive": {
                    "type": "boolean"
                },
                "check_gc_safe_point": {
                    "type": "boolean"
                },
                "consistent": {
                    "$ref": "#/definitions/v2.ConsistentConfig"
                },
                "enable_old_value": {
                    "type": "boolean"
                },
                "enable_sync_point": {
                    "type": "boolean"
                },
                "filter": {
                    "$ref": "#/definitions/v2.FilterConfig"
                },
                "force_replicate": {
                    "type": "boolean"
                },
                "ignore_ineligible_table": {
                    "type": "boolean"
                },
                "memory_quota": {
                    "type": "integer"
                },
                "mounter": {
                    "$ref": "#/definitions/v2.MounterConfig"
                },
                "sink": {
                    "$ref": "#/definitions/v2.SinkConfig"
                },
                "sync_point_interval": {
                    "type": "string"
                },
                "sync_point_retention": {
                    "type": "string"
                }
            }
        },
        "v2.RunningError": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "v2.ServerStatus": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "git_hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_owner": {
                    "type": "boolean"
                },
                "liveness": {
                    "type": "integer"
                },
                "pid": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "v2.SinkConfig": {
            "type": "object",
            "properties": {
                "advance_timeout": {
                    "type": "integer"
                },
                "column_selectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.ColumnSelector"
                    }
                },
                "csv": {
                    "$ref": "#/definitions/v2.CSVConfig"
                },
                "date_separator": {
                    "type": "string"
                },
                "dispatchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2.DispatchRule"
                    }
                },
                "enable_partition_separator": {
                    "type": "boolean"
                },
                "encoder_concurrency": {
                    "type": "integer"
                },
                "file_index_width": {
                    "type": "integer"
                },
                "kafka_config": {
                    "$ref": "#/definitions/v2.KafkaConfig"
                },
                "protocol": {
                    "type": "string"
                },
                "schema_registry": {
                    "type": "string"
                },
                "terminator": {
                    "type": "string"
                },
                "transaction_atomicity": {
                    "type": "string"
                }
            }
        },
        "v2.Table": {
            "type": "object",
            "properties": {
                "database_name": {
                    "description": "Schema is the name of the schema (database) containing this table.",
                    "type": "string"
                },
                "table_name": {
                    "description": "Name is the unqualified table name.",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
