// The data-flow diagram of TiCDC.
//
// Run `make data-flow-diagram` to generate data-flow.svg
//
// Metrics in TiCDC
// TiKV -> KV client: ticdc_kvclient_pull_event_count | counter
//     puller event chan size: ticdc_puller_event_chan_size | gauge
// KV client -> puller memBuffer: ticdc_puller_kv_event_count | counter
//     puller memBuffer size: ticdc_puller_mem_buffer_size | gauge
// puller memBuffer -> puller outputChan: ticdc_puller_txn_collect_event_count | counter
//     puller outputChan size: ticdc_puller_output_chan_size | gauge
// puller outputCnan -> sorter unsorted
//     sorter unsorted size: ticdc_puller_entry_sorter_unsorted_size | gauge
//     sorter sort duration: ticdc_puller_entry_sorter_sort | duration
//     sorter merge duration: ticdc_puller_entry_sorter_merge | duration
// sorter unsorted -> sorter outputCh: missing
//     sorter outputCh size: ticdc_puller_entry_sorter_output_chan_size | gauge
// sorter outputCh -> Rectifier outputCh: missing
// Rectifier outputCh -> processor outputCh: missing
//                    `-> mounter rawRowChangedChs
//                             mounter unmarshal duration: ticdc_mounter_unmarshal_and_mount | duration
//                             mounter rawRowCHangedChs size: ticdc_mounter_input_chan_size | gauge
// processor outputCh -> sink.EmitRowChangedEvents:
//     processor outputCh size: ticdc_processor_txn_output_chan_size | gague

digraph Dataflow {
    subgraph cluster_legends {
        label = "Legend";
        fontsize = 10;
        color = lightgrey;
        style = filled;

        node [
            style = filled,
            color = white,
            shape = rect,
            fontsize = 10,
            width = 0.5,
            height = 0.5,
        ];

        edge [
            labelfontsize = 10,
        ]

        flow [
            label = "Go routine #1",
        ]
        flow_ [
            label = "Go routine #2",
        ]
        flow -> flow_ [
            headlabel = "Flow\ndirection",
            taillabel = "Channel\n/Buffer",
        ]

        wait [
            label = "Go routine #1",
        ]
        wait_ [
            label = "Go routine #2",
        ]
        wait -> wait_ [
            taillabel = "#1 wiats #2",
            style = "dashed",
        ]
    }

    subgraph cluster_tikv {
        label = "TiKV";
        color = lightgrey;
        node [
            style = filled,
            color = lightgrey,
            shape = rect,
        ];

        Raftstore -> CDC [label = "channel"]
    }

    subgraph cluster_ticdc {
        label = "TiCDC";
        color = lightgrey;
        node [
            style = filled,
            color = white,
            shape = rect,
        ];

        CDC -> kv_client [constraint = false, label = "gRPC"]

        subgraph cluster_kvclient {
            label = "KV client";
            style = filled;

            kv_client
        }

        kv_client -> puller_run_step1 [label = "eventCh", constraint = false]

        subgraph cluster_processor {
            label = "Processor";
            style = filled;

            processor_sorter_consume [label = "sorterConsume"]
            processor_puller_consume [label = "pullerConsume"]

        }
            processor_sorter_consume -> table_sink_run [label = "P.output"]

        subgraph cluster_puller {
            label = "Puller";
            style = filled;

            puller_run_step1 [label = "Run #1\n(Add to memory buffer)"]
            puller_run_step2 [label = "Run #2\n(Output to output channel)"]

            puller_run_step1 -> puller_run_step2 [label = "P.buffer"]
            puller_run_step2 -> processor_puller_consume [label = "P.Output"]
        }

        processor_puller_consume -> sorter_run [label = "E.AddEntry"]

        subgraph cluster_sorter {
            label = "Sorter";
            style = filled;

            subgraph cluster_entry_sorter {
                label = "Entry sorter";

                sorter_run [label = "Run"]
            }

        }

        sorter_run -> processor_sorter_consume [label = "S.Ouput"]
        processor_sorter_consume -> mounter_run [label = "M.Input"]
        mounter_run -> table_sink_run [
            label = "wait unmarshal",
            style = "dashed",
            dir = back,
        ]

        subgraph cluster_mounter {
            label = "Mounter";
            style = filled;

            mounter_run [label = "Run"]
        }

        subgraph cluster_sink {
            label = "Sink Manager";
            style = filled;

            subgraph table_sink {
                label = "Table Sink (N)";

                table_sink_run [label = "Table Sink (N)\nFlushEvents"]
            }

            subgraph buffer_sink {
                label = "Buffer Sink (1)";

                buffer_sink_run [label = "Buffer Sink (1)\nFlushEvents"]
            }

            subgraph backend_sink {
                label = "Backend Sink (1)";

                backend_sink_run [label = "Backend Sink (1)\nFlushEvents"]
            }

            table_sink_run -> buffer_sink_run [label = "S.EmitEvents"]
            buffer_sink_run -> backend_sink_run [label = "S.EmitEvents"]
        }
    }

    data_in [label = "Data in", shape = oval]
    data_in -> Raftstore

    data_out [label = "Data out", shape = oval]
    backend_sink_run -> data_out
}
