// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tiflow/engine/servermaster/orm (interfaces: ExecutorClient)

// Package orm is a generated GoMock package.
package orm

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pingcap/tiflow/engine/model"
	model0 "github.com/pingcap/tiflow/engine/servermaster/orm/model"
)

// MockExecutorClient is a mock of ExecutorClient interface.
type MockExecutorClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorClientMockRecorder
}

// MockExecutorClientMockRecorder is the mock recorder for MockExecutorClient.
type MockExecutorClientMockRecorder struct {
	mock *MockExecutorClient
}

// NewMockExecutorClient creates a new mock instance.
func NewMockExecutorClient(ctrl *gomock.Controller) *MockExecutorClient {
	mock := &MockExecutorClient{ctrl: ctrl}
	mock.recorder = &MockExecutorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorClient) EXPECT() *MockExecutorClientMockRecorder {
	return m.recorder
}

// CreateExecutor mocks base method.
func (m *MockExecutorClient) CreateExecutor(arg0 context.Context, arg1 *model0.Executor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExecutor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExecutor indicates an expected call of CreateExecutor.
func (mr *MockExecutorClientMockRecorder) CreateExecutor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExecutor", reflect.TypeOf((*MockExecutorClient)(nil).CreateExecutor), arg0, arg1)
}

// DeleteExecutor mocks base method.
func (m *MockExecutorClient) DeleteExecutor(arg0 context.Context, arg1 model.DeployNodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExecutor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExecutor indicates an expected call of DeleteExecutor.
func (mr *MockExecutorClientMockRecorder) DeleteExecutor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecutor", reflect.TypeOf((*MockExecutorClient)(nil).DeleteExecutor), arg0, arg1)
}

// QueryExecutors mocks base method.
func (m *MockExecutorClient) QueryExecutors(arg0 context.Context) ([]*model0.Executor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryExecutors", arg0)
	ret0, _ := ret[0].([]*model0.Executor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryExecutors indicates an expected call of QueryExecutors.
func (mr *MockExecutorClientMockRecorder) QueryExecutors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExecutors", reflect.TypeOf((*MockExecutorClient)(nil).QueryExecutors), arg0)
}

// UpdateExecutor mocks base method.
func (m *MockExecutorClient) UpdateExecutor(arg0 context.Context, arg1 *model0.Executor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExecutor indicates an expected call of UpdateExecutor.
func (mr *MockExecutorClientMockRecorder) UpdateExecutor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutor", reflect.TypeOf((*MockExecutorClient)(nil).UpdateExecutor), arg0, arg1)
}
