// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tiflow/engine/servermaster/jobop (interfaces: BackoffManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBackoffManager is a mock of BackoffManager interface.
type MockBackoffManager struct {
	ctrl     *gomock.Controller
	recorder *MockBackoffManagerMockRecorder
}

// MockBackoffManagerMockRecorder is the mock recorder for MockBackoffManager.
type MockBackoffManagerMockRecorder struct {
	mock *MockBackoffManager
}

// NewMockBackoffManager creates a new mock instance.
func NewMockBackoffManager(ctrl *gomock.Controller) *MockBackoffManager {
	mock := &MockBackoffManager{ctrl: ctrl}
	mock.recorder = &MockBackoffManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackoffManager) EXPECT() *MockBackoffManagerMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockBackoffManager) Allow(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockBackoffManagerMockRecorder) Allow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockBackoffManager)(nil).Allow), arg0)
}

// JobFail mocks base method.
func (m *MockBackoffManager) JobFail(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JobFail", arg0)
}

// JobFail indicates an expected call of JobFail.
func (mr *MockBackoffManagerMockRecorder) JobFail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobFail", reflect.TypeOf((*MockBackoffManager)(nil).JobFail), arg0)
}

// JobOnline mocks base method.
func (m *MockBackoffManager) JobOnline(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JobOnline", arg0)
}

// JobOnline indicates an expected call of JobOnline.
func (mr *MockBackoffManagerMockRecorder) JobOnline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobOnline", reflect.TypeOf((*MockBackoffManager)(nil).JobOnline), arg0)
}

// JobTerminate mocks base method.
func (m *MockBackoffManager) JobTerminate(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JobTerminate", arg0)
}

// JobTerminate indicates an expected call of JobTerminate.
func (mr *MockBackoffManagerMockRecorder) JobTerminate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobTerminate", reflect.TypeOf((*MockBackoffManager)(nil).JobTerminate), arg0)
}

// Terminate mocks base method.
func (m *MockBackoffManager) Terminate(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockBackoffManagerMockRecorder) Terminate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockBackoffManager)(nil).Terminate), arg0)
}
