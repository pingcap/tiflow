// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tiflow/engine/servermaster/jobop (interfaces: JobOperator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJobOperator is a mock of JobOperator interface.
type MockJobOperator struct {
	ctrl     *gomock.Controller
	recorder *MockJobOperatorMockRecorder
}

// MockJobOperatorMockRecorder is the mock recorder for MockJobOperator.
type MockJobOperatorMockRecorder struct {
	mock *MockJobOperator
}

// NewMockJobOperator creates a new mock instance.
func NewMockJobOperator(ctrl *gomock.Controller) *MockJobOperator {
	mock := &MockJobOperator{ctrl: ctrl}
	mock.recorder = &MockJobOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobOperator) EXPECT() *MockJobOperatorMockRecorder {
	return m.recorder
}

// IsJobCanceling mocks base method.
func (m *MockJobOperator) IsJobCanceling(arg0 context.Context, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsJobCanceling", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsJobCanceling indicates an expected call of IsJobCanceling.
func (mr *MockJobOperatorMockRecorder) IsJobCanceling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsJobCanceling", reflect.TypeOf((*MockJobOperator)(nil).IsJobCanceling), arg0, arg1)
}

// MarkJobCanceled mocks base method.
func (m *MockJobOperator) MarkJobCanceled(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkJobCanceled", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkJobCanceled indicates an expected call of MarkJobCanceled.
func (mr *MockJobOperatorMockRecorder) MarkJobCanceled(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkJobCanceled", reflect.TypeOf((*MockJobOperator)(nil).MarkJobCanceled), arg0, arg1)
}

// MarkJobCanceling mocks base method.
func (m *MockJobOperator) MarkJobCanceling(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkJobCanceling", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkJobCanceling indicates an expected call of MarkJobCanceling.
func (mr *MockJobOperatorMockRecorder) MarkJobCanceling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkJobCanceling", reflect.TypeOf((*MockJobOperator)(nil).MarkJobCanceling), arg0, arg1)
}

// Tick mocks base method.
func (m *MockJobOperator) Tick(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tick", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tick indicates an expected call of Tick.
func (mr *MockJobOperatorMockRecorder) Tick(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockJobOperator)(nil).Tick), arg0)
}
