// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// delete binlog operator
	// (DELETE /binlog/tasks/{task-name})
	DMAPIDeleteBinlogOperator(c *gin.Context, taskName string, params DMAPIDeleteBinlogOperatorParams)
	// get binlog operator
	// (GET /binlog/tasks/{task-name})
	DMAPIGetBinlogOperator(c *gin.Context, taskName string, params DMAPIGetBinlogOperatorParams)
	// set binlog operator
	// (POST /binlog/tasks/{task-name})
	DMAPISetBinlogOperator(c *gin.Context, taskName string)
	// get job config
	// (GET /config)
	DMAPIGetJobConfig(c *gin.Context)
	// update job config
	// (PUT /config)
	DMAPIUpdateJobConfig(c *gin.Context)
	// get sharding ddl locks
	// (GET /ddl_locks)
	DMAPIGetDDLLocks(c *gin.Context)
	// get schema
	// (GET /schema/tasks/{task-name})
	DMAPIGetSchema(c *gin.Context, taskName string, params DMAPIGetSchemaParams)
	// set schema
	// (PUT /schema/tasks/{task-name})
	DMAPISetSchema(c *gin.Context, taskName string)
	// get the current status of the job
	// (GET /status)
	DMAPIGetJobStatus(c *gin.Context, params DMAPIGetJobStatusParams)
	// operate the stage of the job
	// (PUT /status)
	DMAPIOperateJob(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// DMAPIDeleteBinlogOperator operation middleware
func (siw *ServerInterfaceWrapper) DMAPIDeleteBinlogOperator(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIDeleteBinlogOperatorParams

	// ------------- Optional query parameter "binlog_pos" -------------
	if paramValue := c.Query("binlog_pos"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "binlog_pos", c.Request.URL.Query(), &params.BinlogPos)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter binlog_pos: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIDeleteBinlogOperator(c, taskName, params)
}

// DMAPIGetBinlogOperator operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetBinlogOperator(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetBinlogOperatorParams

	// ------------- Optional query parameter "binlog_pos" -------------
	if paramValue := c.Query("binlog_pos"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "binlog_pos", c.Request.URL.Query(), &params.BinlogPos)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter binlog_pos: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetBinlogOperator(c, taskName, params)
}

// DMAPISetBinlogOperator operation middleware
func (siw *ServerInterfaceWrapper) DMAPISetBinlogOperator(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPISetBinlogOperator(c, taskName)
}

// DMAPIGetJobConfig operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetJobConfig(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetJobConfig(c)
}

// DMAPIUpdateJobConfig operation middleware
func (siw *ServerInterfaceWrapper) DMAPIUpdateJobConfig(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIUpdateJobConfig(c)
}

// DMAPIGetDDLLocks operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetDDLLocks(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetDDLLocks(c)
}

// DMAPIGetSchema operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetSchema(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetSchemaParams

	// ------------- Optional query parameter "database" -------------
	if paramValue := c.Query("database"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "database", c.Request.URL.Query(), &params.Database)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter database: %s", err)})
		return
	}

	// ------------- Optional query parameter "table" -------------
	if paramValue := c.Query("table"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "table", c.Request.URL.Query(), &params.Table)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter table: %s", err)})
		return
	}

	// ------------- Optional query parameter "target" -------------
	if paramValue := c.Query("target"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "target", c.Request.URL.Query(), &params.Target)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter target: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetSchema(c, taskName, params)
}

// DMAPISetSchema operation middleware
func (siw *ServerInterfaceWrapper) DMAPISetSchema(c *gin.Context) {
	var err error

	// ------------- Path parameter "task-name" -------------
	var taskName string

	err = runtime.BindStyledParameter("simple", false, "task-name", c.Param("task-name"), &taskName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter task-name: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPISetSchema(c, taskName)
}

// DMAPIGetJobStatus operation middleware
func (siw *ServerInterfaceWrapper) DMAPIGetJobStatus(c *gin.Context) {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DMAPIGetJobStatusParams

	// ------------- Optional query parameter "tasks" -------------
	if paramValue := c.Query("tasks"); paramValue != "" {
	}

	err = runtime.BindQueryParameter("form", true, false, "tasks", c.Request.URL.Query(), &params.Tasks)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tasks: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIGetJobStatus(c, params)
}

// DMAPIOperateJob operation middleware
func (siw *ServerInterfaceWrapper) DMAPIOperateJob(c *gin.Context) {
	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DMAPIOperateJob(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.DELETE(options.BaseURL+"/binlog/tasks/:task-name", wrapper.DMAPIDeleteBinlogOperator)

	router.GET(options.BaseURL+"/binlog/tasks/:task-name", wrapper.DMAPIGetBinlogOperator)

	router.POST(options.BaseURL+"/binlog/tasks/:task-name", wrapper.DMAPISetBinlogOperator)

	router.GET(options.BaseURL+"/config", wrapper.DMAPIGetJobConfig)

	router.PUT(options.BaseURL+"/config", wrapper.DMAPIUpdateJobConfig)

	router.GET(options.BaseURL+"/ddl_locks", wrapper.DMAPIGetDDLLocks)

	router.GET(options.BaseURL+"/schema/tasks/:task-name", wrapper.DMAPIGetSchema)

	router.PUT(options.BaseURL+"/schema/tasks/:task-name", wrapper.DMAPISetSchema)

	router.GET(options.BaseURL+"/status", wrapper.DMAPIGetJobStatus)

	router.PUT(options.BaseURL+"/status", wrapper.DMAPIOperateJob)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"H4sIAAAAAAAC/+RYTW/jNhP+K8S871G7dtvtRbduUxRb7KJFg6KHhRFQ0khmQpE0Pw6Gof9ekJRky6YV",
	"G6i7QXJJZHI4n88MH2kHpWyVFCisgXwHplxjS8PjL1pL/Tez6y9oDG3Qr1VoSs2UZVJADlKhpv6ZoJeF",
	"DJT2a5Zh0FDKKnEqyJKwl4HdKoQcmLDYoIYugwotZTycZxbb8NBLGauZaLxQv0C1plv/uz3nYjQ2bGfH",
	"mroMNG4c01hB/hV6pwbx1Sgvi0csrbf0e4gZf5PFn7hxaKy3OQ1bKv8XhWu9To3GtV6ros4c6jyIhpqn",
	"qwI+cluqpKv3aD8ywWUTfZb6rMdFEHtQMm18GpB5Ygq8A4rT0gfGRLCYisxs+C0Duw9oPRtWRS0tqMGk",
	"4VrL9sFIp8seNjV13EJeU25wNFpIyZGK8YClukF72QGz4emQacFTPh0FP3o/nIgaUwn5S1URkz9LUbPm",
	"bELKsP286V7u1JQXZKKWkAvHuUcGCqoY5PDD++X7ZUC5XQdbiwiqRQD3Yuf/vRO0xS4mj6PF2Cz9DPlU",
	"QQ53X37649Nd2JxCN2jWtEWL2kD+9bjPvXri1Qc8Qh78gAzCUtx+12/vA7XaYdaPvGRSdlHXxqHe7pUd",
	"dMvc6ZU3ZZQUJib/++WH0/lkXFmiMb6IPy6XfY0silA8qhRnZcjO4tF4+d2Bvf9rrCGH/y32E3zRj+/F",
	"yewOlZuarinjWIXaG9e2VG8h7wtDYohE7rNvaePzHjIJqy6Dvg0S9fv1eO6cFu/Flui6EvT6wkYiwy+t",
	"uA3aSyqrpDlX2vvnS/sf9OUqCqOxH2W1/dfyeva+TOS3t08K70B3AqPvXjOMzCUw6jJY7K+b2WEx3ltw",
	"23Z8lIXP4YfUHI6uEiEtqaUTqc55lAUpBz+HaL3O0DPuXIBHdzPcBrtnGEA3vdl9Y3XpJL9syLkQ3lwJ",
	"PN6qij9wWUYuPQu5u7vPn4Pg27sAzJrqiomGVBUnvE/CaS6jrTR7m01t5OTfiq9NrQwUemLpiCoc0Owr",
	"NAdGPqd2pOzX6PTvFmQ4mdYaXj8Sasf3jrdIasyAuVMu42aozDeE6q0pzPTN+PJr4DVzliRKzDDvLLXO",
	"XMJV7qPkM6hpuCwo51viBNs4JH7MkPi5YX5smKfpO8vFn07eYN/bNZLSaY3CklhAIuuw6i+ya1ja/rPe",
	"jQja6XfD18LNYjYxpN1Y2uBcDbpuXNkl6PnYB5Grp0bxtFegW3X/BAAA///9okbBxBYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
