// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tiflow/engine/enginepb (interfaces: ResourceManagerClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	enginepb "github.com/pingcap/tiflow/engine/enginepb"
	grpc "google.golang.org/grpc"
)

// MockResourceManagerClient is a mock of ResourceManagerClient interface.
type MockResourceManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerClientMockRecorder
}

// MockResourceManagerClientMockRecorder is the mock recorder for MockResourceManagerClient.
type MockResourceManagerClientMockRecorder struct {
	mock *MockResourceManagerClient
}

// NewMockResourceManagerClient creates a new mock instance.
func NewMockResourceManagerClient(ctrl *gomock.Controller) *MockResourceManagerClient {
	mock := &MockResourceManagerClient{ctrl: ctrl}
	mock.recorder = &MockResourceManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManagerClient) EXPECT() *MockResourceManagerClientMockRecorder {
	return m.recorder
}

// CreateResource mocks base method.
func (m *MockResourceManagerClient) CreateResource(arg0 context.Context, arg1 *enginepb.CreateResourceRequest, arg2 ...grpc.CallOption) (*enginepb.CreateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResource", varargs...)
	ret0, _ := ret[0].(*enginepb.CreateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockResourceManagerClientMockRecorder) CreateResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockResourceManagerClient)(nil).CreateResource), varargs...)
}

// QueryResource mocks base method.
func (m *MockResourceManagerClient) QueryResource(arg0 context.Context, arg1 *enginepb.QueryResourceRequest, arg2 ...grpc.CallOption) (*enginepb.QueryResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryResource", varargs...)
	ret0, _ := ret[0].(*enginepb.QueryResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryResource indicates an expected call of QueryResource.
func (mr *MockResourceManagerClientMockRecorder) QueryResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResource", reflect.TypeOf((*MockResourceManagerClient)(nil).QueryResource), varargs...)
}

// RemoveResource mocks base method.
func (m *MockResourceManagerClient) RemoveResource(arg0 context.Context, arg1 *enginepb.RemoveResourceRequest, arg2 ...grpc.CallOption) (*enginepb.RemoveResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveResource", varargs...)
	ret0, _ := ret[0].(*enginepb.RemoveResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveResource indicates an expected call of RemoveResource.
func (mr *MockResourceManagerClientMockRecorder) RemoveResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResource", reflect.TypeOf((*MockResourceManagerClient)(nil).RemoveResource), varargs...)
}
