// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pingcap/tiflow/engine/enginepb (interfaces: ExecutorServiceClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	enginepb "github.com/pingcap/tiflow/engine/enginepb"
	grpc "google.golang.org/grpc"
)

// MockExecutorServiceClient is a mock of ExecutorServiceClient interface.
type MockExecutorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorServiceClientMockRecorder
}

// MockExecutorServiceClientMockRecorder is the mock recorder for MockExecutorServiceClient.
type MockExecutorServiceClientMockRecorder struct {
	mock *MockExecutorServiceClient
}

// NewMockExecutorServiceClient creates a new mock instance.
func NewMockExecutorServiceClient(ctrl *gomock.Controller) *MockExecutorServiceClient {
	mock := &MockExecutorServiceClient{ctrl: ctrl}
	mock.recorder = &MockExecutorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorServiceClient) EXPECT() *MockExecutorServiceClientMockRecorder {
	return m.recorder
}

// ConfirmDispatchTask mocks base method.
func (m *MockExecutorServiceClient) ConfirmDispatchTask(arg0 context.Context, arg1 *enginepb.ConfirmDispatchTaskRequest, arg2 ...grpc.CallOption) (*enginepb.ConfirmDispatchTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmDispatchTask", varargs...)
	ret0, _ := ret[0].(*enginepb.ConfirmDispatchTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmDispatchTask indicates an expected call of ConfirmDispatchTask.
func (mr *MockExecutorServiceClientMockRecorder) ConfirmDispatchTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmDispatchTask", reflect.TypeOf((*MockExecutorServiceClient)(nil).ConfirmDispatchTask), varargs...)
}

// PreDispatchTask mocks base method.
func (m *MockExecutorServiceClient) PreDispatchTask(arg0 context.Context, arg1 *enginepb.PreDispatchTaskRequest, arg2 ...grpc.CallOption) (*enginepb.PreDispatchTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreDispatchTask", varargs...)
	ret0, _ := ret[0].(*enginepb.PreDispatchTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreDispatchTask indicates an expected call of PreDispatchTask.
func (mr *MockExecutorServiceClientMockRecorder) PreDispatchTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreDispatchTask", reflect.TypeOf((*MockExecutorServiceClient)(nil).PreDispatchTask), varargs...)
}
