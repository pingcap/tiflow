// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: executor.proto

package enginepb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PreDispatchTaskRequest struct {
	TaskTypeId  int64        `protobuf:"varint,1,opt,name=task_type_id,json=taskTypeId,proto3" json:"task_type_id,omitempty"`
	TaskConfig  []byte       `protobuf:"bytes,2,opt,name=task_config,json=taskConfig,proto3" json:"task_config,omitempty"`
	MasterId    string       `protobuf:"bytes,3,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
	WorkerId    string       `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ProjectInfo *ProjectInfo `protobuf:"bytes,5,opt,name=project_info,json=projectInfo,proto3" json:"project_info,omitempty"`
	// request_id should be a UUID unique for each RPC call.
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *PreDispatchTaskRequest) Reset()         { *m = PreDispatchTaskRequest{} }
func (m *PreDispatchTaskRequest) String() string { return proto.CompactTextString(m) }
func (*PreDispatchTaskRequest) ProtoMessage()    {}
func (*PreDispatchTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}
func (m *PreDispatchTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreDispatchTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreDispatchTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreDispatchTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreDispatchTaskRequest.Merge(m, src)
}
func (m *PreDispatchTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *PreDispatchTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreDispatchTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreDispatchTaskRequest proto.InternalMessageInfo

func (m *PreDispatchTaskRequest) GetTaskTypeId() int64 {
	if m != nil {
		return m.TaskTypeId
	}
	return 0
}

func (m *PreDispatchTaskRequest) GetTaskConfig() []byte {
	if m != nil {
		return m.TaskConfig
	}
	return nil
}

func (m *PreDispatchTaskRequest) GetMasterId() string {
	if m != nil {
		return m.MasterId
	}
	return ""
}

func (m *PreDispatchTaskRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *PreDispatchTaskRequest) GetProjectInfo() *ProjectInfo {
	if m != nil {
		return m.ProjectInfo
	}
	return nil
}

func (m *PreDispatchTaskRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type PreDispatchTaskResponse struct {
}

func (m *PreDispatchTaskResponse) Reset()         { *m = PreDispatchTaskResponse{} }
func (m *PreDispatchTaskResponse) String() string { return proto.CompactTextString(m) }
func (*PreDispatchTaskResponse) ProtoMessage()    {}
func (*PreDispatchTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{1}
}
func (m *PreDispatchTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreDispatchTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreDispatchTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreDispatchTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreDispatchTaskResponse.Merge(m, src)
}
func (m *PreDispatchTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *PreDispatchTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PreDispatchTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PreDispatchTaskResponse proto.InternalMessageInfo

type ConfirmDispatchTaskRequest struct {
	WorkerId  string `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *ConfirmDispatchTaskRequest) Reset()         { *m = ConfirmDispatchTaskRequest{} }
func (m *ConfirmDispatchTaskRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmDispatchTaskRequest) ProtoMessage()    {}
func (*ConfirmDispatchTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{2}
}
func (m *ConfirmDispatchTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmDispatchTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmDispatchTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmDispatchTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmDispatchTaskRequest.Merge(m, src)
}
func (m *ConfirmDispatchTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmDispatchTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmDispatchTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmDispatchTaskRequest proto.InternalMessageInfo

func (m *ConfirmDispatchTaskRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

func (m *ConfirmDispatchTaskRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type ConfirmDispatchTaskResponse struct {
}

func (m *ConfirmDispatchTaskResponse) Reset()         { *m = ConfirmDispatchTaskResponse{} }
func (m *ConfirmDispatchTaskResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmDispatchTaskResponse) ProtoMessage()    {}
func (*ConfirmDispatchTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{3}
}
func (m *ConfirmDispatchTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmDispatchTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmDispatchTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmDispatchTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmDispatchTaskResponse.Merge(m, src)
}
func (m *ConfirmDispatchTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmDispatchTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmDispatchTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmDispatchTaskResponse proto.InternalMessageInfo

type RemoveLocalResourceRequest struct {
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	CreatorId  string `protobuf:"bytes,2,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
}

func (m *RemoveLocalResourceRequest) Reset()         { *m = RemoveLocalResourceRequest{} }
func (m *RemoveLocalResourceRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveLocalResourceRequest) ProtoMessage()    {}
func (*RemoveLocalResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{4}
}
func (m *RemoveLocalResourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveLocalResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveLocalResourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveLocalResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveLocalResourceRequest.Merge(m, src)
}
func (m *RemoveLocalResourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveLocalResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveLocalResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveLocalResourceRequest proto.InternalMessageInfo

func (m *RemoveLocalResourceRequest) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *RemoveLocalResourceRequest) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

type RemoveLocalResourceResponse struct {
}

func (m *RemoveLocalResourceResponse) Reset()         { *m = RemoveLocalResourceResponse{} }
func (m *RemoveLocalResourceResponse) String() string { return proto.CompactTextString(m) }
func (*RemoveLocalResourceResponse) ProtoMessage()    {}
func (*RemoveLocalResourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{5}
}
func (m *RemoveLocalResourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveLocalResourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveLocalResourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveLocalResourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveLocalResourceResponse.Merge(m, src)
}
func (m *RemoveLocalResourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveLocalResourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveLocalResourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveLocalResourceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PreDispatchTaskRequest)(nil), "enginepb.PreDispatchTaskRequest")
	proto.RegisterType((*PreDispatchTaskResponse)(nil), "enginepb.PreDispatchTaskResponse")
	proto.RegisterType((*ConfirmDispatchTaskRequest)(nil), "enginepb.ConfirmDispatchTaskRequest")
	proto.RegisterType((*ConfirmDispatchTaskResponse)(nil), "enginepb.ConfirmDispatchTaskResponse")
	proto.RegisterType((*RemoveLocalResourceRequest)(nil), "enginepb.RemoveLocalResourceRequest")
	proto.RegisterType((*RemoveLocalResourceResponse)(nil), "enginepb.RemoveLocalResourceResponse")
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor_12d1cdcda51e000f) }

var fileDescriptor_12d1cdcda51e000f = []byte{
<<<<<<< HEAD:engine/enginepb/executor.pb.go
<<<<<<< HEAD:engine/enginepb/executor.pb.go
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0xae, 0xd2, 0x40,
	0x14, 0xc6, 0x3b, 0xa0, 0x08, 0x07, 0xc4, 0x64, 0x4c, 0x04, 0x4b, 0x28, 0xb5, 0xd1, 0x84, 0x15,
	0x0b, 0x7c, 0x03, 0xd4, 0x45, 0x13, 0x17, 0xa6, 0xb2, 0x60, 0x61, 0x42, 0x4a, 0x7b, 0xc4, 0xa6,
	0xd2, 0xa9, 0x33, 0x53, 0x94, 0xb7, 0xf0, 0xb1, 0x8c, 0xc9, 0x4d, 0x58, 0xde, 0xe5, 0x0d, 0xbc,
	0xc8, 0x4d, 0x3b, 0x6d, 0xf8, 0x73, 0x0b, 0x77, 0xc9, 0xf7, 0x9d, 0x99, 0xdf, 0xf9, 0x3e, 0xa6,
	0xd0, 0xc6, 0x3f, 0xe8, 0x25, 0x92, 0xf1, 0x51, 0xcc, 0x99, 0x64, 0xb4, 0x8e, 0xd1, 0x32, 0x88,
	0x30, 0x5e, 0x58, 0x37, 0x04, 0x5e, 0x7d, 0xe1, 0xf8, 0x31, 0x10, 0xb1, 0x2b, 0xbd, 0x1f, 0x53,
	0x57, 0x84, 0x0e, 0xfe, 0x4a, 0x50, 0x48, 0x6a, 0x42, 0x4b, 0xba, 0x22, 0x9c, 0xcb, 0x4d, 0x8c,
	0xf3, 0xc0, 0xef, 0x12, 0x93, 0x0c, 0xab, 0x0e, 0xa4, 0xda, 0x74, 0x13, 0xa3, 0xed, 0xd3, 0x01,
	0x34, 0xb3, 0x09, 0x8f, 0x45, 0xdf, 0x83, 0x65, 0xb7, 0x62, 0x92, 0x61, 0x4b, 0x0d, 0x7c, 0xc8,
	0x14, 0xda, 0x83, 0xc6, 0xca, 0x15, 0x12, 0x79, 0x7a, 0xbe, 0x6a, 0x92, 0x61, 0xc3, 0xa9, 0x2b,
	0xc1, 0xf6, 0x53, 0xf3, 0x37, 0xe3, 0xa1, 0x32, 0x9f, 0x28, 0x53, 0x09, 0xb6, 0x4f, 0x3b, 0xf0,
	0x2c, 0x11, 0xca, 0x7a, 0x9a, 0x59, 0xb5, 0xf4, 0xa7, 0xed, 0xd3, 0x3e, 0x00, 0x57, 0x0b, 0xa6,
	0x5e, 0x2d, 0xf3, 0x1a, 0xb9, 0x62, 0xfb, 0xd6, 0x6b, 0xe8, 0x3c, 0x88, 0x23, 0x62, 0x16, 0x09,
	0xb4, 0x66, 0xa0, 0x67, 0x6b, 0xf1, 0x55, 0x59, 0xda, 0x93, 0x6d, 0xc8, 0xd9, 0x36, 0xa7, 0xd0,
	0xca, 0x39, 0xb4, 0x0f, 0xbd, 0xd2, 0x9b, 0x73, 0xf0, 0x37, 0xd0, 0x1d, 0x5c, 0xb1, 0x35, 0x7e,
	0x66, 0x9e, 0xfb, 0xd3, 0x41, 0xc1, 0x12, 0xee, 0x61, 0x01, 0x1e, 0x40, 0x93, 0xe7, 0xd2, 0x01,
	0x0d, 0x85, 0xa4, 0xe0, 0x1e, 0x47, 0x57, 0x32, 0x7e, 0x04, 0xcf, 0x15, 0x05, 0x2f, 0xbd, 0x5d,
	0xc1, 0xc7, 0xff, 0x09, 0xd4, 0x3f, 0xe5, 0xff, 0x3e, 0x9d, 0xc1, 0x8b, 0xb3, 0x76, 0xa8, 0x39,
	0x2a, 0xde, 0xc2, 0xa8, 0xfc, 0x1d, 0xe8, 0x6f, 0xae, 0x4c, 0xe4, 0x09, 0x35, 0xea, 0xc3, 0xcb,
	0x92, 0x0a, 0xe8, 0xdb, 0xc3, 0xd9, 0xcb, 0xdd, 0xeb, 0xef, 0x1e, 0x99, 0x2a, 0x28, 0xe3, 0x18,
	0x9e, 0x4f, 0x38, 0x0b, 0x91, 0x7f, 0x45, 0xbe, 0x0e, 0x3c, 0xa4, 0x73, 0x68, 0xab, 0xf0, 0x45,
	0xee, 0x63, 0xe2, 0xe5, 0xd2, 0x8f, 0x89, 0x57, 0xca, 0xb3, 0xb4, 0x49, 0xf7, 0xdf, 0xce, 0x20,
	0xdb, 0x9d, 0x41, 0xee, 0x76, 0x06, 0xf9, 0xbb, 0x37, 0xb4, 0xed, 0xde, 0xd0, 0x6e, 0xf7, 0x86,
	0xb6, 0xa8, 0x65, 0x9f, 0xd2, 0xfb, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x72, 0x53, 0xf8,
	0x5c, 0x03, 0x00, 0x00,
=======
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0xae, 0xd2, 0x40,
	0x14, 0x86, 0x3b, 0x5c, 0xbd, 0x5e, 0x0e, 0x57, 0x48, 0xc6, 0x44, 0x6b, 0x09, 0xa5, 0xe9, 0xaa,
	0x6e, 0x58, 0xe0, 0x1b, 0xa0, 0x2e, 0x9a, 0xb0, 0x20, 0x85, 0x05, 0x0b, 0x13, 0x52, 0xa6, 0x07,
	0xad, 0x15, 0x66, 0x9c, 0x19, 0x50, 0xde, 0xc2, 0x67, 0xf1, 0x29, 0x5c, 0xb2, 0x74, 0xa7, 0x81,
	0x17, 0x31, 0xed, 0xb4, 0x51, 0xb0, 0xb8, 0xfd, 0xff, 0x99, 0xf3, 0x9d, 0xff, 0xcf, 0x0c, 0xb4,
	0xf1, 0x0b, 0xb2, 0xad, 0xe6, 0x72, 0x20, 0x24, 0xd7, 0x9c, 0x36, 0xc4, 0xd2, 0x69, 0x0b, 0xc9,
	0x3f, 0x20, 0xd3, 0xca, 0x68, 0xfe, 0x4f, 0x02, 0x4f, 0x27, 0x12, 0x5f, 0xa7, 0x4a, 0xc4, 0x9a,
	0xbd, 0x9f, 0xc5, 0x2a, 0x8b, 0xf0, 0xd3, 0x16, 0x95, 0xa6, 0x1e, 0xdc, 0xeb, 0x58, 0x65, 0x0b,
	0xbd, 0x17, 0xb8, 0x48, 0x13, 0x9b, 0x78, 0x24, 0xb8, 0x89, 0x20, 0xd7, 0x66, 0x7b, 0x81, 0x61,
	0x42, 0xfb, 0xd0, 0x2a, 0x4e, 0x30, 0xbe, 0x59, 0xa5, 0xef, 0xec, 0x86, 0x47, 0x82, 0x7b, 0x73,
	0xe0, 0x55, 0xa1, 0xd0, 0x2e, 0x34, 0xd7, 0xb1, 0xd2, 0x28, 0xf3, 0xfb, 0x37, 0x1e, 0x09, 0x9a,
	0xd1, 0x9d, 0x11, 0xc2, 0x24, 0x37, 0x3f, 0x73, 0x99, 0x19, 0xf3, 0x81, 0x31, 0x8d, 0x10, 0x26,
	0xf4, 0x05, 0x3c, 0x2a, 0x37, 0xb5, 0x1f, 0x7a, 0x24, 0x68, 0x0d, 0x3b, 0x03, 0xb1, 0x1c, 0x4c,
	0x8c, 0x14, 0x6e, 0x56, 0x3c, 0xaa, 0x7c, 0xda, 0x03, 0x90, 0x66, 0xe5, 0x7c, 0xd0, 0x6d, 0x31,
	0xa8, 0x59, 0x2a, 0x61, 0xe2, 0x3f, 0x87, 0x67, 0xff, 0x04, 0x54, 0x82, 0x6f, 0x14, 0xfa, 0x73,
	0x70, 0x8a, 0x45, 0xe5, 0xba, 0x2e, 0xff, 0xd9, 0x7e, 0xe4, 0x62, 0xbf, 0x73, 0x68, 0xe3, 0x12,
	0xda, 0x83, 0x6e, 0xed, 0xe4, 0x12, 0xfc, 0x16, 0x9c, 0x08, 0xd7, 0x7c, 0x87, 0x63, 0xce, 0xe2,
	0x8f, 0x11, 0x2a, 0xbe, 0x95, 0x0c, 0x2b, 0x70, 0x1f, 0x5a, 0xb2, 0x94, 0xfe, 0xa0, 0xa1, 0x92,
	0x0c, 0x9c, 0x49, 0x8c, 0x35, 0x97, 0x7f, 0xc1, 0x4b, 0xc5, 0xc0, 0x6b, 0xa7, 0x1b, 0xf8, 0xf0,
	0x1b, 0x81, 0xbb, 0x37, 0xe5, 0xcb, 0xa0, 0x63, 0xe8, 0x5c, 0xb4, 0x43, 0x1d, 0xd3, 0x74, 0xdd,
	0x9b, 0x70, 0xba, 0xb5, 0x5e, 0x99, 0xca, 0xa2, 0x73, 0x78, 0x52, 0x13, 0x9b, 0xba, 0xf9, 0xad,
	0xeb, 0x4d, 0x3b, 0xfd, 0xab, 0x7e, 0x35, 0x79, 0x98, 0xc0, 0xe3, 0x91, 0xe4, 0x19, 0xca, 0x29,
	0xca, 0x5d, 0xca, 0x90, 0x4e, 0xa1, 0x6d, 0x42, 0x56, 0xf9, 0x0c, 0xe5, 0x7a, 0xad, 0x86, 0xf2,
	0x9f, 0x62, 0x7c, 0x6b, 0x64, 0x7f, 0x3f, 0xba, 0xe4, 0x70, 0x74, 0xc9, 0xaf, 0xa3, 0x4b, 0xbe,
	0x9e, 0x5c, 0xeb, 0x70, 0x72, 0xad, 0x1f, 0x27, 0xd7, 0x5a, 0xde, 0x16, 0xdf, 0xe5, 0xe5, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0x73, 0xcd, 0xb0, 0x54, 0x03, 0x00, 0x00,
>>>>>>> 067f67c6e (feat(proto): add project proto):engine/pb/executor.pb.go
=======
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x86, 0xbd, 0x39, 0x38, 0x5d, 0xc6, 0x21, 0x27, 0x2d, 0x12, 0x18, 0x47, 0xe7, 0x58, 0xae,
	0x5c, 0xa5, 0x30, 0x6f, 0x70, 0x40, 0x61, 0xe9, 0x8a, 0x93, 0xef, 0x8a, 0x2b, 0x90, 0x22, 0x67,
	0x3d, 0x01, 0x63, 0xe2, 0x5d, 0x76, 0x37, 0x81, 0xbc, 0x05, 0xcf, 0xc2, 0x53, 0x50, 0xa6, 0xa4,
	0x44, 0x49, 0xc3, 0x63, 0x20, 0x7b, 0x6d, 0x85, 0x04, 0xe7, 0x4a, 0x7f, 0xb3, 0x3b, 0xdf, 0xcc,
	0xaf, 0x35, 0x0c, 0xf1, 0x1b, 0xb2, 0xa5, 0xe6, 0x72, 0x22, 0x24, 0xd7, 0x9c, 0xf6, 0xc4, 0xcc,
	0x1d, 0x0a, 0xc9, 0x3f, 0x21, 0xd3, 0xca, 0xb0, 0xe0, 0x0f, 0x81, 0x17, 0xb7, 0x12, 0xdf, 0xe6,
	0x4a, 0xa4, 0x9a, 0x7d, 0xbc, 0x4f, 0x55, 0x91, 0xe0, 0x97, 0x25, 0x2a, 0x4d, 0x7d, 0x18, 0xe8,
	0x54, 0x15, 0x53, 0xbd, 0x16, 0x38, 0xcd, 0x33, 0x87, 0xf8, 0x24, 0x3c, 0x4b, 0xa0, 0x62, 0xf7,
	0x6b, 0x81, 0x71, 0x46, 0xc7, 0x60, 0xd7, 0x27, 0x18, 0x2f, 0xe7, 0xf9, 0x07, 0xa7, 0xe7, 0x93,
	0x70, 0x60, 0x0e, 0xbc, 0xa9, 0x09, 0x1d, 0x41, 0x7f, 0x91, 0x2a, 0x8d, 0xb2, 0xba, 0x7f, 0xe6,
	0x93, 0xb0, 0x9f, 0x5c, 0x18, 0x10, 0x67, 0x55, 0xf1, 0x2b, 0x97, 0x85, 0x29, 0x3e, 0x31, 0x45,
	0x03, 0xe2, 0x8c, 0x46, 0x30, 0x68, 0x26, 0x9d, 0xe6, 0xe5, 0x9c, 0x3b, 0x4f, 0x7d, 0x12, 0xda,
	0xd1, 0xe5, 0x44, 0xcc, 0x26, 0xb7, 0x86, 0xc7, 0xe5, 0x9c, 0x27, 0xb6, 0xd8, 0x7f, 0xd0, 0x2b,
	0x00, 0x69, 0x66, 0xaf, 0x3a, 0x9e, 0xd7, 0x1d, 0xfb, 0x0d, 0x89, 0xb3, 0xe0, 0x15, 0xbc, 0xfc,
	0x6f, 0x53, 0x25, 0x78, 0xa9, 0x30, 0x78, 0x00, 0xb7, 0x9e, 0x58, 0x2e, 0xba, 0x82, 0x38, 0x18,
	0x94, 0x1c, 0x0d, 0x7a, 0x28, 0xed, 0x1d, 0x4b, 0xaf, 0x60, 0xd4, 0xd9, 0xb9, 0x11, 0xbf, 0x07,
	0x37, 0xc1, 0x05, 0x5f, 0xe1, 0x0d, 0x67, 0xe9, 0xe7, 0x04, 0x15, 0x5f, 0x4a, 0x86, 0xad, 0x78,
	0x0c, 0xb6, 0x6c, 0xd0, 0x5e, 0x0d, 0x2d, 0x32, 0x72, 0x26, 0x31, 0xd5, 0x5c, 0xfe, 0x23, 0x6f,
	0x88, 0x91, 0x77, 0x76, 0x37, 0xf2, 0xe8, 0x07, 0x81, 0x8b, 0x77, 0xcd, 0x13, 0xa1, 0x37, 0x70,
	0x79, 0x94, 0x0e, 0x75, 0x4d, 0xda, 0x5d, 0x8f, 0xc3, 0x1d, 0x75, 0xd6, 0x9a, 0xad, 0x2c, 0xfa,
	0x00, 0xcf, 0x3b, 0xd6, 0xa6, 0x5e, 0x75, 0xeb, 0x74, 0xd2, 0xee, 0xf8, 0x64, 0xbd, 0xed, 0x1c,
	0x65, 0xf0, 0xec, 0x5a, 0xf2, 0x02, 0xe5, 0x1d, 0xca, 0x55, 0xce, 0x90, 0xde, 0xc1, 0xd0, 0x2c,
	0xd9, 0xee, 0x67, 0x2c, 0xa7, 0x63, 0x35, 0x96, 0x47, 0x82, 0x09, 0xac, 0x6b, 0xe7, 0xe7, 0xd6,
	0x23, 0x9b, 0xad, 0x47, 0x7e, 0x6f, 0x3d, 0xf2, 0x7d, 0xe7, 0x59, 0x9b, 0x9d, 0x67, 0xfd, 0xda,
	0x79, 0xd6, 0xec, 0xbc, 0xfe, 0x6f, 0x5e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x03, 0xf4,
	0xd5, 0x5d, 0x03, 0x00, 0x00,
>>>>>>> 6d214f177 (feat(project): framework support multi-projects):engine/pb/executor.pb.go
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorClient interface {
	PreDispatchTask(ctx context.Context, in *PreDispatchTaskRequest, opts ...grpc.CallOption) (*PreDispatchTaskResponse, error)
	ConfirmDispatchTask(ctx context.Context, in *ConfirmDispatchTaskRequest, opts ...grpc.CallOption) (*ConfirmDispatchTaskResponse, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) PreDispatchTask(ctx context.Context, in *PreDispatchTaskRequest, opts ...grpc.CallOption) (*PreDispatchTaskResponse, error) {
	out := new(PreDispatchTaskResponse)
	err := c.cc.Invoke(ctx, "/enginepb.Executor/PreDispatchTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) ConfirmDispatchTask(ctx context.Context, in *ConfirmDispatchTaskRequest, opts ...grpc.CallOption) (*ConfirmDispatchTaskResponse, error) {
	out := new(ConfirmDispatchTaskResponse)
	err := c.cc.Invoke(ctx, "/enginepb.Executor/ConfirmDispatchTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServer is the server API for Executor service.
type ExecutorServer interface {
	PreDispatchTask(context.Context, *PreDispatchTaskRequest) (*PreDispatchTaskResponse, error)
	ConfirmDispatchTask(context.Context, *ConfirmDispatchTaskRequest) (*ConfirmDispatchTaskResponse, error)
}

// UnimplementedExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (*UnimplementedExecutorServer) PreDispatchTask(ctx context.Context, req *PreDispatchTaskRequest) (*PreDispatchTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreDispatchTask not implemented")
}
func (*UnimplementedExecutorServer) ConfirmDispatchTask(ctx context.Context, req *ConfirmDispatchTaskRequest) (*ConfirmDispatchTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDispatchTask not implemented")
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_PreDispatchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreDispatchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).PreDispatchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginepb.Executor/PreDispatchTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).PreDispatchTask(ctx, req.(*PreDispatchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_ConfirmDispatchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmDispatchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).ConfirmDispatchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginepb.Executor/ConfirmDispatchTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).ConfirmDispatchTask(ctx, req.(*ConfirmDispatchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enginepb.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreDispatchTask",
			Handler:    _Executor_PreDispatchTask_Handler,
		},
		{
			MethodName: "ConfirmDispatchTask",
			Handler:    _Executor_ConfirmDispatchTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "executor.proto",
}

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrokerServiceClient interface {
	RemoveResource(ctx context.Context, in *RemoveLocalResourceRequest, opts ...grpc.CallOption) (*RemoveLocalResourceResponse, error)
}

type brokerServiceClient struct {
	cc *grpc.ClientConn
}

func NewBrokerServiceClient(cc *grpc.ClientConn) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) RemoveResource(ctx context.Context, in *RemoveLocalResourceRequest, opts ...grpc.CallOption) (*RemoveLocalResourceResponse, error) {
	out := new(RemoveLocalResourceResponse)
	err := c.cc.Invoke(ctx, "/enginepb.BrokerService/RemoveResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
type BrokerServiceServer interface {
	RemoveResource(context.Context, *RemoveLocalResourceRequest) (*RemoveLocalResourceResponse, error)
}

// UnimplementedBrokerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBrokerServiceServer struct {
}

func (*UnimplementedBrokerServiceServer) RemoveResource(ctx context.Context, req *RemoveLocalResourceRequest) (*RemoveLocalResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResource not implemented")
}

func RegisterBrokerServiceServer(s *grpc.Server, srv BrokerServiceServer) {
	s.RegisterService(&_BrokerService_serviceDesc, srv)
}

func _BrokerService_RemoveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLocalResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RemoveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enginepb.BrokerService/RemoveResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RemoveResource(ctx, req.(*RemoveLocalResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enginepb.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveResource",
			Handler:    _BrokerService_RemoveResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "executor.proto",
}

func (m *PreDispatchTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreDispatchTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreDispatchTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x32
	}
	if m.ProjectInfo != nil {
		{
			size, err := m.ProjectInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WorkerId) > 0 {
		i -= len(m.WorkerId)
		copy(dAtA[i:], m.WorkerId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.WorkerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MasterId) > 0 {
		i -= len(m.MasterId)
		copy(dAtA[i:], m.MasterId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.MasterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskConfig) > 0 {
		i -= len(m.TaskConfig)
		copy(dAtA[i:], m.TaskConfig)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.TaskConfig)))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskTypeId != 0 {
		i = encodeVarintExecutor(dAtA, i, uint64(m.TaskTypeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreDispatchTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreDispatchTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreDispatchTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConfirmDispatchTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmDispatchTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmDispatchTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkerId) > 0 {
		i -= len(m.WorkerId)
		copy(dAtA[i:], m.WorkerId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.WorkerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmDispatchTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmDispatchTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmDispatchTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveLocalResourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveLocalResourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveLocalResourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreatorId) > 0 {
		i -= len(m.CreatorId)
		copy(dAtA[i:], m.CreatorId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.CreatorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveLocalResourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveLocalResourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveLocalResourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintExecutor(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PreDispatchTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskTypeId != 0 {
		n += 1 + sovExecutor(uint64(m.TaskTypeId))
	}
	l = len(m.TaskConfig)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	l = len(m.MasterId)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	l = len(m.WorkerId)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.ProjectInfo != nil {
		l = m.ProjectInfo.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}

func (m *PreDispatchTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConfirmDispatchTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkerId)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}

func (m *ConfirmDispatchTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveLocalResourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	l = len(m.CreatorId)
	if l > 0 {
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}

func (m *RemoveLocalResourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovExecutor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutor(x uint64) (n int) {
	return sovExecutor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PreDispatchTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreDispatchTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreDispatchTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTypeId", wireType)
			}
			m.TaskTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskTypeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskConfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskConfig = append(m.TaskConfig[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskConfig == nil {
				m.TaskConfig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProjectInfo == nil {
				m.ProjectInfo = &ProjectInfo{}
			}
			if err := m.ProjectInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreDispatchTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreDispatchTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreDispatchTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmDispatchTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmDispatchTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmDispatchTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmDispatchTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmDispatchTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmDispatchTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveLocalResourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveLocalResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveLocalResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveLocalResourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveLocalResourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveLocalResourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutor = fmt.Errorf("proto: unexpected end of group")
)
