syntax = "proto3";

package pb;

import "error.proto";
import "metastore.proto";

// I'm trying to phase out the communication protocal.
// - system level
//   - Register Executor. After a executor bootstrapped, it has to register itself to join the cluster.


service Master {
    rpc RegisterExecutor(RegisterExecutorRequest) returns(RegisterExecutorResponse) {}

    rpc SubmitJob(SubmitJobRequest) returns(SubmitJobResponse) {
        // TODO: Support HTTP api
        //option (google.api.http) = {
        //    post: "/apis/v1/jobs"
        //    body: "*"
        //};
    }

    rpc QueryJob(QueryJobRequest) returns(QueryJobResponse) {}

    rpc PauseJob(PauseJobRequest) returns(PauseJobResponse) {}

    rpc CancelJob(CancelJobRequest) returns(CancelJobResponse) {}

    //GetMembers returns the available master members
    //rpc GetMembers(GetMembersRequest) {}

    rpc Heartbeat(HeartbeatRequest) returns(HeartbeatResponse) {}
    // TODO: Support more interface.

    // - PutClusterConfig

    rpc ScheduleTask(ScheduleTaskRequest) returns(ScheduleTaskResponse) {}

    /* Metastore manager API */
    // RegisterMetaStore is called from backend metastore and
    // registers to server master metastore manager
    rpc RegisterMetaStore(RegisterMetaStoreRequest) returns(RegisterMetaStoreResponse) {}

    // QueryMetaStore queries metastore manager and returns
    // the information of a matching metastore
    rpc QueryMetaStore(QueryMetaStoreRequest) returns(QueryMetaStoreResponse) {}

    // ReportExecutorWorkload is called from executor to server master to report
    // resource usage in executor.
    rpc ReportExecutorWorkload(ExecWorkloadRequest) returns(ExecWorkloadResponse) {}

    // PersistResource is called from executor to indicate some workers on it wants
    // to persist resource files.
    rpc PersistResource(PersistResourceRequest) returns(PersistResourceResponse) {}
}

message HeartbeatRequest {
    string executor_id = 1;
    int32 resource_usage = 2;
    int32 status = 3;
    
    uint64 timestamp = 4;
    uint64 ttl = 5;
}

message HeartbeatResponse {
    Error err = 1;
    string leader = 2;
    repeated string addrs = 3;
}

enum JobType {
    CVSDemo = 0;
    DM = 1;
    CDC = 2;
    FakeJob = 3;
}

message SubmitJobRequest {
    JobType tp = 1;
    bytes config = 2;
    // User name, token, etc...
    string user = 3;
    // TODO: Resource Limit
}

message QueryJobRequest {
    string job_id = 1;
}

message WorkerInfo {
    string id = 1;
    string executor_id = 2;
    bytes  status = 3;
    bytes  config = 4;
    bool  is_tombstone = 5;
    int64  last_hb_time = 6;
    int64  workload = 7;
}

message QueryJobResponse {
    enum JobStatus {
        init = 0;
        pending = 1;
        online = 2;
        dispatched = 3;
        finished = 4;
        stopped = 5;
    }
    int64   tp = 1;
    bytes config = 2;
    JobStatus status = 3;
    WorkerInfo job_master_info = 4;
    Error err = 5;
}

message CancelJobRequest {
    int32 job_id = 1 [deprecated=true];
    string job_id_str = 2;
}

message PauseJobRequest {
    int32 job_id = 1 [deprecated=true];
    string job_id_str = 2;
}

message SubmitJobResponse {
    Error err = 1;
    int32 job_id = 2 [deprecated=true];
    string job_id_str = 3;
}

message PauseJobResponse {
    Error err = 1;
}

message CancelJobResponse {
    Error err = 1;
}

message RegisterExecutorRequest {
    // dm need 'worker-name' to locate the worker.
    // TODO: Do we really need a "worker name"? Can we use address to identify an executor?
    string address = 1;
    string version = 2;
    int64  capability = 3;
}

message RegisterExecutorResponse {
    Error err = 1;
    string  executor_id = 2;
}

message ScheduleTaskRequest {
    string task_id = 1;
    int64 cost = 2;
    repeated string resource_requirements = 3;
}

message ScheduleTaskResponse {
    string executor_id = 1;
    string executor_addr = 2;
}

message ExecWorkload {
    JobType tp = 1;
    int32 usage = 2;
}

message ExecWorkloadRequest {
    string executor_id = 1;
    repeated ExecWorkload workloads = 2;
    repeated string resource_id = 3;
}

message ExecWorkloadResponse {
    Error err = 1;
}

message PersistResourceRequest {
    string executor_id = 1;
    string resource_id = 2;
}

message PersistResourceResponse {
    Error err = 1;
}
