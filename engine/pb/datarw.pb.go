// Copyright 2022 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: datarw.proto

package pb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenerateDataRequest struct {
	FileNum   int32 `protobuf:"varint,1,opt,name=file_num,json=fileNum,proto3" json:"file_num,omitempty"`
	RecordNum int32 `protobuf:"varint,2,opt,name=record_num,json=recordNum,proto3" json:"record_num,omitempty"`
}

func (m *GenerateDataRequest) Reset()         { *m = GenerateDataRequest{} }
func (m *GenerateDataRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateDataRequest) ProtoMessage()    {}
func (*GenerateDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{0}
}
func (m *GenerateDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateDataRequest.Merge(m, src)
}
func (m *GenerateDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateDataRequest proto.InternalMessageInfo

func (m *GenerateDataRequest) GetFileNum() int32 {
	if m != nil {
		return m.FileNum
	}
	return 0
}

func (m *GenerateDataRequest) GetRecordNum() int32 {
	if m != nil {
		return m.RecordNum
	}
	return 0
}

type GenerateDataResponse struct {
	ErrMsg string `protobuf:"bytes,1,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *GenerateDataResponse) Reset()         { *m = GenerateDataResponse{} }
func (m *GenerateDataResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateDataResponse) ProtoMessage()    {}
func (*GenerateDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{1}
}
func (m *GenerateDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateDataResponse.Merge(m, src)
}
func (m *GenerateDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateDataResponse proto.InternalMessageInfo

func (m *GenerateDataResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CheckDirRequest struct {
	Dir string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (m *CheckDirRequest) Reset()         { *m = CheckDirRequest{} }
func (m *CheckDirRequest) String() string { return proto.CompactTextString(m) }
func (*CheckDirRequest) ProtoMessage()    {}
func (*CheckDirRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{2}
}
func (m *CheckDirRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckDirRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckDirRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckDirRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckDirRequest.Merge(m, src)
}
func (m *CheckDirRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckDirRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckDirRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckDirRequest proto.InternalMessageInfo

func (m *CheckDirRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

type CheckDirResponse struct {
	ErrMsg     string `protobuf:"bytes,1,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	ErrFileIdx int32  `protobuf:"varint,2,opt,name=err_file_idx,json=errFileIdx,proto3" json:"err_file_idx,omitempty"`
}

func (m *CheckDirResponse) Reset()         { *m = CheckDirResponse{} }
func (m *CheckDirResponse) String() string { return proto.CompactTextString(m) }
func (*CheckDirResponse) ProtoMessage()    {}
func (*CheckDirResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{3}
}
func (m *CheckDirResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckDirResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckDirResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckDirResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckDirResponse.Merge(m, src)
}
func (m *CheckDirResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckDirResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckDirResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckDirResponse proto.InternalMessageInfo

func (m *CheckDirResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CheckDirResponse) GetErrFileIdx() int32 {
	if m != nil {
		return m.ErrFileIdx
	}
	return 0
}

type IsReadyRequest struct {
}

func (m *IsReadyRequest) Reset()         { *m = IsReadyRequest{} }
func (m *IsReadyRequest) String() string { return proto.CompactTextString(m) }
func (*IsReadyRequest) ProtoMessage()    {}
func (*IsReadyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{4}
}
func (m *IsReadyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsReadyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsReadyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsReadyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReadyRequest.Merge(m, src)
}
func (m *IsReadyRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsReadyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReadyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsReadyRequest proto.InternalMessageInfo

type IsReadyResponse struct {
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (m *IsReadyResponse) Reset()         { *m = IsReadyResponse{} }
func (m *IsReadyResponse) String() string { return proto.CompactTextString(m) }
func (*IsReadyResponse) ProtoMessage()    {}
func (*IsReadyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{5}
}
func (m *IsReadyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsReadyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsReadyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsReadyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsReadyResponse.Merge(m, src)
}
func (m *IsReadyResponse) XXX_Size() int {
	return m.Size()
}
func (m *IsReadyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsReadyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsReadyResponse proto.InternalMessageInfo

func (m *IsReadyResponse) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

type ListFilesReq struct {
}

func (m *ListFilesReq) Reset()         { *m = ListFilesReq{} }
func (m *ListFilesReq) String() string { return proto.CompactTextString(m) }
func (*ListFilesReq) ProtoMessage()    {}
func (*ListFilesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{6}
}
func (m *ListFilesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFilesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFilesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFilesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesReq.Merge(m, src)
}
func (m *ListFilesReq) XXX_Size() int {
	return m.Size()
}
func (m *ListFilesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesReq proto.InternalMessageInfo

type ListFilesResponse struct {
	FileNum int32 `protobuf:"varint,1,opt,name=fileNum,proto3" json:"fileNum,omitempty"`
}

func (m *ListFilesResponse) Reset()         { *m = ListFilesResponse{} }
func (m *ListFilesResponse) String() string { return proto.CompactTextString(m) }
func (*ListFilesResponse) ProtoMessage()    {}
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{7}
}
func (m *ListFilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesResponse.Merge(m, src)
}
func (m *ListFilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesResponse proto.InternalMessageInfo

func (m *ListFilesResponse) GetFileNum() int32 {
	if m != nil {
		return m.FileNum
	}
	return 0
}

type ReadLinesRequest struct {
	FileIdx int32  `protobuf:"varint,1,opt,name=fileIdx,proto3" json:"fileIdx,omitempty"`
	LineNo  []byte `protobuf:"bytes,2,opt,name=lineNo,proto3" json:"lineNo,omitempty"`
}

func (m *ReadLinesRequest) Reset()         { *m = ReadLinesRequest{} }
func (m *ReadLinesRequest) String() string { return proto.CompactTextString(m) }
func (*ReadLinesRequest) ProtoMessage()    {}
func (*ReadLinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{8}
}
func (m *ReadLinesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadLinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadLinesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadLinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadLinesRequest.Merge(m, src)
}
func (m *ReadLinesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadLinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadLinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadLinesRequest proto.InternalMessageInfo

func (m *ReadLinesRequest) GetFileIdx() int32 {
	if m != nil {
		return m.FileIdx
	}
	return 0
}

func (m *ReadLinesRequest) GetLineNo() []byte {
	if m != nil {
		return m.LineNo
	}
	return nil
}

type ReadLinesResponse struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val    []byte `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	IsEof  bool   `protobuf:"varint,3,opt,name=isEof,proto3" json:"isEof,omitempty"`
	ErrMsg string `protobuf:"bytes,4,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (m *ReadLinesResponse) Reset()         { *m = ReadLinesResponse{} }
func (m *ReadLinesResponse) String() string { return proto.CompactTextString(m) }
func (*ReadLinesResponse) ProtoMessage()    {}
func (*ReadLinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{9}
}
func (m *ReadLinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadLinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadLinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadLinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadLinesResponse.Merge(m, src)
}
func (m *ReadLinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReadLinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadLinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadLinesResponse proto.InternalMessageInfo

func (m *ReadLinesResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ReadLinesResponse) GetVal() []byte {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ReadLinesResponse) GetIsEof() bool {
	if m != nil {
		return m.IsEof
	}
	return false
}

func (m *ReadLinesResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type WriteLinesRequest struct {
	Dir     string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	FileIdx int32  `protobuf:"varint,2,opt,name=file_idx,json=fileIdx,proto3" json:"file_idx,omitempty"`
	Key     []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WriteLinesRequest) Reset()         { *m = WriteLinesRequest{} }
func (m *WriteLinesRequest) String() string { return proto.CompactTextString(m) }
func (*WriteLinesRequest) ProtoMessage()    {}
func (*WriteLinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{10}
}
func (m *WriteLinesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteLinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteLinesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteLinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteLinesRequest.Merge(m, src)
}
func (m *WriteLinesRequest) XXX_Size() int {
	return m.Size()
}
func (m *WriteLinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteLinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteLinesRequest proto.InternalMessageInfo

func (m *WriteLinesRequest) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *WriteLinesRequest) GetFileIdx() int32 {
	if m != nil {
		return m.FileIdx
	}
	return 0
}

func (m *WriteLinesRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *WriteLinesRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type WriteLinesResponse struct {
	ErrMsg string `protobuf:"bytes,1,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *WriteLinesResponse) Reset()         { *m = WriteLinesResponse{} }
func (m *WriteLinesResponse) String() string { return proto.CompactTextString(m) }
func (*WriteLinesResponse) ProtoMessage()    {}
func (*WriteLinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03dd23a8ba2c07e2, []int{11}
}
func (m *WriteLinesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteLinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteLinesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteLinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteLinesResponse.Merge(m, src)
}
func (m *WriteLinesResponse) XXX_Size() int {
	return m.Size()
}
func (m *WriteLinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteLinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteLinesResponse proto.InternalMessageInfo

func (m *WriteLinesResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*GenerateDataRequest)(nil), "pb.GenerateDataRequest")
	proto.RegisterType((*GenerateDataResponse)(nil), "pb.GenerateDataResponse")
	proto.RegisterType((*CheckDirRequest)(nil), "pb.CheckDirRequest")
	proto.RegisterType((*CheckDirResponse)(nil), "pb.CheckDirResponse")
	proto.RegisterType((*IsReadyRequest)(nil), "pb.IsReadyRequest")
	proto.RegisterType((*IsReadyResponse)(nil), "pb.IsReadyResponse")
	proto.RegisterType((*ListFilesReq)(nil), "pb.ListFilesReq")
	proto.RegisterType((*ListFilesResponse)(nil), "pb.ListFilesResponse")
	proto.RegisterType((*ReadLinesRequest)(nil), "pb.ReadLinesRequest")
	proto.RegisterType((*ReadLinesResponse)(nil), "pb.ReadLinesResponse")
	proto.RegisterType((*WriteLinesRequest)(nil), "pb.WriteLinesRequest")
	proto.RegisterType((*WriteLinesResponse)(nil), "pb.WriteLinesResponse")
}

func init() { proto.RegisterFile("datarw.proto", fileDescriptor_03dd23a8ba2c07e2) }

var fileDescriptor_03dd23a8ba2c07e2 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x13, 0xf2, 0x37, 0x32, 0xad, 0xb3, 0x35, 0xad, 0xb1, 0x84, 0x55, 0x2d, 0x07, 0x7a,
	0x69, 0x40, 0x05, 0x6e, 0x48, 0x08, 0x08, 0xa0, 0x48, 0x6d, 0x90, 0xcc, 0xa1, 0xc7, 0xca, 0x89,
	0xa7, 0xed, 0xaa, 0x8e, 0x9d, 0xae, 0xed, 0x10, 0xde, 0x82, 0xc7, 0xe2, 0xd8, 0x23, 0x47, 0x94,
	0xbc, 0x01, 0x4f, 0x80, 0x76, 0xbd, 0x71, 0x6c, 0xa7, 0x52, 0x6f, 0x9e, 0xd9, 0x6f, 0xe6, 0x9b,
	0x6f, 0xf6, 0x5b, 0x83, 0xee, 0x7b, 0x89, 0xc7, 0x7f, 0xf4, 0x67, 0x3c, 0x4a, 0x22, 0x52, 0x9f,
	0x8d, 0xe9, 0x37, 0xd8, 0xfb, 0x8a, 0x21, 0x72, 0x2f, 0xc1, 0x81, 0x97, 0x78, 0x2e, 0xde, 0xa6,
	0x18, 0x27, 0xe4, 0x29, 0x74, 0x2e, 0x59, 0x80, 0x17, 0x61, 0x3a, 0xb5, 0xb4, 0x43, 0xed, 0xa8,
	0xe9, 0xb6, 0x45, 0x3c, 0x4a, 0xa7, 0xe4, 0x19, 0x00, 0xc7, 0x49, 0xc4, 0x7d, 0x79, 0x58, 0x97,
	0x87, 0xdd, 0x2c, 0x33, 0x4a, 0xa7, 0xf4, 0x25, 0x98, 0xe5, 0x86, 0xf1, 0x2c, 0x0a, 0x63, 0x24,
	0x07, 0xd0, 0x46, 0xce, 0x2f, 0xa6, 0xf1, 0x95, 0x6c, 0xd8, 0x75, 0x5b, 0xc8, 0xf9, 0x59, 0x7c,
	0x45, 0x9f, 0xc3, 0xee, 0xa7, 0x6b, 0x9c, 0xdc, 0x0c, 0x18, 0x5f, 0xb3, 0x1b, 0xd0, 0xf0, 0x19,
	0x57, 0x38, 0xf1, 0x49, 0xcf, 0xc0, 0xd8, 0x80, 0x1e, 0xe8, 0x48, 0x0e, 0x41, 0x17, 0x07, 0x52,
	0x00, 0xf3, 0x17, 0x6a, 0x46, 0x40, 0xce, 0xbf, 0xb0, 0x00, 0x87, 0xfe, 0x82, 0x1a, 0xb0, 0x33,
	0x8c, 0x5d, 0xf4, 0xfc, 0x9f, 0x8a, 0x92, 0xbe, 0x80, 0xdd, 0x3c, 0xa3, 0xfa, 0x9b, 0xd0, 0xe4,
	0x22, 0x21, 0xbb, 0x77, 0xdc, 0x2c, 0xa0, 0x3b, 0xa0, 0x9f, 0xb2, 0x38, 0x11, 0x9d, 0x62, 0x17,
	0x6f, 0xe9, 0x31, 0xf4, 0x0a, 0xb1, 0x2a, 0xb5, 0x60, 0xbd, 0xae, 0xca, 0xf6, 0xe8, 0x00, 0x0c,
	0xc1, 0x72, 0xca, 0x42, 0x59, 0x2e, 0xe5, 0x2a, 0xf4, 0xd0, 0x5f, 0x14, 0xd1, 0x43, 0x7f, 0x41,
	0xf6, 0xa1, 0x15, 0xb0, 0x10, 0x47, 0x91, 0xd4, 0xa0, 0xbb, 0x2a, 0xa2, 0x08, 0xbd, 0x42, 0x17,
	0x45, 0x6a, 0x40, 0xe3, 0x06, 0xb3, 0x69, 0x75, 0x57, 0x7c, 0x8a, 0xcc, 0xdc, 0x0b, 0x54, 0xad,
	0xf8, 0x14, 0x9a, 0x58, 0xfc, 0x39, 0xba, 0xb4, 0x1a, 0x99, 0x26, 0x19, 0x08, 0x9a, 0x6c, 0x75,
	0xd6, 0xa3, 0xd2, 0xd5, 0x5c, 0x43, 0xef, 0x9c, 0xb3, 0x04, 0x4b, 0xd3, 0x6e, 0x5d, 0x4e, 0x6e,
	0x96, 0xcd, 0xae, 0x73, 0x01, 0x6a, 0xa6, 0xc6, 0x66, 0x26, 0x13, 0x9a, 0x73, 0x2f, 0x48, 0x51,
	0x52, 0xe9, 0x6e, 0x16, 0xd0, 0x63, 0x20, 0x45, 0xa6, 0x07, 0x6e, 0xf8, 0xe4, 0x5f, 0x1d, 0x1e,
	0x4b, 0x77, 0x9d, 0x7f, 0x47, 0x3e, 0x67, 0x13, 0x24, 0xef, 0xa0, 0x9b, 0x6f, 0x84, 0x98, 0xfd,
	0xd9, 0xb8, 0x5f, 0x5d, 0xb3, 0xfd, 0xa4, 0x92, 0xcd, 0x48, 0x68, 0xed, 0x95, 0x46, 0xde, 0x03,
	0x6c, 0xe8, 0x89, 0x04, 0x6e, 0x09, 0xb7, 0xf7, 0xab, 0xe9, 0x75, 0x83, 0x23, 0x8d, 0x7c, 0x00,
	0xbd, 0xe8, 0x7a, 0x72, 0x20, 0xb0, 0xf7, 0x3c, 0x2c, 0xdb, 0xda, 0x3e, 0x50, 0x62, 0xdf, 0x40,
	0x37, 0x37, 0x12, 0x31, 0x04, 0xac, 0xe8, 0xb3, 0x6c, 0xfa, 0x6d, 0xa7, 0x9d, 0x40, 0x5b, 0xf9,
	0x96, 0x10, 0x81, 0x28, 0xdb, 0xda, 0xde, 0x2b, 0xe5, 0x54, 0xcd, 0x5b, 0xe8, 0xac, 0x1f, 0x13,
	0x91, 0x80, 0xca, 0xfb, 0xb3, 0xcd, 0x72, 0x32, 0x2b, 0xfb, 0x68, 0xfd, 0x5e, 0x3a, 0xda, 0xdd,
	0xd2, 0xd1, 0xfe, 0x2e, 0x1d, 0xed, 0xd7, 0xca, 0xa9, 0xdd, 0xad, 0x9c, 0xda, 0x9f, 0x95, 0x53,
	0x1b, 0xb7, 0xe4, 0xff, 0xe4, 0xf5, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x11, 0xc6, 0x92,
	0x5f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataRWServiceClient is the client API for DataRWService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataRWServiceClient interface {
	ReadLines(ctx context.Context, in *ReadLinesRequest, opts ...grpc.CallOption) (DataRWService_ReadLinesClient, error)
	WriteLines(ctx context.Context, opts ...grpc.CallOption) (DataRWService_WriteLinesClient, error)
	GenerateData(ctx context.Context, in *GenerateDataRequest, opts ...grpc.CallOption) (*GenerateDataResponse, error)
	ListFiles(ctx context.Context, in *ListFilesReq, opts ...grpc.CallOption) (*ListFilesResponse, error)
	IsReady(ctx context.Context, in *IsReadyRequest, opts ...grpc.CallOption) (*IsReadyResponse, error)
	CheckDir(ctx context.Context, in *CheckDirRequest, opts ...grpc.CallOption) (*CheckDirResponse, error)
}

type dataRWServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataRWServiceClient(cc *grpc.ClientConn) DataRWServiceClient {
	return &dataRWServiceClient{cc}
}

func (c *dataRWServiceClient) ReadLines(ctx context.Context, in *ReadLinesRequest, opts ...grpc.CallOption) (DataRWService_ReadLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataRWService_serviceDesc.Streams[0], "/pb.DataRWService/ReadLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataRWServiceReadLinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataRWService_ReadLinesClient interface {
	Recv() (*ReadLinesResponse, error)
	grpc.ClientStream
}

type dataRWServiceReadLinesClient struct {
	grpc.ClientStream
}

func (x *dataRWServiceReadLinesClient) Recv() (*ReadLinesResponse, error) {
	m := new(ReadLinesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataRWServiceClient) WriteLines(ctx context.Context, opts ...grpc.CallOption) (DataRWService_WriteLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataRWService_serviceDesc.Streams[1], "/pb.DataRWService/WriteLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataRWServiceWriteLinesClient{stream}
	return x, nil
}

type DataRWService_WriteLinesClient interface {
	Send(*WriteLinesRequest) error
	CloseAndRecv() (*WriteLinesResponse, error)
	grpc.ClientStream
}

type dataRWServiceWriteLinesClient struct {
	grpc.ClientStream
}

func (x *dataRWServiceWriteLinesClient) Send(m *WriteLinesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataRWServiceWriteLinesClient) CloseAndRecv() (*WriteLinesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteLinesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataRWServiceClient) GenerateData(ctx context.Context, in *GenerateDataRequest, opts ...grpc.CallOption) (*GenerateDataResponse, error) {
	out := new(GenerateDataResponse)
	err := c.cc.Invoke(ctx, "/pb.DataRWService/GenerateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRWServiceClient) ListFiles(ctx context.Context, in *ListFilesReq, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/pb.DataRWService/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRWServiceClient) IsReady(ctx context.Context, in *IsReadyRequest, opts ...grpc.CallOption) (*IsReadyResponse, error) {
	out := new(IsReadyResponse)
	err := c.cc.Invoke(ctx, "/pb.DataRWService/IsReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataRWServiceClient) CheckDir(ctx context.Context, in *CheckDirRequest, opts ...grpc.CallOption) (*CheckDirResponse, error) {
	out := new(CheckDirResponse)
	err := c.cc.Invoke(ctx, "/pb.DataRWService/CheckDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataRWServiceServer is the server API for DataRWService service.
type DataRWServiceServer interface {
	ReadLines(*ReadLinesRequest, DataRWService_ReadLinesServer) error
	WriteLines(DataRWService_WriteLinesServer) error
	GenerateData(context.Context, *GenerateDataRequest) (*GenerateDataResponse, error)
	ListFiles(context.Context, *ListFilesReq) (*ListFilesResponse, error)
	IsReady(context.Context, *IsReadyRequest) (*IsReadyResponse, error)
	CheckDir(context.Context, *CheckDirRequest) (*CheckDirResponse, error)
}

// UnimplementedDataRWServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataRWServiceServer struct {
}

func (*UnimplementedDataRWServiceServer) ReadLines(req *ReadLinesRequest, srv DataRWService_ReadLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadLines not implemented")
}
func (*UnimplementedDataRWServiceServer) WriteLines(srv DataRWService_WriteLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteLines not implemented")
}
func (*UnimplementedDataRWServiceServer) GenerateData(ctx context.Context, req *GenerateDataRequest) (*GenerateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateData not implemented")
}
func (*UnimplementedDataRWServiceServer) ListFiles(ctx context.Context, req *ListFilesReq) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (*UnimplementedDataRWServiceServer) IsReady(ctx context.Context, req *IsReadyRequest) (*IsReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReady not implemented")
}
func (*UnimplementedDataRWServiceServer) CheckDir(ctx context.Context, req *CheckDirRequest) (*CheckDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDir not implemented")
}

func RegisterDataRWServiceServer(s *grpc.Server, srv DataRWServiceServer) {
	s.RegisterService(&_DataRWService_serviceDesc, srv)
}

func _DataRWService_ReadLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadLinesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataRWServiceServer).ReadLines(m, &dataRWServiceReadLinesServer{stream})
}

type DataRWService_ReadLinesServer interface {
	Send(*ReadLinesResponse) error
	grpc.ServerStream
}

type dataRWServiceReadLinesServer struct {
	grpc.ServerStream
}

func (x *dataRWServiceReadLinesServer) Send(m *ReadLinesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DataRWService_WriteLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataRWServiceServer).WriteLines(&dataRWServiceWriteLinesServer{stream})
}

type DataRWService_WriteLinesServer interface {
	SendAndClose(*WriteLinesResponse) error
	Recv() (*WriteLinesRequest, error)
	grpc.ServerStream
}

type dataRWServiceWriteLinesServer struct {
	grpc.ServerStream
}

func (x *dataRWServiceWriteLinesServer) SendAndClose(m *WriteLinesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataRWServiceWriteLinesServer) Recv() (*WriteLinesRequest, error) {
	m := new(WriteLinesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataRWService_GenerateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRWServiceServer).GenerateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DataRWService/GenerateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRWServiceServer).GenerateData(ctx, req.(*GenerateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRWService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRWServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DataRWService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRWServiceServer).ListFiles(ctx, req.(*ListFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRWService_IsReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRWServiceServer).IsReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DataRWService/IsReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRWServiceServer).IsReady(ctx, req.(*IsReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataRWService_CheckDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataRWServiceServer).CheckDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DataRWService/CheckDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataRWServiceServer).CheckDir(ctx, req.(*CheckDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataRWService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DataRWService",
	HandlerType: (*DataRWServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateData",
			Handler:    _DataRWService_GenerateData_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _DataRWService_ListFiles_Handler,
		},
		{
			MethodName: "IsReady",
			Handler:    _DataRWService_IsReady_Handler,
		},
		{
			MethodName: "CheckDir",
			Handler:    _DataRWService_CheckDir_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadLines",
			Handler:       _DataRWService_ReadLines_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteLines",
			Handler:       _DataRWService_WriteLines_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "datarw.proto",
}

func (m *GenerateDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordNum != 0 {
		i = encodeVarintDatarw(dAtA, i, uint64(m.RecordNum))
		i--
		dAtA[i] = 0x10
	}
	if m.FileNum != 0 {
		i = encodeVarintDatarw(dAtA, i, uint64(m.FileNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenerateDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckDirRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckDirRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckDirRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dir) > 0 {
		i -= len(m.Dir)
		copy(dAtA[i:], m.Dir)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.Dir)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckDirResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckDirResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckDirResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ErrFileIdx != 0 {
		i = encodeVarintDatarw(dAtA, i, uint64(m.ErrFileIdx))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsReadyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReadyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsReadyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IsReadyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsReadyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsReadyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListFilesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFilesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFilesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListFilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileNum != 0 {
		i = encodeVarintDatarw(dAtA, i, uint64(m.FileNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadLinesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadLinesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadLinesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LineNo) > 0 {
		i -= len(m.LineNo)
		copy(dAtA[i:], m.LineNo)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.LineNo)))
		i--
		dAtA[i] = 0x12
	}
	if m.FileIdx != 0 {
		i = encodeVarintDatarw(dAtA, i, uint64(m.FileIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadLinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadLinesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadLinesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsEof {
		i--
		if m.IsEof {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Val) > 0 {
		i -= len(m.Val)
		copy(dAtA[i:], m.Val)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.Val)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriteLinesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteLinesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteLinesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FileIdx != 0 {
		i = encodeVarintDatarw(dAtA, i, uint64(m.FileIdx))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Dir) > 0 {
		i -= len(m.Dir)
		copy(dAtA[i:], m.Dir)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.Dir)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriteLinesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteLinesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteLinesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintDatarw(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDatarw(dAtA []byte, offset int, v uint64) int {
	offset -= sovDatarw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenerateDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileNum != 0 {
		n += 1 + sovDatarw(uint64(m.FileNum))
	}
	if m.RecordNum != 0 {
		n += 1 + sovDatarw(uint64(m.RecordNum))
	}
	return n
}

func (m *GenerateDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	return n
}

func (m *CheckDirRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	return n
}

func (m *CheckDirResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	if m.ErrFileIdx != 0 {
		n += 1 + sovDatarw(uint64(m.ErrFileIdx))
	}
	return n
}

func (m *IsReadyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IsReadyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready {
		n += 2
	}
	return n
}

func (m *ListFilesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListFilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileNum != 0 {
		n += 1 + sovDatarw(uint64(m.FileNum))
	}
	return n
}

func (m *ReadLinesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileIdx != 0 {
		n += 1 + sovDatarw(uint64(m.FileIdx))
	}
	l = len(m.LineNo)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	return n
}

func (m *ReadLinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	if m.IsEof {
		n += 2
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	return n
}

func (m *WriteLinesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dir)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	if m.FileIdx != 0 {
		n += 1 + sovDatarw(uint64(m.FileIdx))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	return n
}

func (m *WriteLinesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovDatarw(uint64(l))
	}
	return n
}

func sovDatarw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDatarw(x uint64) (n int) {
	return sovDatarw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenerateDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileNum", wireType)
			}
			m.FileNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordNum", wireType)
			}
			m.RecordNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckDirRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckDirRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckDirRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckDirResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckDirResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckDirResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrFileIdx", wireType)
			}
			m.ErrFileIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrFileIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsReadyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReadyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReadyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsReadyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsReadyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsReadyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFilesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFilesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFilesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileNum", wireType)
			}
			m.FileNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadLinesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadLinesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadLinesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileIdx", wireType)
			}
			m.FileIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineNo = append(m.LineNo[:0], dAtA[iNdEx:postIndex]...)
			if m.LineNo == nil {
				m.LineNo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadLinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadLinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadLinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val[:0], dAtA[iNdEx:postIndex]...)
			if m.Val == nil {
				m.Val = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEof", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEof = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteLinesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteLinesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteLinesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileIdx", wireType)
			}
			m.FileIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileIdx |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteLinesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteLinesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteLinesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDatarw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDatarw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDatarw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDatarw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDatarw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDatarw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDatarw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDatarw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDatarw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDatarw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDatarw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDatarw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDatarw = fmt.Errorf("proto: unexpected end of group")
)
