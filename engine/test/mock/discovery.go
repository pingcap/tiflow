// Copyright 2022 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/srvdiscovery/interface.go

// Package mock_srvdiscovery is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	srvdiscovery "github.com/pingcap/tiflow/engine/pkg/srvdiscovery"
)

// MockDiscovery is a mock of Discovery interface.
type MockDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryMockRecorder
}

// MockDiscoveryMockRecorder is the mock recorder for MockDiscovery.
type MockDiscoveryMockRecorder struct {
	mock *MockDiscovery
}

// NewMockDiscovery creates a new mock instance.
func NewMockDiscovery(ctrl *gomock.Controller) *MockDiscovery {
	mock := &MockDiscovery{ctrl: ctrl}
	mock.recorder = &MockDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscovery) EXPECT() *MockDiscoveryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDiscovery) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDiscoveryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDiscovery)(nil).Close))
}

// CopySnapshot mocks base method.
func (m *MockDiscovery) CopySnapshot(snapshot srvdiscovery.Snapshot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CopySnapshot", snapshot)
}

// CopySnapshot indicates an expected call of CopySnapshot.
func (mr *MockDiscoveryMockRecorder) CopySnapshot(snapshot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopySnapshot", reflect.TypeOf((*MockDiscovery)(nil).CopySnapshot), snapshot)
}

// Snapshot mocks base method.
func (m *MockDiscovery) Snapshot(ctx context.Context) (srvdiscovery.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", ctx)
	ret0, _ := ret[0].(srvdiscovery.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockDiscoveryMockRecorder) Snapshot(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockDiscovery)(nil).Snapshot), ctx)
}

// Watch mocks base method.
func (m *MockDiscovery) Watch(ctx context.Context) <-chan srvdiscovery.WatchResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx)
	ret0, _ := ret[0].(<-chan srvdiscovery.WatchResp)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockDiscoveryMockRecorder) Watch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockDiscovery)(nil).Watch), ctx)
}
