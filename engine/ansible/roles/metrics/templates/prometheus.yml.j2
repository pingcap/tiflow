# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

{% set master_addrs = [] %}
{% for host in groups['df_master_servers'] %}
{% set _ = master_addrs.append(host ~ ':' ~ master_port) %}
{% endfor %}

{% set executor_addrs = [] %}
{% for host in groups['df_executor_servers'] %}
{% set _ = executor_addrs.append(host ~ ':' ~ executor_port) %}
{% endfor %}

{% set node_addrs = [] %}
{% for host in groups['all'] %}
{% set _ = node_addrs.append(host ~ ':' ~ 9100) %}
{% endfor %}

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "master"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
        - targets:
    {% for addr in master_addrs %}
            - '{{ addr }}'
    {% endfor %}

  - job_name: "nodes"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
        - targets:
    {% for addr in node_addrs %}
            - '{{ addr }}'
    {% endfor %}

  - job_name: "executors"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
        - targets:
    {% for addr in executor_addrs %}
            - '{{ addr }}'
    {% endfor %}
