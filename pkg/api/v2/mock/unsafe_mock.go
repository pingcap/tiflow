// Code generated by MockGen. DO NOT EDIT.
// Source: unsafe.go

// Package mock_v2 is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/pingcap/tiflow/cdc/api/v2"
	v20 "github.com/pingcap/tiflow/pkg/api/v2"
)

// MockUnsafeGetter is a mock of UnsafeGetter interface.
type MockUnsafeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGetterMockRecorder
}

// MockUnsafeGetterMockRecorder is the mock recorder for MockUnsafeGetter.
type MockUnsafeGetterMockRecorder struct {
	mock *MockUnsafeGetter
}

// NewMockUnsafeGetter creates a new mock instance.
func NewMockUnsafeGetter(ctrl *gomock.Controller) *MockUnsafeGetter {
	mock := &MockUnsafeGetter{ctrl: ctrl}
	mock.recorder = &MockUnsafeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGetter) EXPECT() *MockUnsafeGetterMockRecorder {
	return m.recorder
}

// Unsafe mocks base method.
func (m *MockUnsafeGetter) Unsafe() v20.UnsafeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsafe")
	ret0, _ := ret[0].(v20.UnsafeInterface)
	return ret0
}

// Unsafe indicates an expected call of Unsafe.
func (mr *MockUnsafeGetterMockRecorder) Unsafe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsafe",
		reflect.TypeOf((*MockUnsafeGetter)(nil).Unsafe))
}

// MockUnsafeInterface is a mock of UnsafeInterface interface.
type MockUnsafeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeInterfaceMockRecorder
}

// MockUnsafeInterfaceMockRecorder is the mock recorder for MockUnsafeInterface.
type MockUnsafeInterfaceMockRecorder struct {
	mock *MockUnsafeInterface
}

// NewMockUnsafeInterface creates a new mock instance.
func NewMockUnsafeInterface(ctrl *gomock.Controller) *MockUnsafeInterface {
	mock := &MockUnsafeInterface{ctrl: ctrl}
	mock.recorder = &MockUnsafeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeInterface) EXPECT() *MockUnsafeInterfaceMockRecorder {
	return m.recorder
}

// DeleteServiceGcSafePoint mocks base method.
func (m *MockUnsafeInterface) DeleteServiceGcSafePoint(ctx context.Context,
	config *v2.UpstreamConfig,
) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceGcSafePoint", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceGcSafePoint indicates an expected call of DeleteServiceGcSafePoint.
func (mr *MockUnsafeInterfaceMockRecorder) DeleteServiceGcSafePoint(ctx,
	config interface{},
) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceGcSafePoint",
		reflect.TypeOf((*MockUnsafeInterface)(nil).DeleteServiceGcSafePoint), ctx, config)
}

// Metadata mocks base method.
func (m *MockUnsafeInterface) Metadata(ctx context.Context) (*[]v2.EtcdData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", ctx)
	ret0, _ := ret[0].(*[]v2.EtcdData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockUnsafeInterfaceMockRecorder) Metadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata",
		reflect.TypeOf((*MockUnsafeInterface)(nil).Metadata), ctx)
}

// ResolveLock mocks base method.
func (m *MockUnsafeInterface) ResolveLock(ctx context.Context, req *v2.ResolveLockReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveLock", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveLock indicates an expected call of ResolveLock.
func (mr *MockUnsafeInterfaceMockRecorder) ResolveLock(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveLock",
		reflect.TypeOf((*MockUnsafeInterface)(nil).ResolveLock), ctx, req)
}
