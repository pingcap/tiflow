// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Checksum struct {
	Version int32 `json:"version"`

	Corrupted bool `json:"corrupted"`

	Current int64 `json:"current"`

	Previous int64 `json:"previous"`
}

const ChecksumAvroCRC64Fingerprint = "\xb5\xb3%\x06~V*\xcc"

func NewChecksum() Checksum {
	r := Checksum{}
	return r
}

func DeserializeChecksum(r io.Reader) (Checksum, error) {
	t := NewChecksum()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeChecksumFromSchema(r io.Reader, schema string) (Checksum, error) {
	t := NewChecksum()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeChecksum(r Checksum, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Version, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Corrupted, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Current, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Previous, w)
	if err != nil {
		return err
	}
	return err
}

func (r Checksum) Serialize(w io.Writer) error {
	return writeChecksum(r, w)
}

func (r Checksum) Schema() string {
	return "{\"docs\":\"event's e2e checksum information\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"corrupted\",\"type\":\"boolean\"},{\"name\":\"current\",\"type\":\"long\"},{\"name\":\"previous\",\"type\":\"long\"}],\"name\":\"com.pingcap.simple.avro.Checksum\",\"type\":\"record\"}"
}

func (r Checksum) SchemaName() string {
	return "com.pingcap.simple.avro.Checksum"
}

func (_ Checksum) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Checksum) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Checksum) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Checksum) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Checksum) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Checksum) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Checksum) SetString(v string)   { panic("Unsupported operation") }
func (_ Checksum) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Checksum) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Version}

		return w

	case 1:
		w := types.Boolean{Target: &r.Corrupted}

		return w

	case 2:
		w := types.Long{Target: &r.Current}

		return w

	case 3:
		w := types.Long{Target: &r.Previous}

		return w

	}
	panic("Unknown field index")
}

func (r *Checksum) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Checksum) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Checksum) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Checksum) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Checksum) HintSize(int)                     { panic("Unsupported operation") }
func (_ Checksum) Finalize()                        {}

func (_ Checksum) AvroCRC64Fingerprint() []byte {
	return []byte(ChecksumAvroCRC64Fingerprint)
}

func (r Checksum) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["version"], err = json.Marshal(r.Version)
	if err != nil {
		return nil, err
	}
	output["corrupted"], err = json.Marshal(r.Corrupted)
	if err != nil {
		return nil, err
	}
	output["current"], err = json.Marshal(r.Current)
	if err != nil {
		return nil, err
	}
	output["previous"], err = json.Marshal(r.Previous)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Checksum) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["version"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Version); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for version")
	}
	val = func() json.RawMessage {
		if v, ok := fields["corrupted"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Corrupted); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for corrupted")
	}
	val = func() json.RawMessage {
		if v, ok := fields["current"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Current); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for current")
	}
	val = func() json.RawMessage {
		if v, ok := fields["previous"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Previous); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for previous")
	}
	return nil
}
