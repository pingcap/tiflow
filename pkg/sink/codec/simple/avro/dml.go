// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DML struct {
	Version int32 `json:"version"`

	Database string `json:"database"`

	Table string `json:"table"`

	TableID int64 `json:"tableID"`

	Type DMLType `json:"type"`

	CommitTs int64 `json:"commitTs"`

	BuildTs int64 `json:"buildTs"`

	SchemaVersion int64 `json:"schemaVersion"`

	ClaimCheckLocation *UnionNullString `json:"claimCheckLocation"`

	HandleKeyOnly *UnionNullBool `json:"handleKeyOnly"`

	Checksum *UnionNullChecksum `json:"checksum"`

	Data *UnionNullMapUnionNullLongFloatDoubleStringBytes `json:"data"`

	Old *UnionNullMapUnionNullLongFloatDoubleStringBytes `json:"old"`
}

const DMLAvroCRC64Fingerprint = "mO\x06\x9f\x01\x8bKU"

func NewDML() DML {
	r := DML{}
	r.ClaimCheckLocation = nil
	r.HandleKeyOnly = nil
	r.Checksum = nil
	r.Data = nil
	r.Old = nil
	return r
}

func DeserializeDML(r io.Reader) (DML, error) {
	t := NewDML()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDMLFromSchema(r io.Reader, schema string) (DML, error) {
	t := NewDML()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDML(r DML, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Version, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Database, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Table, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.TableID, w)
	if err != nil {
		return err
	}
	err = writeDMLType(r.Type, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.CommitTs, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.BuildTs, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.SchemaVersion, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.ClaimCheckLocation, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.HandleKeyOnly, w)
	if err != nil {
		return err
	}
	err = writeUnionNullChecksum(r.Checksum, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapUnionNullLongFloatDoubleStringBytes(r.Data, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapUnionNullLongFloatDoubleStringBytes(r.Old, w)
	if err != nil {
		return err
	}
	return err
}

func (r DML) Serialize(w io.Writer) error {
	return writeDML(r, w)
}

func (r DML) Schema() string {
	return "{\"docs\":\"the message format of the DML event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableID\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"name\":\"DMLType\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\"],\"type\":\"enum\"}},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"name\":\"schemaVersion\",\"type\":\"long\"},{\"default\":null,\"name\":\"claimCheckLocation\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"handleKeyOnly\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"checksum\",\"type\":[\"null\",{\"docs\":\"event's e2e checksum information\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"corrupted\",\"type\":\"boolean\"},{\"name\":\"current\",\"type\":\"long\"},{\"name\":\"previous\",\"type\":\"long\"}],\"name\":\"Checksum\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"data\",\"type\":[\"null\",{\"default\":null,\"type\":\"map\",\"values\":[\"null\",\"long\",\"float\",\"double\",\"string\",\"bytes\"]}]},{\"default\":null,\"name\":\"old\",\"type\":[\"null\",{\"default\":null,\"type\":\"map\",\"values\":[\"null\",\"long\",\"float\",\"double\",\"string\",\"bytes\"]}]}],\"name\":\"com.pingcap.simple.avro.DML\",\"type\":\"record\"}"
}

func (r DML) SchemaName() string {
	return "com.pingcap.simple.avro.DML"
}

func (_ DML) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DML) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DML) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DML) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DML) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DML) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DML) SetString(v string)   { panic("Unsupported operation") }
func (_ DML) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DML) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Version}

		return w

	case 1:
		w := types.String{Target: &r.Database}

		return w

	case 2:
		w := types.String{Target: &r.Table}

		return w

	case 3:
		w := types.Long{Target: &r.TableID}

		return w

	case 4:
		w := DMLTypeWrapper{Target: &r.Type}

		return w

	case 5:
		w := types.Long{Target: &r.CommitTs}

		return w

	case 6:
		w := types.Long{Target: &r.BuildTs}

		return w

	case 7:
		w := types.Long{Target: &r.SchemaVersion}

		return w

	case 8:
		r.ClaimCheckLocation = NewUnionNullString()

		return r.ClaimCheckLocation
	case 9:
		r.HandleKeyOnly = NewUnionNullBool()

		return r.HandleKeyOnly
	case 10:
		r.Checksum = NewUnionNullChecksum()

		return r.Checksum
	case 11:
		r.Data = NewUnionNullMapUnionNullLongFloatDoubleStringBytes()

		return r.Data
	case 12:
		r.Old = NewUnionNullMapUnionNullLongFloatDoubleStringBytes()

		return r.Old
	}
	panic("Unknown field index")
}

func (r *DML) SetDefault(i int) {
	switch i {
	case 8:
		r.ClaimCheckLocation = nil
		return
	case 9:
		r.HandleKeyOnly = nil
		return
	case 10:
		r.Checksum = nil
		return
	case 11:
		r.Data = nil
		return
	case 12:
		r.Old = nil
		return
	}
	panic("Unknown field index")
}

func (r *DML) NullField(i int) {
	switch i {
	case 8:
		r.ClaimCheckLocation = nil
		return
	case 9:
		r.HandleKeyOnly = nil
		return
	case 10:
		r.Checksum = nil
		return
	case 11:
		r.Data = nil
		return
	case 12:
		r.Old = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DML) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DML) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DML) HintSize(int)                     { panic("Unsupported operation") }
func (_ DML) Finalize()                        {}

func (_ DML) AvroCRC64Fingerprint() []byte {
	return []byte(DMLAvroCRC64Fingerprint)
}

func (r DML) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["version"], err = json.Marshal(r.Version)
	if err != nil {
		return nil, err
	}
	output["database"], err = json.Marshal(r.Database)
	if err != nil {
		return nil, err
	}
	output["table"], err = json.Marshal(r.Table)
	if err != nil {
		return nil, err
	}
	output["tableID"], err = json.Marshal(r.TableID)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["commitTs"], err = json.Marshal(r.CommitTs)
	if err != nil {
		return nil, err
	}
	output["buildTs"], err = json.Marshal(r.BuildTs)
	if err != nil {
		return nil, err
	}
	output["schemaVersion"], err = json.Marshal(r.SchemaVersion)
	if err != nil {
		return nil, err
	}
	output["claimCheckLocation"], err = json.Marshal(r.ClaimCheckLocation)
	if err != nil {
		return nil, err
	}
	output["handleKeyOnly"], err = json.Marshal(r.HandleKeyOnly)
	if err != nil {
		return nil, err
	}
	output["checksum"], err = json.Marshal(r.Checksum)
	if err != nil {
		return nil, err
	}
	output["data"], err = json.Marshal(r.Data)
	if err != nil {
		return nil, err
	}
	output["old"], err = json.Marshal(r.Old)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DML) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["version"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Version); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for version")
	}
	val = func() json.RawMessage {
		if v, ok := fields["database"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Database); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for database")
	}
	val = func() json.RawMessage {
		if v, ok := fields["table"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Table); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for table")
	}
	val = func() json.RawMessage {
		if v, ok := fields["tableID"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TableID); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for tableID")
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["commitTs"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CommitTs); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for commitTs")
	}
	val = func() json.RawMessage {
		if v, ok := fields["buildTs"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BuildTs); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for buildTs")
	}
	val = func() json.RawMessage {
		if v, ok := fields["schemaVersion"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SchemaVersion); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for schemaVersion")
	}
	val = func() json.RawMessage {
		if v, ok := fields["claimCheckLocation"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ClaimCheckLocation); err != nil {
			return err
		}
	} else {
		r.ClaimCheckLocation = NewUnionNullString()

		r.ClaimCheckLocation = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["handleKeyOnly"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.HandleKeyOnly); err != nil {
			return err
		}
	} else {
		r.HandleKeyOnly = NewUnionNullBool()

		r.HandleKeyOnly = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["checksum"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Checksum); err != nil {
			return err
		}
	} else {
		r.Checksum = NewUnionNullChecksum()

		r.Checksum = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Data); err != nil {
			return err
		}
	} else {
		r.Data = NewUnionNullMapUnionNullLongFloatDoubleStringBytes()

		r.Data = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["old"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Old); err != nil {
			return err
		}
	} else {
		r.Old = NewUnionNullMapUnionNullLongFloatDoubleStringBytes()

		r.Old = nil
	}
	return nil
}
