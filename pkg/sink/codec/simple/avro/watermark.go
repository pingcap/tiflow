// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Watermark struct {
	Version int32 `json:"version"`

	Type string `json:"type"`

	CommitTs int64 `json:"commitTs"`

	BuildTs int64 `json:"buildTs"`
}

const WatermarkAvroCRC64Fingerprint = "{\x7f\xebÌ˜\xf3:?"

func NewWatermark() Watermark {
	r := Watermark{}
	return r
}

func DeserializeWatermark(r io.Reader) (Watermark, error) {
	t := NewWatermark()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeWatermarkFromSchema(r io.Reader, schema string) (Watermark, error) {
	t := NewWatermark()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeWatermark(r Watermark, w io.Writer) error {
	var err error
	err = vm.WriteInt(r.Version, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Type, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.CommitTs, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.BuildTs, w)
	if err != nil {
		return err
	}
	return err
}

func (r Watermark) Serialize(w io.Writer) error {
	return writeWatermark(r, w)
}

func (r Watermark) Schema() string {
	return "{\"docs\":\"the message format of the watermark event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"}],\"name\":\"com.pingcap.simple.avro.Watermark\",\"type\":\"record\"}"
}

func (r Watermark) SchemaName() string {
	return "com.pingcap.simple.avro.Watermark"
}

func (_ Watermark) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Watermark) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Watermark) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Watermark) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Watermark) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Watermark) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Watermark) SetString(v string)   { panic("Unsupported operation") }
func (_ Watermark) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Watermark) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.Int{Target: &r.Version}

		return w

	case 1:
		w := types.String{Target: &r.Type}

		return w

	case 2:
		w := types.Long{Target: &r.CommitTs}

		return w

	case 3:
		w := types.Long{Target: &r.BuildTs}

		return w

	}
	panic("Unknown field index")
}

func (r *Watermark) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Watermark) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Watermark) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Watermark) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Watermark) HintSize(int)                     { panic("Unsupported operation") }
func (_ Watermark) Finalize()                        {}

func (_ Watermark) AvroCRC64Fingerprint() []byte {
	return []byte(WatermarkAvroCRC64Fingerprint)
}

func (r Watermark) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["version"], err = json.Marshal(r.Version)
	if err != nil {
		return nil, err
	}
	output["type"], err = json.Marshal(r.Type)
	if err != nil {
		return nil, err
	}
	output["commitTs"], err = json.Marshal(r.CommitTs)
	if err != nil {
		return nil, err
	}
	output["buildTs"], err = json.Marshal(r.BuildTs)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Watermark) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["version"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Version); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for version")
	}
	val = func() json.RawMessage {
		if v, ok := fields["type"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Type); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for type")
	}
	val = func() json.RawMessage {
		if v, ok := fields["commitTs"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CommitTs); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for commitTs")
	}
	val = func() json.RawMessage {
		if v, ok := fields["buildTs"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BuildTs); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for buildTs")
	}
	return nil
}
