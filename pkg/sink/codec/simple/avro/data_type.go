// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type DataType struct {
	MysqlType string `json:"mysqlType"`

	Charset string `json:"charset"`

	Collate string `json:"collate"`

	Length int64 `json:"length"`

	Decimal *UnionNullInt `json:"decimal"`

	Elements *UnionNullArrayString `json:"elements"`

	Unsigned *UnionNullBool `json:"unsigned"`

	Zerofill *UnionNullBool `json:"zerofill"`
}

const DataTypeAvroCRC64Fingerprint = "\xf0z\x94\xe7\xe5\x91J\xc9"

func NewDataType() DataType {
	r := DataType{}
	r.Decimal = nil
	r.Elements = nil
	r.Unsigned = nil
	r.Zerofill = nil
	return r
}

func DeserializeDataType(r io.Reader) (DataType, error) {
	t := NewDataType()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDataTypeFromSchema(r io.Reader, schema string) (DataType, error) {
	t := NewDataType()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDataType(r DataType, w io.Writer) error {
	var err error
	err = vm.WriteString(r.MysqlType, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Charset, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Collate, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Length, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Decimal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.Elements, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Unsigned, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Zerofill, w)
	if err != nil {
		return err
	}
	return err
}

func (r DataType) Serialize(w io.Writer) error {
	return writeDataType(r, w)
}

func (r DataType) Schema() string {
	return "{\"docs\":\"each column's mysql type information\",\"fields\":[{\"name\":\"mysqlType\",\"type\":\"string\"},{\"name\":\"charset\",\"type\":\"string\"},{\"name\":\"collate\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"long\"},{\"default\":null,\"name\":\"decimal\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"elements\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"unsigned\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"zerofill\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"com.pingcap.simple.avro.DataType\",\"type\":\"record\"}"
}

func (r DataType) SchemaName() string {
	return "com.pingcap.simple.avro.DataType"
}

func (_ DataType) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DataType) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DataType) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DataType) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DataType) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DataType) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DataType) SetString(v string)   { panic("Unsupported operation") }
func (_ DataType) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DataType) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.MysqlType}

		return w

	case 1:
		w := types.String{Target: &r.Charset}

		return w

	case 2:
		w := types.String{Target: &r.Collate}

		return w

	case 3:
		w := types.Long{Target: &r.Length}

		return w

	case 4:
		r.Decimal = NewUnionNullInt()

		return r.Decimal
	case 5:
		r.Elements = NewUnionNullArrayString()

		return r.Elements
	case 6:
		r.Unsigned = NewUnionNullBool()

		return r.Unsigned
	case 7:
		r.Zerofill = NewUnionNullBool()

		return r.Zerofill
	}
	panic("Unknown field index")
}

func (r *DataType) SetDefault(i int) {
	switch i {
	case 4:
		r.Decimal = nil
		return
	case 5:
		r.Elements = nil
		return
	case 6:
		r.Unsigned = nil
		return
	case 7:
		r.Zerofill = nil
		return
	}
	panic("Unknown field index")
}

func (r *DataType) NullField(i int) {
	switch i {
	case 4:
		r.Decimal = nil
		return
	case 5:
		r.Elements = nil
		return
	case 6:
		r.Unsigned = nil
		return
	case 7:
		r.Zerofill = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DataType) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DataType) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DataType) HintSize(int)                     { panic("Unsupported operation") }
func (_ DataType) Finalize()                        {}

func (_ DataType) AvroCRC64Fingerprint() []byte {
	return []byte(DataTypeAvroCRC64Fingerprint)
}

func (r DataType) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["mysqlType"], err = json.Marshal(r.MysqlType)
	if err != nil {
		return nil, err
	}
	output["charset"], err = json.Marshal(r.Charset)
	if err != nil {
		return nil, err
	}
	output["collate"], err = json.Marshal(r.Collate)
	if err != nil {
		return nil, err
	}
	output["length"], err = json.Marshal(r.Length)
	if err != nil {
		return nil, err
	}
	output["decimal"], err = json.Marshal(r.Decimal)
	if err != nil {
		return nil, err
	}
	output["elements"], err = json.Marshal(r.Elements)
	if err != nil {
		return nil, err
	}
	output["unsigned"], err = json.Marshal(r.Unsigned)
	if err != nil {
		return nil, err
	}
	output["zerofill"], err = json.Marshal(r.Zerofill)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DataType) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["mysqlType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.MysqlType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mysqlType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["charset"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Charset); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for charset")
	}
	val = func() json.RawMessage {
		if v, ok := fields["collate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Collate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for collate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["length"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Length); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for length")
	}
	val = func() json.RawMessage {
		if v, ok := fields["decimal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Decimal); err != nil {
			return err
		}
	} else {
		r.Decimal = NewUnionNullInt()

		r.Decimal = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["elements"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Elements); err != nil {
			return err
		}
	} else {
		r.Elements = NewUnionNullArrayString()

		r.Elements = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["unsigned"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Unsigned); err != nil {
			return err
		}
	} else {
		r.Unsigned = NewUnionNullBool()

		r.Unsigned = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["zerofill"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Zerofill); err != nil {
			return err
		}
	} else {
		r.Zerofill = NewUnionNullBool()

		r.Zerofill = nil
	}
	return nil
}
