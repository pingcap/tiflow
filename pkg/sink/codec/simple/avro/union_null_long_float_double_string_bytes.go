// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullLongFloatDoubleStringBytesTypeEnum int

const (
	UnionNullLongFloatDoubleStringBytesTypeEnumLong UnionNullLongFloatDoubleStringBytesTypeEnum = 1

	UnionNullLongFloatDoubleStringBytesTypeEnumFloat UnionNullLongFloatDoubleStringBytesTypeEnum = 2

	UnionNullLongFloatDoubleStringBytesTypeEnumDouble UnionNullLongFloatDoubleStringBytesTypeEnum = 3

	UnionNullLongFloatDoubleStringBytesTypeEnumString UnionNullLongFloatDoubleStringBytesTypeEnum = 4

	UnionNullLongFloatDoubleStringBytesTypeEnumBytes UnionNullLongFloatDoubleStringBytesTypeEnum = 5
)

type UnionNullLongFloatDoubleStringBytes struct {
	Null      *types.NullVal
	Long      int64
	Float     float32
	Double    float64
	String    string
	Bytes     Bytes
	UnionType UnionNullLongFloatDoubleStringBytesTypeEnum
}

func writeUnionNullLongFloatDoubleStringBytes(r *UnionNullLongFloatDoubleStringBytes, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullLongFloatDoubleStringBytesTypeEnumLong:
		return vm.WriteLong(r.Long, w)
	case UnionNullLongFloatDoubleStringBytesTypeEnumFloat:
		return vm.WriteFloat(r.Float, w)
	case UnionNullLongFloatDoubleStringBytesTypeEnumDouble:
		return vm.WriteDouble(r.Double, w)
	case UnionNullLongFloatDoubleStringBytesTypeEnumString:
		return vm.WriteString(r.String, w)
	case UnionNullLongFloatDoubleStringBytesTypeEnumBytes:
		return vm.WriteBytes(r.Bytes, w)
	}
	return fmt.Errorf("invalid value for *UnionNullLongFloatDoubleStringBytes")
}

func NewUnionNullLongFloatDoubleStringBytes() *UnionNullLongFloatDoubleStringBytes {
	return &UnionNullLongFloatDoubleStringBytes{}
}

func (r *UnionNullLongFloatDoubleStringBytes) Serialize(w io.Writer) error {
	return writeUnionNullLongFloatDoubleStringBytes(r, w)
}

func DeserializeUnionNullLongFloatDoubleStringBytes(r io.Reader) (*UnionNullLongFloatDoubleStringBytes, error) {
	t := NewUnionNullLongFloatDoubleStringBytes()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullLongFloatDoubleStringBytesFromSchema(r io.Reader, schema string) (*UnionNullLongFloatDoubleStringBytes, error) {
	t := NewUnionNullLongFloatDoubleStringBytes()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullLongFloatDoubleStringBytes) Schema() string {
	return "[\"null\",\"long\",\"float\",\"double\",\"string\",\"bytes\"]"
}

func (_ *UnionNullLongFloatDoubleStringBytes) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullLongFloatDoubleStringBytes) SetLong(v int64) {

	r.UnionType = (UnionNullLongFloatDoubleStringBytesTypeEnum)(v)
}

func (r *UnionNullLongFloatDoubleStringBytes) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		return &types.Long{Target: (&r.Long)}
	case 2:
		return &types.Float{Target: (&r.Float)}
	case 3:
		return &types.Double{Target: (&r.Double)}
	case 4:
		return &types.String{Target: (&r.String)}
	case 5:
		return &BytesWrapper{Target: (&r.Bytes)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullLongFloatDoubleStringBytes) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullLongFloatDoubleStringBytes) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullLongFloatDoubleStringBytes) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullLongFloatDoubleStringBytes) Finalize() {}

func (r *UnionNullLongFloatDoubleStringBytes) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullLongFloatDoubleStringBytesTypeEnumLong:
		return json.Marshal(map[string]interface{}{"long": r.Long})
	case UnionNullLongFloatDoubleStringBytesTypeEnumFloat:
		return json.Marshal(map[string]interface{}{"float": r.Float})
	case UnionNullLongFloatDoubleStringBytesTypeEnumDouble:
		return json.Marshal(map[string]interface{}{"double": r.Double})
	case UnionNullLongFloatDoubleStringBytesTypeEnumString:
		return json.Marshal(map[string]interface{}{"string": r.String})
	case UnionNullLongFloatDoubleStringBytesTypeEnumBytes:
		return json.Marshal(map[string]interface{}{"bytes": r.Bytes})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullLongFloatDoubleStringBytes")
}

func (r *UnionNullLongFloatDoubleStringBytes) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["long"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Long)
	}
	if value, ok := fields["float"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.Float)
	}
	if value, ok := fields["double"]; ok {
		r.UnionType = 3
		return json.Unmarshal([]byte(value), &r.Double)
	}
	if value, ok := fields["string"]; ok {
		r.UnionType = 4
		return json.Unmarshal([]byte(value), &r.String)
	}
	if value, ok := fields["bytes"]; ok {
		r.UnionType = 5
		return json.Unmarshal([]byte(value), &r.Bytes)
	}
	return fmt.Errorf("invalid value for *UnionNullLongFloatDoubleStringBytes")
}
