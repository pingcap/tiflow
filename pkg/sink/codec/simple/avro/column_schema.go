// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type ColumnSchema struct {
	Name string `json:"name"`

	DataType DataType `json:"dataType"`

	Nullable bool `json:"nullable"`

	Default *UnionNullString `json:"default"`
}

const ColumnSchemaAvroCRC64Fingerprint = " \x9cW\xbd\x12\xa4/P"

func NewColumnSchema() ColumnSchema {
	r := ColumnSchema{}
	r.DataType = NewDataType()

	return r
}

func DeserializeColumnSchema(r io.Reader) (ColumnSchema, error) {
	t := NewColumnSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeColumnSchemaFromSchema(r io.Reader, schema string) (ColumnSchema, error) {
	t := NewColumnSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeColumnSchema(r ColumnSchema, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeDataType(r.DataType, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Nullable, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Default, w)
	if err != nil {
		return err
	}
	return err
}

func (r ColumnSchema) Serialize(w io.Writer) error {
	return writeColumnSchema(r, w)
}

func (r ColumnSchema) Schema() string {
	return "{\"docs\":\"each column's schema information\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dataType\",\"type\":{\"docs\":\"each column's mysql type information\",\"fields\":[{\"name\":\"mysqlType\",\"type\":\"string\"},{\"name\":\"charset\",\"type\":\"string\"},{\"name\":\"collate\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"long\"},{\"default\":null,\"name\":\"decimal\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"elements\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"unsigned\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"zerofill\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"DataType\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"}},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"default\",\"type\":[\"null\",\"string\"]}],\"name\":\"com.pingcap.simple.avro.ColumnSchema\",\"type\":\"record\"}"
}

func (r ColumnSchema) SchemaName() string {
	return "com.pingcap.simple.avro.ColumnSchema"
}

func (_ ColumnSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ ColumnSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ ColumnSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ ColumnSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ ColumnSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ ColumnSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ ColumnSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ ColumnSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ColumnSchema) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Name}

		return w

	case 1:
		r.DataType = NewDataType()

		w := types.Record{Target: &r.DataType}

		return w

	case 2:
		w := types.Boolean{Target: &r.Nullable}

		return w

	case 3:
		r.Default = NewUnionNullString()

		return r.Default
	}
	panic("Unknown field index")
}

func (r *ColumnSchema) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *ColumnSchema) NullField(i int) {
	switch i {
	case 3:
		r.Default = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ ColumnSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ ColumnSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ ColumnSchema) HintSize(int)                     { panic("Unsupported operation") }
func (_ ColumnSchema) Finalize()                        {}

func (_ ColumnSchema) AvroCRC64Fingerprint() []byte {
	return []byte(ColumnSchemaAvroCRC64Fingerprint)
}

func (r ColumnSchema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["dataType"], err = json.Marshal(r.DataType)
	if err != nil {
		return nil, err
	}
	output["nullable"], err = json.Marshal(r.Nullable)
	if err != nil {
		return nil, err
	}
	output["default"], err = json.Marshal(r.Default)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *ColumnSchema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["dataType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DataType); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for dataType")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nullable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nullable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nullable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["default"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Default); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for default")
	}
	return nil
}
