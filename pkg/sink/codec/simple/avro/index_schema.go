// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type IndexSchema struct {
	Name string `json:"name"`

	Unique bool `json:"unique"`

	Primary bool `json:"primary"`

	Nullable bool `json:"nullable"`

	Columns []string `json:"columns"`
}

const IndexSchemaAvroCRC64Fingerprint = "\xaa4K.[\n3\xcb"

func NewIndexSchema() IndexSchema {
	r := IndexSchema{}
	r.Columns = make([]string, 0)

	return r
}

func DeserializeIndexSchema(r io.Reader) (IndexSchema, error) {
	t := NewIndexSchema()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeIndexSchemaFromSchema(r io.Reader, schema string) (IndexSchema, error) {
	t := NewIndexSchema()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeIndexSchema(r IndexSchema, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Unique, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Primary, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Nullable, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Columns, w)
	if err != nil {
		return err
	}
	return err
}

func (r IndexSchema) Serialize(w io.Writer) error {
	return writeIndexSchema(r, w)
}

func (r IndexSchema) Schema() string {
	return "{\"docs\":\"each index's schema information\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"unique\",\"type\":\"boolean\"},{\"name\":\"primary\",\"type\":\"boolean\"},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"columns\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"com.pingcap.simple.avro.IndexSchema\",\"type\":\"record\"}"
}

func (r IndexSchema) SchemaName() string {
	return "com.pingcap.simple.avro.IndexSchema"
}

func (_ IndexSchema) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ IndexSchema) SetInt(v int32)       { panic("Unsupported operation") }
func (_ IndexSchema) SetLong(v int64)      { panic("Unsupported operation") }
func (_ IndexSchema) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ IndexSchema) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ IndexSchema) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ IndexSchema) SetString(v string)   { panic("Unsupported operation") }
func (_ IndexSchema) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *IndexSchema) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Name}

		return w

	case 1:
		w := types.Boolean{Target: &r.Unique}

		return w

	case 2:
		w := types.Boolean{Target: &r.Primary}

		return w

	case 3:
		w := types.Boolean{Target: &r.Nullable}

		return w

	case 4:
		r.Columns = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Columns}

		return w

	}
	panic("Unknown field index")
}

func (r *IndexSchema) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *IndexSchema) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ IndexSchema) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ IndexSchema) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ IndexSchema) HintSize(int)                     { panic("Unsupported operation") }
func (_ IndexSchema) Finalize()                        {}

func (_ IndexSchema) AvroCRC64Fingerprint() []byte {
	return []byte(IndexSchemaAvroCRC64Fingerprint)
}

func (r IndexSchema) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["unique"], err = json.Marshal(r.Unique)
	if err != nil {
		return nil, err
	}
	output["primary"], err = json.Marshal(r.Primary)
	if err != nil {
		return nil, err
	}
	output["nullable"], err = json.Marshal(r.Nullable)
	if err != nil {
		return nil, err
	}
	output["columns"], err = json.Marshal(r.Columns)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *IndexSchema) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["unique"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Unique); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for unique")
	}
	val = func() json.RawMessage {
		if v, ok := fields["primary"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Primary); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for primary")
	}
	val = func() json.RawMessage {
		if v, ok := fields["nullable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Nullable); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for nullable")
	}
	val = func() json.RawMessage {
		if v, ok := fields["columns"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Columns); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for columns")
	}
	return nil
}
