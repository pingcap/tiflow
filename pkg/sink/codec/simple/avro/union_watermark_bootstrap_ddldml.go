// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionWatermarkBootstrapDDLDMLTypeEnum int

const (
	UnionWatermarkBootstrapDDLDMLTypeEnumWatermark UnionWatermarkBootstrapDDLDMLTypeEnum = 0

	UnionWatermarkBootstrapDDLDMLTypeEnumBootstrap UnionWatermarkBootstrapDDLDMLTypeEnum = 1

	UnionWatermarkBootstrapDDLDMLTypeEnumDDL UnionWatermarkBootstrapDDLDMLTypeEnum = 2

	UnionWatermarkBootstrapDDLDMLTypeEnumDML UnionWatermarkBootstrapDDLDMLTypeEnum = 3
)

type UnionWatermarkBootstrapDDLDML struct {
	Watermark Watermark
	Bootstrap Bootstrap
	DDL       DDL
	DML       DML
	UnionType UnionWatermarkBootstrapDDLDMLTypeEnum
}

func writeUnionWatermarkBootstrapDDLDML(r UnionWatermarkBootstrapDDLDML, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionWatermarkBootstrapDDLDMLTypeEnumWatermark:
		return writeWatermark(r.Watermark, w)
	case UnionWatermarkBootstrapDDLDMLTypeEnumBootstrap:
		return writeBootstrap(r.Bootstrap, w)
	case UnionWatermarkBootstrapDDLDMLTypeEnumDDL:
		return writeDDL(r.DDL, w)
	case UnionWatermarkBootstrapDDLDMLTypeEnumDML:
		return writeDML(r.DML, w)
	}
	return fmt.Errorf("invalid value for UnionWatermarkBootstrapDDLDML")
}

func NewUnionWatermarkBootstrapDDLDML() UnionWatermarkBootstrapDDLDML {
	return UnionWatermarkBootstrapDDLDML{}
}

func (r UnionWatermarkBootstrapDDLDML) Serialize(w io.Writer) error {
	return writeUnionWatermarkBootstrapDDLDML(r, w)
}

func DeserializeUnionWatermarkBootstrapDDLDML(r io.Reader) (UnionWatermarkBootstrapDDLDML, error) {
	t := NewUnionWatermarkBootstrapDDLDML()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionWatermarkBootstrapDDLDMLFromSchema(r io.Reader, schema string) (UnionWatermarkBootstrapDDLDML, error) {
	t := NewUnionWatermarkBootstrapDDLDML()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r UnionWatermarkBootstrapDDLDML) Schema() string {
	return "[{\"docs\":\"the message format of the watermark event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"}],\"name\":\"Watermark\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the message format of the bootstrap event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"name\":\"tableSchema\",\"type\":{\"docs\":\"table schema information\",\"fields\":[{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableID\",\"type\":\"long\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"columns\",\"type\":{\"items\":{\"docs\":\"each column's schema information\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dataType\",\"type\":{\"docs\":\"each column's mysql type information\",\"fields\":[{\"name\":\"mysqlType\",\"type\":\"string\"},{\"name\":\"charset\",\"type\":\"string\"},{\"name\":\"collate\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"long\"},{\"default\":null,\"name\":\"decimal\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"elements\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"unsigned\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"zerofill\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"DataType\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"}},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"default\",\"type\":[\"null\",\"string\"]}],\"name\":\"ColumnSchema\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"indexes\",\"type\":{\"items\":{\"docs\":\"each index's schema information\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"unique\",\"type\":\"boolean\"},{\"name\":\"primary\",\"type\":\"boolean\"},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"columns\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"IndexSchema\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},\"type\":\"array\"}}],\"name\":\"TableSchema\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"}}],\"name\":\"Bootstrap\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the message format of the DDL event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":{\"name\":\"DDLType\",\"symbols\":[\"CREATE\",\"ALTER\",\"ERASE\",\"RENAME\",\"TRUNCATE\",\"CINDEX\",\"DINDEX\",\"QUERY\"],\"type\":\"enum\"}},{\"name\":\"sql\",\"type\":\"string\"},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"default\":null,\"name\":\"tableSchema\",\"type\":[\"null\",\"com.pingcap.simple.avro.TableSchema\"]},{\"default\":null,\"name\":\"preTableSchema\",\"type\":[\"null\",\"com.pingcap.simple.avro.TableSchema\"]}],\"name\":\"DDL\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the message format of the DML event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableID\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"name\":\"DMLType\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\"],\"type\":\"enum\"}},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"name\":\"schemaVersion\",\"type\":\"long\"},{\"default\":null,\"name\":\"claimCheckLocation\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"handleKeyOnly\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"checksum\",\"type\":[\"null\",{\"docs\":\"event's e2e checksum information\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"corrupted\",\"type\":\"boolean\"},{\"name\":\"current\",\"type\":\"long\"},{\"name\":\"previous\",\"type\":\"long\"}],\"name\":\"Checksum\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"data\",\"type\":[\"null\",{\"default\":null,\"type\":\"map\",\"values\":[\"null\",\"long\",\"float\",\"double\",\"string\",\"bytes\"]}]},{\"default\":null,\"name\":\"old\",\"type\":[\"null\",{\"default\":null,\"type\":\"map\",\"values\":[\"null\",\"long\",\"float\",\"double\",\"string\",\"bytes\"]}]}],\"name\":\"DML\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"}]"
}

func (_ UnionWatermarkBootstrapDDLDML) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) SetInt(v int32)      { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) SetDouble(v float64) { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionWatermarkBootstrapDDLDML) SetLong(v int64) {

	r.UnionType = (UnionWatermarkBootstrapDDLDMLTypeEnum)(v)
}

func (r *UnionWatermarkBootstrapDDLDML) Get(i int) types.Field {

	switch i {
	case 0:
		r.Watermark = NewWatermark()
		return &types.Record{Target: (&r.Watermark)}
	case 1:
		r.Bootstrap = NewBootstrap()
		return &types.Record{Target: (&r.Bootstrap)}
	case 2:
		r.DDL = NewDDL()
		return &types.Record{Target: (&r.DDL)}
	case 3:
		r.DML = NewDML()
		return &types.Record{Target: (&r.DML)}
	}
	panic("Unknown field index")
}
func (_ UnionWatermarkBootstrapDDLDML) NullField(i int)  { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) HintSize(i int)   { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) SetDefault(i int) { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ UnionWatermarkBootstrapDDLDML) AppendArray() types.Field { panic("Unsupported operation") }
func (_ UnionWatermarkBootstrapDDLDML) Finalize()                {}

func (r UnionWatermarkBootstrapDDLDML) MarshalJSON() ([]byte, error) {

	switch r.UnionType {
	case UnionWatermarkBootstrapDDLDMLTypeEnumWatermark:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.Watermark": r.Watermark})
	case UnionWatermarkBootstrapDDLDMLTypeEnumBootstrap:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.Bootstrap": r.Bootstrap})
	case UnionWatermarkBootstrapDDLDMLTypeEnumDDL:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.DDL": r.DDL})
	case UnionWatermarkBootstrapDDLDMLTypeEnumDML:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.DML": r.DML})
	}
	return nil, fmt.Errorf("invalid value for UnionWatermarkBootstrapDDLDML")
}

func (r *UnionWatermarkBootstrapDDLDML) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["com.pingcap.simple.avro.Watermark"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.Watermark)
	}
	if value, ok := fields["com.pingcap.simple.avro.Bootstrap"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Bootstrap)
	}
	if value, ok := fields["com.pingcap.simple.avro.DDL"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.DDL)
	}
	if value, ok := fields["com.pingcap.simple.avro.DML"]; ok {
		r.UnionType = 3
		return json.Unmarshal([]byte(value), &r.DML)
	}
	return fmt.Errorf("invalid value for UnionWatermarkBootstrapDDLDML")
}
