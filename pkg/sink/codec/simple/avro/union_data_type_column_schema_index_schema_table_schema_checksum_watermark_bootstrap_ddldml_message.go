// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum int

const (
	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDataType UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 0

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumColumnSchema UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 1

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumIndexSchema UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 2

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumTableSchema UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 3

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumChecksum UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 4

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumWatermark UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 5

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumBootstrap UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 6

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDDL UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 7

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDML UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 8

	UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumMessage UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum = 9
)

type UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage struct {
	DataType     DataType
	ColumnSchema ColumnSchema
	IndexSchema  IndexSchema
	TableSchema  TableSchema
	Checksum     Checksum
	Watermark    Watermark
	Bootstrap    Bootstrap
	DDL          DDL
	DML          DML
	Message      Message
	UnionType    UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum
}

func writeUnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage(r UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDataType:
		return writeDataType(r.DataType, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumColumnSchema:
		return writeColumnSchema(r.ColumnSchema, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumIndexSchema:
		return writeIndexSchema(r.IndexSchema, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumTableSchema:
		return writeTableSchema(r.TableSchema, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumChecksum:
		return writeChecksum(r.Checksum, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumWatermark:
		return writeWatermark(r.Watermark, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumBootstrap:
		return writeBootstrap(r.Bootstrap, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDDL:
		return writeDDL(r.DDL, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDML:
		return writeDML(r.DML, w)
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumMessage:
		return writeMessage(r.Message, w)
	}
	return fmt.Errorf("invalid value for UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage")
}

func NewUnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage() UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage {
	return UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage{}
}

func (r UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) Serialize(w io.Writer) error {
	return writeUnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage(r, w)
}

func DeserializeUnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage(r io.Reader) (UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage, error) {
	t := NewUnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageFromSchema(r io.Reader, schema string) (UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage, error) {
	t := NewUnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) Schema() string {
	return "[{\"docs\":\"each column's mysql type information\",\"fields\":[{\"name\":\"mysqlType\",\"type\":\"string\"},{\"name\":\"charset\",\"type\":\"string\"},{\"name\":\"collate\",\"type\":\"string\"},{\"name\":\"length\",\"type\":\"long\"},{\"default\":null,\"name\":\"decimal\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"elements\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"unsigned\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"zerofill\",\"type\":[\"null\",\"boolean\"]}],\"name\":\"DataType\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"each column's schema information\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"dataType\",\"type\":\"com.pingcap.simple.avro.DataType\"},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"default\",\"type\":[\"null\",\"string\"]}],\"name\":\"ColumnSchema\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"each index's schema information\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"unique\",\"type\":\"boolean\"},{\"name\":\"primary\",\"type\":\"boolean\"},{\"name\":\"nullable\",\"type\":\"boolean\"},{\"name\":\"columns\",\"type\":{\"items\":\"string\",\"type\":\"array\"}}],\"name\":\"IndexSchema\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"table schema information\",\"fields\":[{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableID\",\"type\":\"long\"},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"columns\",\"type\":{\"items\":\"com.pingcap.simple.avro.ColumnSchema\",\"type\":\"array\"}},{\"name\":\"indexes\",\"type\":{\"items\":\"com.pingcap.simple.avro.IndexSchema\",\"type\":\"array\"}}],\"name\":\"TableSchema\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"event's e2e checksum information\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"corrupted\",\"type\":\"boolean\"},{\"name\":\"current\",\"type\":\"long\"},{\"name\":\"previous\",\"type\":\"long\"}],\"name\":\"Checksum\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the message format of the watermark event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"}],\"name\":\"Watermark\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the message format of the bootstrap event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"name\":\"tableSchema\",\"type\":\"com.pingcap.simple.avro.TableSchema\"}],\"name\":\"Bootstrap\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the message format of the DDL event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"type\",\"type\":{\"name\":\"DDLType\",\"symbols\":[\"CREATE\",\"ALTER\",\"ERASE\",\"RENAME\",\"TRUNCATE\",\"CINDEX\",\"DINDEX\",\"QUERY\"],\"type\":\"enum\"}},{\"name\":\"sql\",\"type\":\"string\"},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"default\":null,\"name\":\"tableSchema\",\"type\":[\"null\",\"com.pingcap.simple.avro.TableSchema\"]},{\"default\":null,\"name\":\"preTableSchema\",\"type\":[\"null\",\"com.pingcap.simple.avro.TableSchema\"]}],\"name\":\"DDL\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the message format of the DML event\",\"fields\":[{\"name\":\"version\",\"type\":\"int\"},{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableID\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"name\":\"DMLType\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\"],\"type\":\"enum\"}},{\"name\":\"commitTs\",\"type\":\"long\"},{\"name\":\"buildTs\",\"type\":\"long\"},{\"name\":\"schemaVersion\",\"type\":\"long\"},{\"default\":null,\"name\":\"claimCheckLocation\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"handleKeyOnly\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"checksum\",\"type\":[\"null\",\"com.pingcap.simple.avro.Checksum\"]},{\"default\":null,\"name\":\"data\",\"type\":[\"null\",{\"default\":null,\"type\":\"map\",\"values\":[\"null\",\"long\",\"float\",\"double\",\"string\",\"bytes\"]}]},{\"default\":null,\"name\":\"old\",\"type\":[\"null\",{\"default\":null,\"type\":\"map\",\"values\":[\"null\",\"long\",\"float\",\"double\",\"string\",\"bytes\"]}]}],\"name\":\"DML\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"},{\"docs\":\"the wrapper for all kind of messages\",\"fields\":[{\"name\":\"payload\",\"type\":[\"com.pingcap.simple.avro.Watermark\",\"com.pingcap.simple.avro.Bootstrap\",\"com.pingcap.simple.avro.DDL\",\"com.pingcap.simple.avro.DML\"]}],\"name\":\"Message\",\"namespace\":\"com.pingcap.simple.avro\",\"type\":\"record\"}]"
}

func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetBoolean(v bool) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetInt(v int32) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetBytes(v []byte) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetLong(v int64) {

	r.UnionType = (UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnum)(v)
}

func (r *UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) Get(i int) types.Field {

	switch i {
	case 0:
		r.DataType = NewDataType()
		return &types.Record{Target: (&r.DataType)}
	case 1:
		r.ColumnSchema = NewColumnSchema()
		return &types.Record{Target: (&r.ColumnSchema)}
	case 2:
		r.IndexSchema = NewIndexSchema()
		return &types.Record{Target: (&r.IndexSchema)}
	case 3:
		r.TableSchema = NewTableSchema()
		return &types.Record{Target: (&r.TableSchema)}
	case 4:
		r.Checksum = NewChecksum()
		return &types.Record{Target: (&r.Checksum)}
	case 5:
		r.Watermark = NewWatermark()
		return &types.Record{Target: (&r.Watermark)}
	case 6:
		r.Bootstrap = NewBootstrap()
		return &types.Record{Target: (&r.Bootstrap)}
	case 7:
		r.DDL = NewDDL()
		return &types.Record{Target: (&r.DDL)}
	case 8:
		r.DML = NewDML()
		return &types.Record{Target: (&r.DML)}
	case 9:
		r.Message = NewMessage()
		return &types.Record{Target: (&r.Message)}
	}
	panic("Unknown field index")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) NullField(i int) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) HintSize(i int) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) SetDefault(i int) {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) Finalize() {
}

func (r UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) MarshalJSON() ([]byte, error) {

	switch r.UnionType {
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDataType:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.DataType": r.DataType})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumColumnSchema:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.ColumnSchema": r.ColumnSchema})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumIndexSchema:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.IndexSchema": r.IndexSchema})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumTableSchema:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.TableSchema": r.TableSchema})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumChecksum:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.Checksum": r.Checksum})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumWatermark:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.Watermark": r.Watermark})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumBootstrap:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.Bootstrap": r.Bootstrap})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDDL:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.DDL": r.DDL})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumDML:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.DML": r.DML})
	case UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessageTypeEnumMessage:
		return json.Marshal(map[string]interface{}{"com.pingcap.simple.avro.Message": r.Message})
	}
	return nil, fmt.Errorf("invalid value for UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage")
}

func (r *UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["com.pingcap.simple.avro.DataType"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.DataType)
	}
	if value, ok := fields["com.pingcap.simple.avro.ColumnSchema"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ColumnSchema)
	}
	if value, ok := fields["com.pingcap.simple.avro.IndexSchema"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.IndexSchema)
	}
	if value, ok := fields["com.pingcap.simple.avro.TableSchema"]; ok {
		r.UnionType = 3
		return json.Unmarshal([]byte(value), &r.TableSchema)
	}
	if value, ok := fields["com.pingcap.simple.avro.Checksum"]; ok {
		r.UnionType = 4
		return json.Unmarshal([]byte(value), &r.Checksum)
	}
	if value, ok := fields["com.pingcap.simple.avro.Watermark"]; ok {
		r.UnionType = 5
		return json.Unmarshal([]byte(value), &r.Watermark)
	}
	if value, ok := fields["com.pingcap.simple.avro.Bootstrap"]; ok {
		r.UnionType = 6
		return json.Unmarshal([]byte(value), &r.Bootstrap)
	}
	if value, ok := fields["com.pingcap.simple.avro.DDL"]; ok {
		r.UnionType = 7
		return json.Unmarshal([]byte(value), &r.DDL)
	}
	if value, ok := fields["com.pingcap.simple.avro.DML"]; ok {
		r.UnionType = 8
		return json.Unmarshal([]byte(value), &r.DML)
	}
	if value, ok := fields["com.pingcap.simple.avro.Message"]; ok {
		r.UnionType = 9
		return json.Unmarshal([]byte(value), &r.Message)
	}
	return fmt.Errorf("invalid value for UnionDataTypeColumnSchemaIndexSchemaTableSchemaChecksumWatermarkBootstrapDDLDMLMessage")
}
