// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sink/kafka/v2/client.go

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kafka "github.com/segmentio/kafka-go"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateTopics mocks base method.
func (m *MockClient) CreateTopics(ctx context.Context, req *kafka.CreateTopicsRequest) (*kafka.CreateTopicsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopics", ctx, req)
	ret0, _ := ret[0].(*kafka.CreateTopicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopics indicates an expected call of CreateTopics.
func (mr *MockClientMockRecorder) CreateTopics(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopics", reflect.TypeOf((*MockClient)(nil).CreateTopics), ctx, req)
}

// DescribeConfigs mocks base method.
func (m *MockClient) DescribeConfigs(ctx context.Context, req *kafka.DescribeConfigsRequest) (*kafka.DescribeConfigsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigs", ctx, req)
	ret0, _ := ret[0].(*kafka.DescribeConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigs indicates an expected call of DescribeConfigs.
func (mr *MockClientMockRecorder) DescribeConfigs(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigs", reflect.TypeOf((*MockClient)(nil).DescribeConfigs), ctx, req)
}

// Metadata mocks base method.
func (m *MockClient) Metadata(ctx context.Context, req *kafka.MetadataRequest) (*kafka.MetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", ctx, req)
	ret0, _ := ret[0].(*kafka.MetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockClientMockRecorder) Metadata(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockClient)(nil).Metadata), ctx, req)
}
