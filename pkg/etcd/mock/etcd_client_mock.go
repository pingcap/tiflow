// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/etcd/client_for_api.go

// Package mock_etcd is a generated GoMock package.
package mock_etcd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/pingcap/tiflow/cdc/model"
	mvccpb "go.etcd.io/etcd/api/v3/mvccpb"
)

// MockCDCEtcdClientForAPI is a mock of CDCEtcdClientForAPI interface.
type MockCDCEtcdClientForAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCDCEtcdClientForAPIMockRecorder
}

// MockCDCEtcdClientForAPIMockRecorder is the mock recorder for MockCDCEtcdClientForAPI.
type MockCDCEtcdClientForAPIMockRecorder struct {
	mock *MockCDCEtcdClientForAPI
}

// NewMockCDCEtcdClientForAPI creates a new mock instance.
func NewMockCDCEtcdClientForAPI(ctrl *gomock.Controller) *MockCDCEtcdClientForAPI {
	mock := &MockCDCEtcdClientForAPI{ctrl: ctrl}
	mock.recorder = &MockCDCEtcdClientForAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCDCEtcdClientForAPI) EXPECT() *MockCDCEtcdClientForAPIMockRecorder {
	return m.recorder
}

// CreateChangefeedInfo mocks base method.
func (m *MockCDCEtcdClientForAPI) CreateChangefeedInfo(arg0 context.Context, arg1 *model.UpstreamInfo, arg2 *model.ChangeFeedInfo, arg3 model.ChangeFeedID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChangefeedInfo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChangefeedInfo indicates an expected call of CreateChangefeedInfo.
func (mr *MockCDCEtcdClientForAPIMockRecorder) CreateChangefeedInfo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChangefeedInfo", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).CreateChangefeedInfo), arg0, arg1, arg2, arg3)
}

// GetAllCDCInfo mocks base method.
func (m *MockCDCEtcdClientForAPI) GetAllCDCInfo(ctx context.Context) ([]*mvccpb.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCDCInfo", ctx)
	ret0, _ := ret[0].([]*mvccpb.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCDCInfo indicates an expected call of GetAllCDCInfo.
func (mr *MockCDCEtcdClientForAPIMockRecorder) GetAllCDCInfo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCDCInfo", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).GetAllCDCInfo), ctx)
}

// GetChangeFeedInfo mocks base method.
func (m *MockCDCEtcdClientForAPI) GetChangeFeedInfo(ctx context.Context, id model.ChangeFeedID) (*model.ChangeFeedInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeFeedInfo", ctx, id)
	ret0, _ := ret[0].(*model.ChangeFeedInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeFeedInfo indicates an expected call of GetChangeFeedInfo.
func (mr *MockCDCEtcdClientForAPIMockRecorder) GetChangeFeedInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeFeedInfo", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).GetChangeFeedInfo), ctx, id)
}

// GetChangeFeedStatus mocks base method.
func (m *MockCDCEtcdClientForAPI) GetChangeFeedStatus(ctx context.Context, id model.ChangeFeedID) (*model.ChangeFeedStatus, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeFeedStatus", ctx, id)
	ret0, _ := ret[0].(*model.ChangeFeedStatus)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetChangeFeedStatus indicates an expected call of GetChangeFeedStatus.
func (mr *MockCDCEtcdClientForAPIMockRecorder) GetChangeFeedStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeFeedStatus", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).GetChangeFeedStatus), ctx, id)
}

// GetEnsureGCServiceID mocks base method.
func (m *MockCDCEtcdClientForAPI) GetEnsureGCServiceID(tag string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnsureGCServiceID", tag)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEnsureGCServiceID indicates an expected call of GetEnsureGCServiceID.
func (mr *MockCDCEtcdClientForAPIMockRecorder) GetEnsureGCServiceID(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnsureGCServiceID", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).GetEnsureGCServiceID), tag)
}

// GetGCServiceID mocks base method.
func (m *MockCDCEtcdClientForAPI) GetGCServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGCServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGCServiceID indicates an expected call of GetGCServiceID.
func (mr *MockCDCEtcdClientForAPIMockRecorder) GetGCServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCServiceID", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).GetGCServiceID))
}

// GetUpstreamInfo mocks base method.
func (m *MockCDCEtcdClientForAPI) GetUpstreamInfo(ctx context.Context, upstreamID model.UpstreamID, namespace string) (*model.UpstreamInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpstreamInfo", ctx, upstreamID, namespace)
	ret0, _ := ret[0].(*model.UpstreamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpstreamInfo indicates an expected call of GetUpstreamInfo.
func (mr *MockCDCEtcdClientForAPIMockRecorder) GetUpstreamInfo(ctx, upstreamID, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpstreamInfo", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).GetUpstreamInfo), ctx, upstreamID, namespace)
}

// SaveChangeFeedInfo mocks base method.
func (m *MockCDCEtcdClientForAPI) SaveChangeFeedInfo(ctx context.Context, info *model.ChangeFeedInfo, changeFeedID model.ChangeFeedID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChangeFeedInfo", ctx, info, changeFeedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveChangeFeedInfo indicates an expected call of SaveChangeFeedInfo.
func (mr *MockCDCEtcdClientForAPIMockRecorder) SaveChangeFeedInfo(ctx, info, changeFeedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChangeFeedInfo", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).SaveChangeFeedInfo), ctx, info, changeFeedID)
}

// UpdateChangefeedAndUpstream mocks base method.
func (m *MockCDCEtcdClientForAPI) UpdateChangefeedAndUpstream(ctx context.Context, upstreamInfo *model.UpstreamInfo, changeFeedInfo *model.ChangeFeedInfo, changeFeedID model.ChangeFeedID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChangefeedAndUpstream", ctx, upstreamInfo, changeFeedInfo, changeFeedID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChangefeedAndUpstream indicates an expected call of UpdateChangefeedAndUpstream.
func (mr *MockCDCEtcdClientForAPIMockRecorder) UpdateChangefeedAndUpstream(ctx, upstreamInfo, changeFeedInfo, changeFeedID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChangefeedAndUpstream", reflect.TypeOf((*MockCDCEtcdClientForAPI)(nil).UpdateChangefeedAndUpstream), ctx, upstreamInfo, changeFeedInfo, changeFeedID)
}
